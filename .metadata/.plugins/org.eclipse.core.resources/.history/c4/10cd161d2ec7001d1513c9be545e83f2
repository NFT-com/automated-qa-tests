package com.nft.qa.pages;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchSessionException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.nft.qa.base.TestBase;
import com.nft.qa.util.TestUtility;

public class ReviewFeedPage extends TestBase {

	TestUtility testUtil = new TestUtility();
	HomePage homePage = new HomePage();

	@FindBy(xpath = "//div[@class='sc-cpmLhU cptrmy']")
	WebElement TotalCount;

	@FindBy(xpath = "//*[@id='fltrOptPosting Date']")
	WebElement PostingDate;

	@FindBy(id = "//a[contains(text(),'Custom')]")
	WebElement custom;

	@FindBy(id = "calendarfrom")
	WebElement fromDate;

	@FindBy(id = "calendarto")
	WebElement toDate;

	@FindBy(xpath = "//li[@class='calendaractionitem sc-efAmGo isBGLh']//a[contains(text(),'All Time')]")
	WebElement AllTimeFilter;

	@FindBy(xpath = "//div[@class='dropdownwrapperactions sc-bocRTG dkQTKu']//a[@class='dropdownapplyaction sc-bNpCPZ cpxkDZ'][contains(text(),'Apply')]")
	WebElement ApplyButton;

	@FindBy(xpath = "//div[contains(text(),'REVIEWS')]")
	WebElement Reviews;

	@FindBy(xpath = "/html/body/div/div/div[1]/ul/li[2]/div/div[1]/div")
	WebElement MyProfile;

	@FindBy(xpath = "//div[contains(text(),'Accounts')]")
	WebElement Account;

	@FindBy(xpath = "//div[contains(text(),'Entitlements')]")
	WebElement Entitlements;

	@FindBy(css = "#moreFiltOpt")
	WebElement filterOptions;

	@FindBy(css = "#saveFiltOpt")
	WebElement saveAsNewFilter;

	@FindBy(xpath = "//input[@type='text' and @placeholder='Filter Name']")
	WebElement filterName;

	@FindBy(xpath = "//a[@class='export-filt-opt']")
	WebElement exportReviewData;

	@FindBy(xpath = "//span[contains(text(),'Export')]")
	WebElement exportBtn;

	@FindBy(xpath = "//span[contains(text(),'Submit')]")
	WebElement submitBtn;

	@FindBy(xpath = "//a[@class='rst-filt-opt']")
	WebElement resetFtr;

	@FindBy(xpath = "//a[starts-with(@class,'filter-toggle sc-')]")
	WebElement filterIcon;

	@FindBy(xpath = "//article[1]//div[1]//div[1]//div[3]//div[1]//button[1]")
	WebElement RespondBTN;

	public ReviewFeedPage() {

		PageFactory.initElements(driver, this);

	}

	public void selectReviewOnEntitlements() {

		TestUtility.clickOn(driver, MyProfile, 30);
		TestUtility.clickOn(driver, Account, 30);
		TestUtility.clickOn(driver, Entitlements, 30);
	}

	/*
	 * public void selectReviews() {
	 * 
	 * driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); WebElement
	 * locator = driver.findElement(By.xpath("//div[contains(text(),'REVIEWS')]"));
	 * new WebDriverWait(driver,
	 * 60).ignoring(NoSuchSessionException.class).until(ExpectedConditions.
	 * elementToBeClickable(locator)); locator.click();
	 * 
	 * }
	 */

	public void selectCheesecake() throws Exception {
		Thread.sleep(5000);
		homePage.clickOnContextAndSelectCheesecake();
		String LocationName = driver.findElement(By.xpath("//div[contains(text(),'Cheesecake Factory')]")).getText();
		System.out.println("Location Name : " + LocationName);

	}

	public void checkReviewEnable() {

		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
		boolean checkbox = driver.findElement(By.xpath("//input[@id='entitlements-Review']")).isSelected();

		System.out.println("Check checkbox value is : " + checkbox);
		if (checkbox == true) {

			System.out.println("Checkbox is already checked  ");

		} else {

			WebElement ReviewChecked = driver.findElement(By.xpath("//input[@id='entitlements-Review']"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", ReviewChecked);

			System.out.println("Checkbox is checked");

			driver.findElement(By.xpath("//span[contains(text(),'Update')]")).click();
		}
	}

	public void ClickOnReviews() throws Exception {
		Thread.sleep(5000);
		WebElement Reviews = driver.findElement(By.xpath("//div[contains(text(),'REVIEWS')]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(Reviews);
		actions.click().build().perform();
		Thread.sleep(2000);
		driver.findElement(By.xpath("/descendant::div[contains(text(),'Reviews Feed')][1]")).click();
	}

	public void TotalCountOnDefault() throws Exception {

		Thread.sleep(5000);
		String totalCount = (String) ((JavascriptExecutor) driver).executeScript("return arguments[0].innerText;",
				driver.findElement(By.xpath("//div[starts-with(@class,'totalcounttext sc-')]")));
		System.out.println("Total Count on Default : " + totalCount);
	}

	public void postingDate() throws Exception {

		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 20);
		WebElement PostingDate = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("//a[@id='fltrOptPosting Date']//span[contains(text(),'Posting Date')]")));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", PostingDate);

		WebDriverWait wait1 = new WebDriverWait(driver, 30);
		WebElement AllTimeFilter = wait1.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("//li[starts-with(@class,'calendaractionitem sc-')]//a[contains(text(),'All Time')]")));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", AllTimeFilter);

		WebDriverWait wait2 = new WebDriverWait(driver, 20);
		WebElement ApplyButton = wait2.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("/descendant::a[starts-with(@class,'dropdownapplyaction sc-')][1]")));
		JavascriptExecutor js2 = (JavascriptExecutor) driver; // div[starts-with(@class,'dropdownwrapperactions
																// sc-')]//a[starts-with(@class,'dropdownapplyaction
																// sc-') and contains(text(),'Apply')]
		js2.executeScript("arguments[0].click();", ApplyButton);
	}

	public void TotalCountOnALLTime() throws Exception {

		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
		Thread.sleep(20000);
		String totalCount = (String) ((JavascriptExecutor) driver).executeScript("return arguments[0].innerText;",
				driver.findElement(By.xpath("//div[starts-with(@class,'totalcounttext sc-')]")));
		System.out.println("Total Count on Default : " + totalCount);
	}

	public void DefaultReviewText() throws Exception {
		String defReviewText = driver.findElement(By.xpath("//span[contains(text(),'Review Text')]")).getText();
		String defNotEmpty = driver.findElement(By.xpath("//span[contains(text(),'Not Empty')]")).getText();
		Assert.assertTrue(defReviewText.contains("Review Text"));

		Assert.assertTrue(defNotEmpty.contains("Not Empty"));
		System.out.println("Default ReviewText is ==> " + defReviewText + defNotEmpty);
	}

	public void RespondFeature() throws Exception {

		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		WebElement element = driver
				.findElement(By.xpath("/descendant::a[starts-with(@class,'reply reply-to-review-start sc-')][1]"));
		TestUtility.clickOn(driver, element, 60);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).clear();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys("Test Message");
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys(Keys.BACK_SPACE);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys(Keys.BACK_SPACE);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys(Keys.BACK_SPACE);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys(Keys.BACK_SPACE);
		driver.findElement(By.xpath("//textarea[@placeholder='Enter your reply here...']")).sendKeys(Keys.BACK_SPACE);

		driver.findElement(By.xpath("//a[starts-with(@class,'cancel cancel-response sc-')]//i[contains(text(),'close')]")).click();
	}

	public void AllReview() throws Exception {
		Thread.sleep(2000);
		driver.findElement(By.xpath("//span[contains(text(),'Response Required')]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("/descendant::div[contains(text(),'All Reviews')][1]")).click();
		Thread.sleep(3000);

		String reviewStatus = driver.findElement(By.xpath("//span[contains(text(),'Review Status')]")).getText();
		String ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']//span[contains(text(),'All')]")).getText();
		Assert.assertTrue(reviewStatus.contains("Review Status"));
		Assert.assertTrue(ReviewStatus.contains("All"));

		System.out.println("It displays 'Review Status' as ALL in filter on selecting 'All Review'");
	}

	public void ClickOnSourceProviderFilter() throws Exception {
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		Thread.sleep(2000);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		 JavascriptExecutor js = (JavascriptExecutor)driver;
		 WebElement Apply = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[@id='fltrOptPublisher']")));
		 js.executeScript("arguments[0].click();", Apply);
		Thread.sleep(2000);
	}

	public void VerifyGoogleImage() throws Exception {
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

		WebDriverWait wait = new WebDriverWait(driver, 30);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='Google']")).click();
		Thread.sleep(2000);
		 JavascriptExecutor js = (JavascriptExecutor)driver;
		 WebElement Apply = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("/descendant::a[contains(text(),'Apply')][4]")));
		 js.executeScript("arguments[0].click();", Apply);
		

		Thread.sleep(5000);
		WebElement GoogleImage = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("/descendant::div[starts-with(@class,'provider-logo-wrapper sc-')][1]")));
		Assert.assertTrue(GoogleImage.isDisplayed());

		if (!GoogleImage.isDisplayed()) {
			System.out.println("Google not displayed.");
		} else {
			System.out.println("Google displayed.");
		}

	}

	public void VerifyFacebookImage() throws Exception {
		Thread.sleep(3000);
		WebElement sourceProvider = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']"));
		Thread.sleep(2000);
		sourceProvider.click();
		//TestUtility.clickOn(driver, sourceProvider, 30);
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='Google']")).click();
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='Facebook']")).click();
		Thread.sleep(2000);
		WebElement applyBtn = driver
				.findElement(By.xpath("/descendant::a[contains(@class,'dropdownapplyaction sc-')][4]"));
		TestUtility.clickOn(driver, applyBtn, 30);
		Thread.sleep(3000);
		WebDriverWait wait = new WebDriverWait(driver, 30);

		WebElement FacebookImage = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("/descendant::div[contains(@class,'provider-logo-wrapper sc-')][1]")));

		Assert.assertTrue(FacebookImage.isDisplayed());

		if (!FacebookImage.isDisplayed()) {
			System.out.println("Facebook image not displayed.");
		} else {
			System.out.println("Facebook image displayed.");
		}

	}

	public void VerifyYelpImage() throws Exception {
		Thread.sleep(3000);
		WebElement sourceProvider = driver
				.findElement(By.xpath("//a[starts-with(@class,'bqltoggle fltr-opt-publisher sc-')]"));
		Thread.sleep(3000);
		TestUtility.clickOn(driver, sourceProvider, 30);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='Facebook']")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='Yelp']")).click();
		Thread.sleep(2000);
		WebElement applyBtn = driver
				.findElement(By.xpath("/descendant::a[contains(@class,'dropdownapplyaction sc-')][4]"));
		TestUtility.clickOn(driver, applyBtn, 30);
		Thread.sleep(4000);
		WebElement YelpImage = driver.findElement(
				By.xpath("//div[contains(@class,'provider-logo-wrapper sc-')]//i[contains(@class,'provider-6')]"));
		Thread.sleep(3000);

		Assert.assertTrue(YelpImage.isDisplayed());

		if (!YelpImage.isDisplayed()) {
			System.out.println("Yelp image not displayed.");
		} else {
			System.out.println("Yelp image displayed.");
		}

	}

	public void VerifyTripAdvisorImage() throws Exception {
		Thread.sleep(3000);
		WebElement sourceProvider = driver
				.findElement(By.xpath("//a[starts-with(@class,'bqltoggle fltr-opt-publisher sc-')]"));
		Thread.sleep(3000);
		TestUtility.clickOn(driver, sourceProvider, 30);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='Yelp']")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='TripAdvisor']")).click();
		Thread.sleep(2000);
		WebElement applyBtn = driver
				.findElement(By.xpath("/descendant::a[contains(@class,'dropdownapplyaction sc-')][4]"));
		TestUtility.clickOn(driver, applyBtn, 30);
		Thread.sleep(4000);
		WebElement TripAdvisorImage = driver.findElement(
				By.xpath("//div[contains(@class,'provider-logo-wrapper sc-')]//i[contains(@class,'provider-11')]"));
		Thread.sleep(3000);
		Assert.assertTrue(TripAdvisorImage.isDisplayed());

		if (!TripAdvisorImage.isDisplayed()) {
			System.out.println("TripAdvisor image not displayed.");
		} else {
			System.out.println("TripAdvisor image displayed.");
		}

		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

	}

	public void VerifygooglePublisher() throws Exception {
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

		WebElement sourceProvider = driver
				.findElement(By.xpath("//a[starts-with(@class,'bqltoggle fltr-opt-publisher sc-')]"));
		Thread.sleep(3000);
		TestUtility.clickOn(driver, sourceProvider, 30);
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='TripAdvisor']")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@id='Google']")).click();
		Thread.sleep(2000);
		WebElement applyBtn = driver.findElement(By.xpath("/descendant::a[contains(@class,'dropdownapplyaction sc-')][4]"));

		TestUtility.clickOn(driver, applyBtn, 30);
		Thread.sleep(3000);
		WebElement GooglePublisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']//span[2]"));
		String GooglePub = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']//span[2]")).getText();
		System.out.println("The Publiser name is" + GooglePub);
		Thread.sleep(3000);
		// Assert.assertEquals(GooglePub, ": Google");
		Assert.assertTrue(GooglePub.contains("Google"));
		if (!GooglePublisher.isDisplayed()) {
			System.out.println("Google Publisher displayed.");
		} else {
			System.out.println("Google Publisher is not displayed.");
		}

		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	public void VerifyTotalReviewOnPageFor10() throws Exception {

		driver.findElement(By.xpath("//div[contains(@class,'actionsright sc-')]/div[2]/div[1]/div[1]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath(
				"//div[contains(@class,'sc-')]//div[contains(@class,'dropdown-content sc-')]//div[contains(text(),'10')]"))
				.click();
		Thread.sleep(2000);
		List<WebElement> elements = driver.findElements(By.xpath(
				"//div[starts-with(@class,'tile-container')]//div[starts-with(@class,'tile-body sc-')]//div[starts-with(@class,'header-container sc-')]//div[1]//a[1]"));
		System.out.println("Number of Tile:" + elements.size());

		for (int i = 0; i < elements.size(); i++) {
			System.out.println("Review Records List : " + elements.get(i).getText());

			Thread.sleep(3000);
		}

	}

	public void VerifyTotalReviewOnPageFor25() throws Exception {
		Thread.sleep(5000);
		driver.findElement(By.xpath("//div[contains(@class,'actionsright sc-')]/div[2]/div[1]/div[1]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath(
				"//div[contains(@class,'sc-')]//div[contains(@class,'dropdown-content sc-')]//div[contains(text(),'25')]"))
				.click();
		Thread.sleep(2000);
		List<WebElement> elements = driver.findElements(By.xpath(
				"//div[starts-with(@class,'tile-container')]//div[starts-with(@class,'tile-body sc-')]//div[starts-with(@class,'header-container sc-')]//div[1]//a[1]"));
		System.out.println("Number of Tile:" + elements.size());

		for (int i = 0; i < elements.size(); i++) {
			System.out.println("Review Records List : " + elements.get(i).getText());
		}

	}

	public void VerifyTotalReviewOnPageFor50() throws Exception {

		Thread.sleep(5000);
		driver.findElement(By.xpath("//div[contains(@class,'actionsright sc-')]/div[2]/div[1]/div[1]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath(
				"//div[contains(@class,'sc-')]//div[contains(@class,'dropdown-content sc-')]//div[contains(text(),'50')]"))
				.click();
		Thread.sleep(5000);
		List<WebElement> elements = driver.findElements(By.xpath(
				"//div[starts-with(@class,'tile-container')]//div[starts-with(@class,'tile-body sc-')]//div[starts-with(@class,'header-container sc-')]//div[1]//a[1]"));
		System.out.println("Number of Tile:" + elements.size());

		for (int i = 0; i < elements.size(); i++) {
			System.out.println("Review Records List : " + elements.get(i).getText());
		}

	}

	public void VerifyTotalReviewOnPageFor100() throws Exception {
		Thread.sleep(5000);
		driver.findElement(By.xpath("//div[contains(@class,'actionsright sc-')]/div[2]/div[1]/div[1]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath(
				"//div[contains(@class,'sc-')]//div[contains(@class,'dropdown-content sc-')]//div[contains(text(),'100')]"))
				.click();
		Thread.sleep(5000);
		List<WebElement> elements = driver.findElements(By.xpath(
				"//div[starts-with(@class,'tile-container')]//div[starts-with(@class,'tile-body sc-')]//div[starts-with(@class,'header-container sc-')]//div[1]//a[1]"));
		System.out.println("Number of Tile:" + elements.size());

		for (int i = 0; i < elements.size(); i++) {
			System.out.println("Review Records List : " + elements.get(i).getText());
		}

	}

	public void VerifyAddDeleteTag() throws Exception {
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		String placeHolderValue = driver
				.findElement(By.xpath("//input[contains(@class,'undefined-input sc-') and @placeholder='Add Tag']"))
				.getAttribute("placeholder");
		System.out.println("place Holder name is : " + placeHolderValue);

		driver.findElement(By.xpath("//input[contains(@class,'undefined-input sc-') and @placeholder='Add Tag']"))
				.click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//div[contains(text(),'Birthday')]")).click();

		String tagName = driver.findElement(By.xpath("//span[@class='tag-item-tagname']")).getText();
		System.out.println("Added Tag name is ==> " + tagName);
		Thread.sleep(1000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement xClick = driver.findElement(By.xpath(
				"//div[contains(@class,'tag-list-item sc-')]//span[contains(text(),'Birthday')]//following::i[1]"));
		js.executeScript("arguments[0].click();", xClick);
	}

	public void saveFilter() throws Exception {
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		Thread.sleep(1000);
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", filterOptions);

		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", saveAsNewFilter);

		filterName.sendKeys("Test123");
		TestUtility.clickOn(driver, submitBtn, 30);
	}

	public void verifyFilter() throws InterruptedException {
		TestUtility.clickOn(driver, filterIcon, 30);
		Thread.sleep(2000);
		String filterRecordPresent = driver
				.findElement(By.xpath("//h5[starts-with(@class,'savedfiltertitle sc-')][contains(text(),'Test123')]"))
				.getText();
		Assert.assertTrue(filterRecordPresent.contains("Test123"));
		System.out.println("Filter name which is saved ==> " + filterRecordPresent);

	}

	public void DeleteSavedFilter() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(By.xpath("//i[@class='material-icons'][contains(text(),'close')]")).click();

	}

	public void preCannedFilterSelect() throws Exception {

		driver.navigate().refresh();
		Thread.sleep(5000);
		driver.findElement(By.xpath("//span[contains(text(),'Response Required')]")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("/descendant::div[contains(text(),'All Reviews')][1]")).click();
		Thread.sleep(5000);

	}

	public void Select3DotReviewTile() throws InterruptedException {

		driver.findElement(By.xpath("/descendant::div[starts-with(@class,'show-more-options sc-')][1]")).click();
		Thread.sleep(2000);
		List<WebElement> elements = driver.findElements(By.xpath(
				"//div[@class='popover-content sc-kEYyzF fJEHpl']//div[@class='dropdown-content sc-CtfFt bphjLy']"));
		System.out.println("\nNumber of elements:" + elements.size());
		for (int i = 0; i < elements.size(); i++) {
			System.out.println("Review preCannedFilter List :\n" + elements.get(i).getText() + "\n\n");
		}

	}

	public void SelectGotoSite() throws InterruptedException {

		Thread.sleep(2000);
		driver.findElement(By.xpath("/descendant::div[contains(text(),'Go to Review Site')][1]")).click();
		ArrayList<String> tabs2 = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs2.get(1));
		Thread.sleep(2000);
		driver.close();
		driver.switchTo().window(tabs2.get(0));

	}

	public void SelectReviewHistory() throws InterruptedException {

		driver.findElement(By.xpath("/descendant::div[starts-with(@class,'show-more-options sc-')][1]")).click();
		Thread.sleep(2000);

		driver.findElement(By.xpath("/descendant::div[contains(text(),'Review History')][1]")).click();
		String History = driver.findElement(By.xpath("/descendant::div[contains(text(),'Review History')][2]"))
				.getText();
		Assert.assertTrue(History.contains("Review History"));

		String response = driver.findElement(By.xpath("//p[contains(text(),'History')]")).getText();
		Assert.assertEquals(response, "History");
		driver.findElement(By.xpath("//a[contains(text(),'CLOSE')]")).click();

	}

	public void SelectShareReview() throws InterruptedException {

		driver.findElement(By.xpath("/descendant::div[starts-with(@class,'show-more-options sc-')][1]")).click();
		Thread.sleep(2000);

		driver.findElement(By.xpath("/descendant::div[contains(text(),'Share Review')][1]")).click();

		String Share = driver.findElement(By.xpath("/descendant::div[contains(text(),'Share Review')][2]")).getText();
		System.out.println(Share);

		driver.findElement(By.xpath("//input[@placeholder='Enter an email address']")).sendKeys("sachin@where2getit.com");
		driver.findElement(By.xpath("//i[@id='submitbutton']")).click();

		driver.findElement(By.xpath("//textarea[@placeholder='Enter your message...']"))
				.sendKeys("Review Test Option Check");

		String Cancel1 = driver.findElement(By.xpath("//a[contains(text(),'CANCEL')]")).getText();
		Assert.assertEquals(Cancel1, "CANCEL");

		String Share1 = driver.findElement(By.xpath("//a[contains(text(),'SEND')]")).getText();
		Assert.assertEquals(Share1, "SEND");

		driver.findElement(By.xpath("//a[contains(text(),'SEND')]")).click();
		Thread.sleep(5000);
	}

	public void SortOldestFilter() throws InterruptedException {

		Thread.sleep(5000);
		WebElement Newest = driver.findElement(By.xpath("//span[contains(text(),'Newest')]"));
		TestUtility.clickOn(driver, Newest, 30);
		Thread.sleep(2000);
		WebElement oldest = driver.findElement(By.xpath("//div[contains(text(),'Oldest')]"));
		TestUtility.clickOn(driver, oldest, 30);
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		Thread.sleep(7000);

		String Date = driver.findElement(By.xpath("/descendant::span[contains(text(),'05/15/2002 12:30 PM IST')][1]"))
				.getText();
		Assert.assertEquals(Date, "05/15/2002 12:30 PM IST");
		System.out.println("Oldest Review date is present");

	}

	public void HighestRatedFilter() throws InterruptedException {
		Thread.sleep(2000);
		WebElement oldest = driver.findElement(By.xpath("//span[contains(text(),'Oldest')]"));
		TestUtility.clickOn(driver, oldest, 30);
		Thread.sleep(2000);
		WebElement Highestrated = driver.findElement(By.xpath("//div[contains(text(),'Highest Rated')]"));
		TestUtility.clickOn(driver, Highestrated, 30);
		driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		Thread.sleep(7000);

		Boolean Recommended = driver.findElement(By.xpath("/descendant::i[starts-with(@class,'fb-recommend  sc-')][1]"))
				.isDisplayed();
		Assert.assertTrue(Recommended);
		System.out.println("Highest Rated Review date is present");

	}

}

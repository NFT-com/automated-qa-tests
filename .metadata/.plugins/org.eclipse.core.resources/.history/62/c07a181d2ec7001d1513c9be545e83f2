package com.nft.qa.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import com.nft.qa.base.TestBase;

public class NEDPPage extends TestBase {

	

	@FindBy(xpath = "//button[@ng-click='goToManagement()']")
	WebElement SignInBtn;

	@FindBy(xpath = "//input[@ng-model='agencyCode']")
	WebElement AgencySite;

	@FindBy(xpath = "//input[@ng-model='userName']")
	WebElement User;

	@FindBy(xpath = "//input[@ng-model='password']")
	WebElement Password;

	@FindBy(xpath = "//button[@type='submit']")
	WebElement LoginBtn;

	@FindBy(xpath = "//button[@ng-click='logout($event,{withRedirect:true})']")
	WebElement LogOutBtn;

	@FindBy(xpath = "//span[contains(text(),' Testing Session Templates')]")
	WebElement SessionTemplates;

	@FindBy(xpath = "//button[contains(text(),'Create new Template')]")
	WebElement CreateTemplates;

	@FindBy(xpath = "//input[@id='tempalteName']")
	WebElement TemplateName;

	@FindBy(xpath = "//div[@id='sessionSite']//span[@class='btn btn-default form-control ui-select-toggle']")
	WebElement TemplateSiteDrpDwn;

	@FindBy(xpath = "//span[contains(text(),'Site One')]")
	WebElement TemplateSiteSelectDrpDwn;

	@FindBy(xpath = "//a[contains(text(),'Modalities')]")
	WebElement Modalities;

	@FindBy(xpath = "//label[contains(text(),'Reading')]")
	WebElement CheckBoxReading;

	@FindBy(xpath = "//label[contains(text(),'Math')]")
	WebElement CheckBoxMath;

	@FindBy(xpath = "//label[contains(text(),'Listening')]")
	WebElement CheckBoxListening;

	@FindBy(xpath = "//a[contains(text(),'Options')]")
	WebElement Options;

	@FindBy(xpath = "//span[contains(text(),'[Session Site]')]")
	WebElement OptionsDrpBtn;

	@FindBy(xpath = "/descendant::span[@class='ng-binding ng-scope'][contains(text(),'Site One')][2]")
	WebElement OptionsDrpBtnSelect;

	@FindBy(xpath = "//a[contains(text(),'Registration')]")
	WebElement Registration;

	@FindBy(xpath = "//div[@id='registrationtemplateConfigTab']//span[@class='btn btn-default form-control ui-select-toggle']")
	WebElement RegistrationDrpBtn;

	@FindBy(xpath = "//span[contains(text(),'ESL/ELL')]")
	WebElement RegistrationSelectDrpBtn;

	@FindBy(xpath = "//a[contains(text(),'Data')]")
	WebElement Data;

	@FindBy(xpath = "//a[contains(text(),'Layout')]")
	WebElement LayOut;

	@FindBy(xpath = "//label[contains(text(),'Show raw score')]")
	WebElement showrawscore;

	@FindBy(xpath = "//label[contains(text(),'Show pass/fail for G&H/WSCS')]")
	WebElement showPnF;

	@FindBy(xpath = "//a[contains(text(),'Admin')]")
	WebElement Admin;

	@FindBy(xpath = "//button[@ng-click='save()']")
	WebElement SaveBtn;

	@FindBy(xpath = "//span[contains(text(),'Testing Sessions')]")
	WebElement TestingSession;

	@FindBy(xpath = "//button[@ng-click='addEditSession()']")
	WebElement CreateTestingSession;

	@FindBy(xpath = "//div[@class='col-xs-11 col-sm-11 col-md-11 col-lg-11 col-xl-11']//span[@class='ui-select-placeholder text-muted ng-binding']")
	WebElement SelectSessionSite;

	@FindBy(xpath = "//span[contains(text(),'Site One')]")
	WebElement SessionSiteId;

	@FindBy(xpath = "//span[contains(text(),'Please select an existing template')]")
	WebElement SelectExistingTemplate;

	@FindBy(xpath = "//span[contains(text(),'Testing')]")
	WebElement SelectTemplate;

	@FindBy(xpath = "//button[@class='btn btn-success']")
	WebElement SelectBtn;

	@FindBy(xpath = "//button[@ng-click='save()']")
	WebElement SaveBtn1;

	@FindBy(xpath = "//*[@id=\"page-wrapper\"]/div/div[4]/div/table/tbody/tr[5]/td[3]/button")
	WebElement StartBtn;

	@FindBy(xpath = "//button[@ng-click='continue()']")
	WebElement StartBtn1;

	@FindBy(xpath = "//button[contains(text(),'Manage')]")
	WebElement ManageBtn;

	@FindBy(xpath = "//button[@ng-if='btnStopVisibility']")
	WebElement StopBtn;

	@FindBy(xpath = "//*[@id=\"page-wrapper\"]/div/div[4]/div/table/tbody/tr[5]/td[5]/button")
	WebElement DeleteBtn;

	@FindBy(xpath = "//button[contains(text(),'Yes')]")
	WebElement CnfrmDeleteBtn;

	public NEDPPage() {
		PageFactory.initElements(driver, this);
	}

	public void EnterHomePageUrl() {
		String PageUrl = driver.getCurrentUrl();
		System.out.println("The Url of a page is:" + PageUrl);
		Assert.assertEquals("https://etestsonline.org/AutomatedTesting/html5/#/", PageUrl);
	}

	public void ClickOnAgencyLogin() throws InterruptedException {

		Thread.sleep(3000);
		JavascriptExecutor jv = (JavascriptExecutor) driver;
		jv.executeScript("arguments[0].click();", SignInBtn);

		Thread.sleep(3000);
		JavascriptExecutor jf = (JavascriptExecutor) driver;
		jf.executeScript("arguments[0].click();", AgencySite);
		AgencySite.sendKeys("TCQARH");

		JavascriptExecutor jg = (JavascriptExecutor) driver;
		jg.executeScript("arguments[0].click();", User);
		User.sendKeys("james");

		JavascriptExecutor jh = (JavascriptExecutor) driver;
		jh.executeScript("arguments[0].click();", Password);
		Password.sendKeys("james");

		LoginBtn.click();

	}

	public void CreateSessionTemplates() throws InterruptedException {
		// SessionTemplates.click();
		Thread.sleep(4000);
		JavascriptExecutor jh = (JavascriptExecutor) driver;
		jh.executeScript("arguments[0].click();", SessionTemplates);
		// CreateTemplates.click();
		JavascriptExecutor ji = (JavascriptExecutor) driver;
		ji.executeScript("arguments[0].click();", CreateTemplates);
		String CreateTemp = driver.findElement(By.xpath("//button[contains(text(),'Create new Template')]")).getText();
		Assert.assertEquals(CreateTemp, "Create new Template");

		Thread.sleep(5000);
		TemplateName.sendKeys("Testing");
		Thread.sleep(3000);
		// TemplateSiteSelectDrpDwn.click();
		JavascriptExecutor jk = (JavascriptExecutor) driver;
		jk.executeScript("arguments[0].click();", TemplateSiteDrpDwn);
		JavascriptExecutor jL = (JavascriptExecutor) driver;
		jL.executeScript("arguments[0].click();", TemplateSiteSelectDrpDwn);

		Modalities.click();
		String Mod = driver.findElement(By.xpath("//a[contains(text(),'Modalities')]")).getText();
		Assert.assertEquals(Mod, "Modalities");
		CheckBoxReading.click();
		String CheckBox = driver.findElement(By.xpath("//label[contains(text(),'Reading')]")).getText();
		Assert.assertEquals(CheckBox, "Reading");
		CheckBoxMath.click();
		String CheckBox1 = driver.findElement(By.xpath("//label[contains(text(),'Math')]")).getText();
		Assert.assertEquals(CheckBox1, "Math");
		CheckBoxListening.click();
		String Listening = driver.findElement(By.xpath("//label[contains(text(),'Listening')]")).getText();
		Assert.assertEquals(Listening, "Listening");

		Options.click();
		OptionsDrpBtn.click();
		OptionsDrpBtnSelect.click();
		Registration.click();
		RegistrationDrpBtn.click();
		RegistrationSelectDrpBtn.click();
		Data.click();
		LayOut.click();
		showrawscore.click();
		showPnF.click();
		Admin.click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//input[@name='daysRepeatMod']")).clear();
		driver.findElement(By.xpath("//input[@name='daysRepeatMod']")).sendKeys("0");
		driver.findElement(By.xpath("//input[@name='daysRepeatTest']")).clear();
		driver.findElement(By.xpath("//input[@name='daysRepeatTest']")).sendKeys("0");

		SaveBtn.click();

	}

	public void TestingSessions() throws InterruptedException {
		// TestingSession.click();
		Thread.sleep(3000);
		JavascriptExecutor jh = (JavascriptExecutor) driver;
		jh.executeScript("arguments[0].click();", TestingSession);

		// CreateTestingSession.click();
		JavascriptExecutor jl = (JavascriptExecutor) driver;
		jl.executeScript("arguments[0].click();", CreateTestingSession);
		String CreateTemp = driver.findElement(By.xpath("//button[@ng-click='addEditSession()']")).getText();
		Assert.assertEquals(CreateTemp, "Create new Session");
		// SelectSessionSite.click();
		JavascriptExecutor jm = (JavascriptExecutor) driver;
		jm.executeScript("arguments[0].click();", SelectSessionSite);
		// SessionSiteId.click();
		JavascriptExecutor jn = (JavascriptExecutor) driver;
		jn.executeScript("arguments[0].click();", SessionSiteId);
		// SelectExistingTemplate.click();
		JavascriptExecutor jo = (JavascriptExecutor) driver;
		jo.executeScript("arguments[0].click();", SelectExistingTemplate);
		// SelectTemplate.click();
		JavascriptExecutor jp = (JavascriptExecutor) driver;
		jp.executeScript("arguments[0].click();", SelectTemplate);
		String SelectTemp = driver.findElement(By.xpath("//span[contains(text(),'Testing')]")).getText();
		Assert.assertEquals(SelectTemp, "Testing");
		// SelectBtn.click();
		JavascriptExecutor jq = (JavascriptExecutor) driver;
		jq.executeScript("arguments[0].click();", SelectBtn);

		Thread.sleep(1000);
		driver.findElement(By.xpath("//button[@ng-click='save()']")).isEnabled();
		SaveBtn1.click();
		String Save = driver.findElement(By.xpath("//button[@ng-click='save()']")).getText();
		Assert.assertEquals(Save, "Save");

	}

	public void StartSession() throws InterruptedException {

		Thread.sleep(4000);
		driver.findElement(By.xpath("//*[@id=\"page-wrapper\"]/div/div[4]/div/table/tbody/tr[5]/td[3]/button"))
				.isEnabled();
		// StartBtn.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", StartBtn);
		
		JavascriptExecutor jt = (JavascriptExecutor) driver;
		jt.executeScript("arguments[0].click();", StartBtn1);
		// StartBtn1.click();

	}

	public void DeleteSessionTemplets() throws InterruptedException {

		Thread.sleep(4000);
		JavascriptExecutor ju = (JavascriptExecutor) driver;
		ju.executeScript("arguments[0].click();", ManageBtn);
		// ManageBtn.click();
		JavascriptExecutor jv = (JavascriptExecutor) driver;
		jv.executeScript("arguments[0].click();", StopBtn);
		// StopBtn.click();
		Thread.sleep(3000);;
		JavascriptExecutor jw = (JavascriptExecutor) driver;
		jw.executeScript("arguments[0].click();", DeleteBtn);
		// DeleteBtn.click();
		JavascriptExecutor jx = (JavascriptExecutor) driver;
		jx.executeScript("arguments[0].click();", CnfrmDeleteBtn);
		// CnfrmDeleteBtn.click();
		Thread.sleep(2000);
		JavascriptExecutor jy = (JavascriptExecutor) driver;
		jy.executeScript("arguments[0].click();", SessionTemplates);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//div//table//tbody//tr[3]//td[2]//button[contains(text(),'Delete')]")).click();
		driver.findElement(By.xpath("//button[contains(text(),'Yes')]")).click();

	}

	public void SessionLogout() throws InterruptedException {

		// SessionLogOut:==>
		Thread.sleep(3000);
		JavascriptExecutor jj = (JavascriptExecutor) driver;
		jj.executeScript("arguments[0].click();", LogOutBtn);

	}

}

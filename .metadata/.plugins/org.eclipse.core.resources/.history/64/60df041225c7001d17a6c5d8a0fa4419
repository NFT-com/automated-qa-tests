package com.b1.qa.pages;


import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.b1.qa.util.TestUtility;
import com.nft.qa.base.TestBase;

public class ReviewPage_TestRail extends TestBase {

	TestUtility testUtil = new TestUtility();
	HomePage homePage = new HomePage();
	JavascriptExecutor js1 = (JavascriptExecutor) driver;
	WebDriverWait wait = new WebDriverWait(driver, 50);
	 
	@FindBy(xpath = "//i[contains(text(),'language')]")
	WebElement context;
	
	@FindBy(xpath = "//i[starts-with(@class,'location-group-icon  sc-')]")
	WebElement Single_context;

	@FindBy(xpath = "//input[contains(@placeholder,'Select Accounts')]")
	WebElement selectAccounts;

	@FindBy(xpath = "//div[contains(text(),'Cheesecake Factory')]")
	WebElement cheesecake;
	
	@FindBy(xpath = "//span[contains(text(),'Jack Belk')]")
	WebElement SingleLocation;
	
	@FindBy(xpath = "//div[starts-with(@class,'cs-alllocations sc-')]//div[contains(text(),'All Locations')]")
	WebElement AllLocation;
	
	@FindBy(xpath = "//i[contains(text(),'reply')]")
	WebElement RespondBtn;

	@FindBy(xpath = "//span[contains(text(),'Response Required')]")
	WebElement Selected_Response_Required;

	@FindBy(xpath = "//span[contains(text(),'Responded Reviews')]")
	WebElement Selected_Responded_Reviews;

	@FindBy(xpath = "//span[contains(text(),'Flagged Reviews')]")
	WebElement Selected_Flagged_Reviews;

	@FindBy(xpath = "//span[contains(text(),'All Reviews')]")
	WebElement Selected_All_Reviews;

	@FindBy(xpath = "/descendant::div[contains(text(),'Response Required')][1]")
	WebElement Select_Response_Required;

	@FindBy(xpath = "/descendant::div[contains(text(),'Responded Reviews')][1]")
	WebElement Select_Responded_Reviews;

	@FindBy(xpath = "/descendant::div[contains(text(),'Flagged Reviews')][1]")
	WebElement Select_Flagged_Reviews;

	@FindBy(xpath = "/descendant::div[contains(text(),'All Reviews')][1]")
	WebElement Select_All_Reviews;

	@FindBy(xpath = "//a[contains(@class,'cancel cancel-response sc-')]//i[contains(text(),'close')]")
	WebElement RespondTile_CloseBtn;

	@FindBy(xpath = "//a[@id='fltrOptPosting Date']")
	WebElement Posting_Date;

	@FindBy(xpath = "//a[@id='fltrOptReview Status']")
	WebElement Review_status;

	@FindBy(xpath = "//a[@id='fltrOptReview Text']")
	WebElement Review_Text;

	@FindBy(xpath = "//a[@id='fltrOptPublisher']")
	WebElement Publisher;

	@FindBy(xpath = "//a[starts-with(@class,'bqltoggle sc-')]")
	WebElement Ratings;

	@FindBy(xpath = "//a[@id='filterAdd']")
	WebElement Add_Filter;

	@FindBy(xpath = "//a[contains(text(),'All Time')]")
	WebElement PostingDate_AllTime;

	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][1]")
	WebElement PostingDate_ApplyBtn;

	@FindBy(xpath = "//a[@id='fltrOptPublisher']")
	WebElement Publishers;

	@FindBy(xpath = "//li[@id='Publisher']//a[contains(text(),'Select All')]")
	WebElement Publisher_SelectAll;

	@FindBy(xpath = "//li[@id='Publisher']//a[contains(text(),'Clear All')]")
	WebElement Publisher_ClearAll;

	@FindBy(xpath = "//input[@id='Google']")
	WebElement Publisher_Google;

	@FindBy(xpath = "//input[@id='Facebook']")
	WebElement Publisher_Facebook;

	@FindBy(xpath = "//input[@id='Yelp']")
	WebElement Publisher_Yelp;

	@FindBy(xpath = "//input[@id='TripAdvisor']")
	WebElement Publisher_Tripadvisor;

	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][4]")
	WebElement Publisher_ApplyBtn;

	@FindBy(xpath = "/descendant::div[starts-with(@class,'flag-review sc-')][1]")
	WebElement Flag_Icon;

	@FindBy(xpath = "//a[(@class='header-link')]")
	WebElement Store_number;

	@FindBy(xpath = "//span[contains(text(),'Newest')]")
	WebElement Selected_Sort_Filter_Newest;

	@FindBy(xpath = "//span[contains(text(),'Oldest')]")
	WebElement Selected_Sort_Filter_Oldest;

	@FindBy(xpath = "//div[contains(text(),'Oldest')]")
	WebElement Select_Sort_Filter_Oldest;

	@FindBy(xpath = "//span[contains(text(),'Location')]")
	WebElement Selected_Sort_Filter_Locations;

	@FindBy(xpath = "//div[starts-with(@class,'dropdownItemContainer sc-')]//div[contains(text(),'Location')]")
	WebElement Select_Sort_Filter_Locations;

	@FindBy(xpath = "//div[contains(text(),'Newest')]")
	WebElement Select_Sort_Filter_Newest;

	@FindBy(xpath = "/descendant::div[starts-with(@class,'username-wrapper sc-')][1]/span")
	WebElement FirstTile_Name;

	@FindBy(xpath = "/descendant::input[(@placeholder='Add Tag')][1]")
	WebElement AddTag;

	@FindBy(xpath = "//select[@id='adtlFiltOpts']")
	WebElement SelectFilter;
	
	@FindBy(xpath = "//option[contains(text(),'Modified Review')]")
	WebElement SelectFilter_ModifiedReviews;
	
	@FindBy(xpath = "//a[@id='adtlOptApplyBtn']")
	WebElement SelectFilter_ModifiedFilter_ApplyBtn;
	
	@FindBy(xpath = "//input[@id='availableUnmodified']")
	WebElement SelectFilter_UnModified_CheckBox;
		
	@FindBy(xpath = "//option[contains(text(),'Private Response')]")
	WebElement SelectFilter_PrivateResponse;
	
	@FindBy(xpath = "/descendant::div[starts-with(@class,'text-max sc-')][2]//input[@id='fltrTxtInput']")
	WebElement SelectFilter_PrivateResponse_TextField;
	
	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][6]")
	WebElement SelectFilter_PrivateResponse_TextField_ApplyBtn;
	
	@FindBy(xpath = "//a[@id='adtlOptApplyBtn']")
	WebElement SelectFilter_PrivateResponse_ApplyBtn;
	
	@FindBy(xpath = "//option[contains(text(),'Public Response')]")
	WebElement SelectFilter_PublicResponse;
	
	@FindBy(xpath = "/descendant::div[starts-with(@class,'text-max sc-')][2]//input[@id='fltrTxtInput']")
	WebElement SelectFilter_PublicResponse_TextField;
	
	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][6]")
	WebElement SelectFilter_PublicResponse_TextField_ApplyBtn;
	
	@FindBy(xpath = "//a[@id='adtlOptApplyBtn']")
	WebElement SelectFilter_PublicResponse_ApplyBtn;

	@FindBy(xpath = "//option[contains(text(),'Tags')]")
	WebElement SelectFilter_tag;

	@FindBy(xpath = "//input[@id='adtlOptTxt']")
	WebElement SelectFilter_tag_TextField;

	@FindBy(xpath = "//a[@id='adtlOptApplyBtn']")
	WebElement SelectFilter_tag_ApplyBtn;

	@FindBy(xpath = "//option[contains(text(),'Author')]")
	WebElement SelectFilter_Author;

	@FindBy(xpath = "//input[@id='adtlOptTxt']")
	WebElement SelectFilter_Author_TextField;

	@FindBy(xpath = "//a[@id='adtlOptApplyBtn']")
	WebElement SelectFilter_Author_ApplyBtn;

	@FindBy(xpath = "//a[@id='moreFiltOpt']")
	WebElement SelectFilter_3DotMenu;

	@FindBy(xpath = "//a[@id='rstFiltOpt']")
	WebElement ResetFilter_3DotMenu;

	@FindBy(xpath = "//a[@id='saveFiltOpt']")
	WebElement SaveAsNewFilter_3DotMenu;

	@FindBy(xpath = "//a[@id='exportFiltOpt']")
	WebElement ExportReviewData_3DotMenu;

	@FindBy(xpath = "//a[starts-with(@class,'filter-toggle sc-')]")
	WebElement ToggleIcon;

	@FindBy(xpath = "//a[@id='fltrOptReview Status']")
	WebElement ReviewStatus;

	@FindBy(xpath = "//input[@id='New']")
	WebElement ReviewStatus_New;

	@FindBy(xpath = "//input[@id='Queued']")
	WebElement ReviewStatus_Queued;

	@FindBy(xpath = "//input[@id='Failed']")
	WebElement ReviewStatus_Failed;

	@FindBy(xpath = "//input[@id='Done']")
	WebElement ReviewStatus_Done;

	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][3]")
	WebElement ReviewStatus_ApplyBtn;
	
	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][3]")
	WebElement AllReviews_ReviewStatus_ApplyBtn;
	
	@FindBy(xpath = "//a[@id='fltrOptPublic Response']")
	WebElement BQL_PublicResponse;
	
	@FindBy(xpath = "/descendant::a[starts-with(@class,'dropdownwrapperactioncenter sc-')][6]")
	WebElement BQL_PublicResponse_RemoveFilter;
	
	@FindBy(xpath = "//a[@id='fltrOptPrivate Response']")
	WebElement BQL_PrivateResponse;
	
	@FindBy(xpath = "/descendant::a[starts-with(@class,'dropdownwrapperactioncenter sc-')][6]")
	WebElement BQL_PrivateResponse_RemoveFilter;
	
	@FindBy(xpath = "/descendant::div[starts-with(@class,'show-more-options sc-')][1]")
	WebElement RespondedReview_3DotMenuOption;
	
	@FindBy(xpath = "/descendant::div[contains(text(),'Review History')][1]")
	WebElement RespondedReview_3Dot_ReviewHistory;
	
	@FindBy(xpath = "//a[starts-with(@class,'bqltoggle sc-')]")
	WebElement BQL_Ratings;
	
	@FindBy(xpath = "//input[@id='star5']")
	WebElement BQL_5Ratings;
	
	@FindBy(xpath = "//input[@id='star4']")
	WebElement BQL_4Ratings;
	
	@FindBy(xpath = "//input[@id='star3']")
	WebElement BQL_3Ratings;
	
	@FindBy(xpath = "//input[@id='star2']")
	WebElement BQL_2Ratings;
	
	@FindBy(xpath = "//input[@id='star1']")
	WebElement BQL_1Ratings;
	
	@FindBy(xpath = "/descendant::a[contains(text(),'Apply')][5]")
	WebElement BQL_Ratings_ApplyBtn;
	
	@FindBy(xpath = "//a[@id='moreFiltOpt']")
	WebElement BQL_3DotMenu;
	
	@FindBy(xpath = "//a[@id='rstFiltOpt']")
	WebElement BQL_3DotMenu_ResetFilter;
	
	@FindBy(xpath = "//a[starts-with(@class,'bqltoggle sc-')]//span[@class='material-icons star active']")
	WebElement BQL_SelectedStars;
	
	@FindBy(xpath = "//span[contains(text(),'Modified by Original Author')]")
	WebElement Unmodified_Name;
	

	public ReviewPage_TestRail() {
		PageFactory.initElements(driver, this);
	}

	public void selectCheesecake() throws Exception {
		Thread.sleep(5000);
		homePage.clickOnContextAndSelectCheesecake();
		String LocationName = driver.findElement(By.xpath("//div[contains(text(),'Cheesecake Factory')]")).getText();
		System.out.println("Location Name : " + LocationName);
		System.out.println("***Location is Selected successfully***");

		Thread.sleep(5000);
		
		WebElement Reviews = driver.findElement(By.xpath("//div[contains(text(),'REVIEWS')]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(Reviews);
		actions.click().build().perform();
		Thread.sleep(2000);

		// JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement ReviewFeeds = driver.findElement(By.xpath("//div[starts-with(@class,'dropdownItemContainer sc-')]//div[contains(text(),'Reviews Feed')]"));
		// js.executeScript("arguments[0].click();", ReviewFeeds);
		TestUtility.clickOn(driver, ReviewFeeds, 10);

		Thread.sleep(5000);
		System.out.println("***User is Redirected to Reviews Page Successfully***");
	}

	public void C329_VerifyRespondButtonisDisplayedforResponseRequiredReviews() throws InterruptedException {

		Assert.assertTrue(RespondBtn.isDisplayed());
		System.out.println("***Respond Button is Displayed***");
	}

	public void C330_VerifyRespondButtonisClickableornotforResponseRequiredReviews() throws InterruptedException {

		WebDriverWait wait = new WebDriverWait(driver, 5);
		WebElement RespondBtn = driver.findElement(By.xpath("/descendant::i[contains(text(),'reply')][1]"));
		wait.until(ExpectedConditions.elementToBeClickable(RespondBtn));
		Thread.sleep(1500);
		RespondBtn.click();
		System.out.println("***Respond Button is Clickable***");
	}

	public void C331_RespondtileShouldexpandforresponserequiredreviewsafterclickingonrespondbutton()
			throws InterruptedException {

		WebElement Expanded_RespondTile = driver.findElement(By.xpath("//div[starts-with(@class,'response-main-container sc-')]"));
		Assert.assertTrue(Expanded_RespondTile.isDisplayed());
		Thread.sleep(1500);
		RespondTile_CloseBtn.click();
		System.out.println("***Respond Tile is Expanded successfully***");
	}

	public void C332_Verify_ReviewStatus_isDisplayed() throws InterruptedException {

		WebElement Review_Status = driver.findElement(By.xpath("//div[starts-with(@class,'status-container sc-')]"));
		Assert.assertTrue(Review_Status.isDisplayed());
		Thread.sleep(1500);
		System.out.println("***Review Status is Displayed successfully***");
	}

	public void C333_Verify_ReviewStatus_isClickable() {

		WebElement Review_Status_Body = driver
				.findElement(By.xpath("/descendant::a[starts-with(@class,'status-button sc-bSbAYC iuqwyq sc-')][1]"));
		Review_Status_Body.isDisplayed();
	}

	public void C336_Verify_PresetFilter() throws InterruptedException {

		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1500);
		Assert.assertTrue(Select_Response_Required.isDisplayed());
		Assert.assertTrue(Select_Flagged_Reviews.isDisplayed());
		Assert.assertTrue(Select_Responded_Reviews.isDisplayed());
		Assert.assertTrue(Select_All_Reviews.isDisplayed());

		System.out.println("***All Filters are Displyed at top right corner of the page***");
	}

	public void C337_Verify_PresetFilter_isclickable() {
		WebDriverWait wait = new WebDriverWait(driver, 5);
		wait.until(ExpectedConditions.elementToBeClickable(Select_Response_Required));
		wait.until(ExpectedConditions.elementToBeClickable(Select_Flagged_Reviews));
		wait.until(ExpectedConditions.elementToBeClickable(Select_Responded_Reviews));
		wait.until(ExpectedConditions.elementToBeClickable(Select_All_Reviews));

		System.out.println("***All Elements are present in preset filter is Clickable***");
	}

	public void C338_Verifythe_FlaggedReviewfilterfrompresetfilterisclickable() throws InterruptedException {

		Select_Flagged_Reviews.click();
		Thread.sleep(3500);
		Assert.assertTrue(Selected_Flagged_Reviews.isDisplayed());

		System.out.println("***Response required filter is changed to Flagged Review filter***");
	}

	public void C339_Verifyall_Flaggedreviews_areDisplayed() throws InterruptedException {
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(3500);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		WebElement TextField = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		String colorCode = TextField.getCssValue("color");
		System.out.println("Color code in RGBA" + colorCode);
		String expectedColorCodeInRGB = "rgba(255, 23, 68, 1)";
		Assert.assertEquals(colorCode, expectedColorCodeInRGB);

		System.out.println("***Flagged Review is Verified successfully***");
	}

	public void C340_Verifythe_ResponseRequired_filterfrompresetfilterisclickable() throws InterruptedException {

		TestUtility.clickOn(driver, Selected_Flagged_Reviews, 10);
		Thread.sleep(1500);
		TestUtility.clickOn(driver, Select_Response_Required, 10);
		Thread.sleep(3500);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Assert.assertTrue(Selected_Response_Required.isDisplayed());

		System.out.println("***Flagged Review filter is changed to Response required filter***");
	}

	public void C341_Verifyall_ResponseRequired_reviewsareDisplayed() {

		Assert.assertTrue(driver.findElement(By.xpath("//div[starts-with(@class,'tile-container provider-')]//i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')]")).isDisplayed());

		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][1]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][2]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][3]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][4]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][5]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][6]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][7]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][8]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][9]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[starts-with(@class,'material-icons  sc-')][contains(text(),'reply')][10]")).isDisplayed());

		System.out.println("***Response required Reviews are Displayed with respond Button***");
	}

	public void C342_Verifythe_RespondedReview_filterfrompresetfilterisclickable() throws InterruptedException {

		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1500);
		TestUtility.clickOn(driver, Select_Responded_Reviews, 10);
		Thread.sleep(3500);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Assert.assertTrue(Selected_Responded_Reviews.isDisplayed());

		System.out.println("***Response Required filter is changed to Responded Review filter***");

	}

	public void C343_Verifyall_RespondedReview_areDisplayed() {

		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][1]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][2]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][3]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][4]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][5]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][6]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][7]")).isDisplayed());
		/*Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][8]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][9]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'responded-text sc-')][10]")).isDisplayed());*/

		System.out.println("***Responded Reviews are Displayed in All Review Tile***");

	}

	public void C344_Verifythe_AllReviews_filterpresentinpresetfilterisclickable() throws InterruptedException {
		TestUtility.clickOn(driver, Selected_Responded_Reviews, 10);
		Thread.sleep(1500);
		TestUtility.clickOn(driver, Select_All_Reviews, 10);
		Thread.sleep(3500);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Assert.assertTrue(Selected_All_Reviews.isDisplayed());

		System.out.println("***Responded Review filter is changed to All Reviews filter***");
	}

	public void C345_Verifythe_Count_paginationonDefault() {

		String Count = driver.findElement(By.xpath("//span[starts-with(@class,'sc-')][contains(text(),'10')]"))
				.getText();
		System.out.println("Default Selected count is :=>" + Count);
		Assert.assertEquals(Count, "10");

		System.out.println("***All Reviews Shows Default count is '10'***");
	}

	public void C346_Verify_sortingwithSelectedoption() throws InterruptedException {

		TestUtility.clickOn(driver, Selected_Sort_Filter_Newest, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Sort_Filter_Oldest, 10);
		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		String Oldest_Date = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'date-wrapper sc-')][1]"))
				.getText();
		System.out.println("Oldest Reviewed date is :=>" + Oldest_Date);
		Assert.assertEquals(Oldest_Date, "05/15/2002 12:30 PM IST");

		System.out.println("***Oldest Date is verified successfully***");

		TestUtility.clickOn(driver, Selected_Sort_Filter_Oldest, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Sort_Filter_Locations, 10);
		Thread.sleep(5000);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		String First_StoreNumber = driver.findElement(By.xpath("/descendant::a[(@class='header-link')][1]")).getText();
		System.out.println("First Displayed Store Number is :=>" + First_StoreNumber);
		// Assert.assertEquals(First_StoreNumber, "#SJPLA525FDRASJP");
		Assert.assertTrue(First_StoreNumber.contains("#SJPLA525FDRASJP"));

		TestUtility.clickOn(driver, Selected_Sort_Filter_Locations, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Sort_Filter_Newest, 10);
		Thread.sleep(5000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		Thread.sleep(4000);
	}

	public void C347_Verify_Flag_icon() throws InterruptedException {
		Thread.sleep(3000);
		TestUtility.clickOn(driver, Selected_All_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Response_Required, 10);
		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][2]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][3]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][4]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][5]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][6]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][7]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][8]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][9]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][10]")).isDisplayed());

		System.out.println("***Flag Icon is Displayed on Each Review Tile***");

	}

	public void C348_Verify_Flag_Functionalitywith_ResponseRequired() throws InterruptedException {

		WebElement ResponseRequired_FirstTile_Name = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]/span"));
		ResponseRequired_FirstTile_Name.getText();
		System.out.println("First Review Tile Name : = > " + ResponseRequired_FirstTile_Name);

		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		WebElement FirstTile_FlagICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagICon);

		Thread.sleep(2000);
		Assert.assertFalse(ResponseRequired_FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is wiped out successfully****");

		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Flagged_Reviews, 10);
		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		WebElement FlaggedReview_FirstTile_Name = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]/span"));
		FlaggedReview_FirstTile_Name.getText();
		Assert.assertTrue(FlaggedReview_FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is Displayed Under Flagged review filter successfully****");
		WebElement FirstTile_FlagedICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagedICon);
		Thread.sleep(1000);
		System.out.println("****Flagged Review Tile is set to default****");
	}

	public void C349_Verify_Flag_Functionalitywith_RespondedReview() throws InterruptedException {
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		TestUtility.clickOn(driver, Selected_Flagged_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Responded_Reviews, 10);
		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 50);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		Thread.sleep(2500);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_Author.click();
		Thread.sleep(1000);
		SelectFilter_Author_TextField.sendKeys("Megan B.");
		Thread.sleep(2000);
		SelectFilter_Author_ApplyBtn.click();
		Thread.sleep(5000);

		WebElement FirstTile_Name = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]"));
		FirstTile_Name.getText();
		System.out.println("First Review Tile Name : = > " + FirstTile_Name);

		WebElement FirstTile_FlagICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagICon);

		Thread.sleep(2000);
		Assert.assertFalse(FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is wiped out successfully****");

		TestUtility.clickOn(driver, Selected_Responded_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Flagged_Reviews, 10);
		Thread.sleep(5000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		Thread.sleep(2500);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_Author.click();
		Thread.sleep(1000);
		SelectFilter_Author_TextField.sendKeys("Megan B.");
		Thread.sleep(2000);
		SelectFilter_Author_ApplyBtn.click();
		Thread.sleep(5000);

		js1.executeScript("arguments[0].click();", ReviewStatus);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", ReviewStatus_Done);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", ReviewStatus_ApplyBtn);
		Thread.sleep(1000);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		System.out.println("****Flagged Review Tile is Displayed Under Flagged review filter successfully****");
		WebElement FirstTile_FlagedICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagedICon);
		Thread.sleep(2000);
		Assert.assertFalse(FirstTile_FlagedICon.isDisplayed());
		System.out.println("****Flagged Review Tile is set to default****");

	}

	public void C350_Verify_Flag_Functionalitywith_AllReview() throws InterruptedException {

		TestUtility.clickOn(driver, Selected_Flagged_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_All_Reviews, 10);
		Thread.sleep(5000);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_Author.click();
		Thread.sleep(1000);
		SelectFilter_Author_TextField.sendKeys("Megan B.");
		Thread.sleep(2000);
		SelectFilter_Author_ApplyBtn.click();
		Thread.sleep(5000);

		WebElement FirstTile_Name = driver
				.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]"));
		FirstTile_Name.getText();
		System.out.println("First Review Tile Name : = > " + FirstTile_Name);

		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		WebElement FirstTile_FlagICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagICon);

		Thread.sleep(2000);
		Assert.assertTrue(FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is not wiped out from page****");

		WebElement FirstTile_FlagedICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagedICon);
		Thread.sleep(1000);
		System.out.println("****Flagged Review Tile is set to default****");

	}

	public void C352_Verify_UnFlag_functionalityin_flaggedReviews() {
		System.out.println("***** => Covered in Above Testcases(i.e. C348,C349,C350 ) <= *****");
	}

	public void C353_Verify_AddTag_functionalitytoreviewtile() throws InterruptedException {
		Thread.sleep(2000);
		TestUtility.clickOn(driver, Selected_All_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Response_Required, 10);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		AddTag.sendKeys("Automation");
		AddTag.sendKeys(Keys.ENTER);
		String Entered_Tag = driver.findElement(By.xpath("//span[contains(text(),'Automation')]")).getText();
		System.out.println("Tag Entered => " + Entered_Tag);
		Assert.assertEquals(Entered_Tag, "Automation");
		System.out.println("*** Tag Is added and Verified successfully ***");
		Thread.sleep(2000);

	}

	public void C354_VerifyRemovetagaddedtothereviewtile() throws InterruptedException {

		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_tag.click();
		Thread.sleep(1000);
		SelectFilter_tag_TextField.sendKeys("automation");
		Thread.sleep(2000);
		SelectFilter_tag_ApplyBtn.click();
		Thread.sleep(2500);

		WebElement Tag = driver.findElement(By.xpath("//span[contains(text(),'Automation')]"));
		Assert.assertTrue(Tag.isDisplayed());
		System.out.println("Searched Tag is Verified Successfully");

		WebElement TagName = driver.findElement(By.xpath("//span[contains(text(),'Automation')]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(TagName).perform();
		Thread.sleep(1000);
		driver.findElement(By.xpath("/descendant::i[contains(text(),'close')][3]")).click();
		Thread.sleep(2000);

		System.out.println("**** Tag is Removed Successfully ****");
		driver.findElement(By.xpath("//a[@id='fltrOptTags']")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("/descendant::a[contains(text(),' Remove this filter')][6]")).click();
		Thread.sleep(2000);
	}

	public void C364_Selectedcustomfilterdisappearswhenotherfilterisdeleted() throws InterruptedException {

		Thread.sleep(1000);
		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Responded_Reviews, 10);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		String PostingDate = driver.findElement(By.xpath("//a[@id='fltrOptPosting Date']")).getText();
		String ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']")).getText();
		String ReviewText = driver.findElement(By.xpath("//a[@id='fltrOptReview Text']")).getText();
		String Publisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']")).getText();
		String Rating = driver.findElement(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]")).getText();
		String AddFilter = driver.findElement(By.xpath("//a[@id='filterAdd']")).getText();

		SelectFilter_3DotMenu.click();
		Thread.sleep(1000);
		SaveAsNewFilter_3DotMenu.click();
		Thread.sleep(1000);

		WebElement CreateFilterName_TextField = driver.findElement(By.xpath("//input[@placeholder='Filter Name']"));
		CreateFilterName_TextField.sendKeys("123");
		Thread.sleep(1000);
		WebElement SaveNewFilter_SaveBtn = driver.findElement(By.xpath("//span[contains(text(),'Submit')]"));
		SaveNewFilter_SaveBtn.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")));
		Assert.assertTrue(driver.findElement(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")).isDisplayed());
		System.out.println("*** First Created Custom Filter is Displayed***");

		SelectFilter_3DotMenu.click();
		Thread.sleep(1000);
		SaveAsNewFilter_3DotMenu.click();
		Thread.sleep(1000);

		WebElement Create_Another_FilterName_TextField = driver.findElement(By.xpath("//input[@placeholder='Filter Name']"));
		Create_Another_FilterName_TextField.sendKeys("321");
		Thread.sleep(1000);
		WebElement SaveFilter_SaveBtn = driver.findElement(By.xpath("//span[contains(text(),'Submit')]"));
		SaveFilter_SaveBtn.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")));
		Assert.assertTrue(driver.findElement(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")).isDisplayed());
		System.out.println("*** Second Created Custom Filter is Displayed***");

		ToggleIcon.click();

		WebElement FirstCreatedFilter = driver.findElement(By.xpath("//h5[contains(text(),'123')]"));
		Assert.assertTrue(FirstCreatedFilter.isDisplayed());

		WebElement SecondCReatedFilter = driver.findElement(By.xpath("//h5[contains(text(),'321')]"));
		Assert.assertTrue(SecondCReatedFilter.isDisplayed());

		WebElement FirstCreatedFilter_DeleteBtn = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'savedfilterright sc-')][1]//i[contains(text(),'close')]"));
		Assert.assertTrue(FirstCreatedFilter_DeleteBtn.isDisplayed());
		WebElement SecondCReatedFilter_DeleteBtn = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'savedfilterright sc-')][2]//i[contains(text(),'close')]"));
		Assert.assertTrue(SecondCReatedFilter_DeleteBtn.isDisplayed());
		FirstCreatedFilter_DeleteBtn.click();
		Thread.sleep(2500);
		ToggleIcon.click();
		FirstCreatedFilter_DeleteBtn.click();
		Thread.sleep(2500);

		String ContextPostingDate = driver.findElement(By.xpath("//a[@id='fltrOptPosting Date']")).getText();
		Assert.assertEquals(PostingDate, ContextPostingDate);

		String ContextReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']")).getText();
		Assert.assertEquals(ReviewStatus, ContextReviewStatus);

		String ContextReviewText = driver.findElement(By.xpath("//a[@id='fltrOptReview Text']")).getText();
		Assert.assertEquals(ReviewText, ContextReviewText);

		String ContextPublisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']")).getText();
		Assert.assertEquals(Publisher, ContextPublisher);

		String ContextRating = driver.findElement(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]")).getText();
		Assert.assertEquals(Rating, ContextRating);

		String ContextAddFilter = driver.findElement(By.xpath("//a[@id='filterAdd']")).getText();
		Assert.assertEquals(AddFilter, ContextAddFilter);

		System.out.println("Delete the created filter shouldn't affected the custom filter");
		driver.navigate().refresh();
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
	}
	
	public void C372_ReviewTileStatusElementtodisplay_Queued_reviewstatus() throws InterruptedException {
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_All_Reviews, 10);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus_New);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", ReviewStatus_Failed);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", ReviewStatus_Done);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", AllReviews_ReviewStatus_ApplyBtn);
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		

		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][1]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][2]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][3]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][4]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][5]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][6]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][7]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][8]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][9]//span[contains(text(),'Queued')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][10]//span[contains(text(),'Queued')]")).isDisplayed());
		
		
	}
	
	
	public void C373_ReviewTileStatusElementtodisplay_Failed_reviewstatus () throws InterruptedException {
		
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus_Queued);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", ReviewStatus_Failed);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", AllReviews_ReviewStatus_ApplyBtn);
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		WebElement Failed = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')]//span[contains(text(),'Failed')]"));
		Assert.assertTrue(Failed.isDisplayed());
	
	}
	
	public void C376_ResponseTextFiltersNon_Functional () throws InterruptedException {
		
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", ReviewStatus_Failed);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", AllReviews_ReviewStatus_ApplyBtn);
		Thread.sleep(1000);
		System.out.println("review status is set to default");
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", Add_Filter);
		Thread.sleep(1500);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_PublicResponse.click();
		Thread.sleep(1000);
		SelectFilter_PublicResponse_ApplyBtn.click();
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", Add_Filter);
		Thread.sleep(1500);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_PrivateResponse.click();
		Thread.sleep(1000);
		SelectFilter_PrivateResponse_ApplyBtn.click();
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		System.out.println("**Public and Private filter is Added successfully**");
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PublicResponse);
		Thread.sleep(1000);
		SelectFilter_PublicResponse_TextField.sendKeys("Test");
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", SelectFilter_PublicResponse_TextField_ApplyBtn);
		
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][1]//i[contains(text(),'language')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][2]//i[contains(text(),'language')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][3]//i[contains(text(),'language')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][4]//i[contains(text(),'language')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][5]//i[contains(text(),'language')]")).isDisplayed());
		//Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][6]//i[contains(text(),'language')]")).isDisplayed());
		//Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][7]//i[contains(text(),'language')]")).isDisplayed());
		//Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][8]//i[contains(text(),'language')]")).isDisplayed());
		//Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][9]//i[contains(text(),'language')]")).isDisplayed());
		//Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][10]//i[contains(text(),'language')]")).isDisplayed());
		
		System.out.println("***Public Response is Displayed successfully***");
		
		
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PublicResponse);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PublicResponse_RemoveFilter);
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		System.out.println("Public Filter is removed");
		
		

		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PrivateResponse);
		SelectFilter_PrivateResponse_TextField.sendKeys("we");
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", SelectFilter_PrivateResponse_TextField_ApplyBtn);
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][1]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][2]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][3]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][4]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][5]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][6]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][7]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][8]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][9]//i[contains(text(),'lock')]")).isDisplayed());
		Assert.assertTrue(driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][10]//i[contains(text(),'lock')]")).isDisplayed());
		
		System.out.println("***Private Response is Displayed successfully***");
		
		
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PrivateResponse);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", BQL_PrivateResponse_RemoveFilter);
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		System.out.println("Private Filter is removed");
		
	}
	
	public void C381_RespondedReviewHistoryDataisMissing () throws InterruptedException {
		Thread.sleep(3000);
		TestUtility.clickOn(driver, Selected_All_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Responded_Reviews, 10);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Thread.sleep(2500);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		
		
		
		RespondedReview_3DotMenuOption.click();
		Thread.sleep(1000);
		RespondedReview_3Dot_ReviewHistory.click();
		Thread.sleep(1000);

		/*WebElement RespondHistory = driver.findElement(By.xpath("//div[starts-with(@class,'history-box sc-')]"));
		Assert.assertTrue(RespondHistory.isDisplayed());*/
		if(driver.findElements(By.xpath("//div[starts-with(@class,'history-box sc-')]")).size() != 0){
			System.out.println("Review history is Displayed");
			Thread.sleep(3000);
			JavascriptExecutor js1 = (JavascriptExecutor) driver;
			WebElement CLOSE = driver.findElement(By.xpath("//a[contains(text(),'CLOSE')]"));
			js1.executeScript("arguments[0].click();", CLOSE);
			}
			else {
				System.out.println("Review History is not Available");
				JavascriptExecutor js1 = (JavascriptExecutor) driver;
				WebElement CLOSE = driver.findElement(By.xpath("//a[contains(text(),'CLOSE')]"));
				js1.executeScript("arguments[0].click();", CLOSE);
				Thread.sleep(2000);
				Assert.fail("Review History not available");
			}
		/*WebElement NoHistory = driver.findElement(By.xpath("//div[contains(text(),'No data')]"));
		Assert.assertTrue(NoHistory.isDisplayed());*/
		
		/*System.out.println("Responded History is Displayed");
		Thread.sleep(3000);
		driver.findElement(By.xpath("//a[contains(text(),'CLOSE')]")).click();*/
			
	}
	
	public void C379_incorrect_reviewcountsisgettingdisplayedwhen_Sorting_isdoneby_Location () throws InterruptedException {
		
		Thread.sleep(3000);
		TestUtility.clickOn(driver, Selected_Responded_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_All_Reviews, 10);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		TestUtility.clickOn(driver, Selected_Sort_Filter_Newest, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Sort_Filter_Locations, 10);
		Thread.sleep(7000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		String Review_Count = driver.findElement(By.xpath("/descendant::a[@class='view-review-link'][1]")).getText();
		System.out.println("Oldest Reviewed date is :=>" + Review_Count);
		Assert.assertTrue(Review_Count.contains("View all 0 reviews"));

		System.out.println("***Locations tab review is verified successfully***");

		TestUtility.clickOn(driver, Selected_Sort_Filter_Locations, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Sort_Filter_Newest, 10);
		Thread.sleep(7000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
			
	}
	
	public void C388_ResetFilterdefaultsnotworkingasexpected () throws InterruptedException {
		
		TestUtility.clickOn(driver, BQL_Ratings, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, BQL_4Ratings, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, BQL_Ratings_ApplyBtn, 10);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		List<WebElement> BQL_SelectedStars = driver.findElements(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]//span[@class='material-icons star active']"));
		System.out.println("Number of Selected Stars : > " + BQL_SelectedStars.size());
		Assert.assertEquals(4, BQL_SelectedStars.size());
		
		
		
		List<WebElement> First_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][1]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + First_tile.size());
		Assert.assertEquals(4, First_tile.size());
		
		List<WebElement> Second_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][2]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Second_tile.size());
		Assert.assertEquals(4, Second_tile.size());
		
		List<WebElement> Third_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][3]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Third_tile.size());
		Assert.assertEquals(4, Third_tile.size());
		
		List<WebElement> Fourth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][4]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Fourth_tile.size());
		Assert.assertEquals(4, Fourth_tile.size());
		
		List<WebElement> Fifth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][5]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Fifth_tile.size());
		Assert.assertEquals(4, Fifth_tile.size());
		
		List<WebElement> Sixth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][6]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Sixth_tile.size());
		Assert.assertEquals(4, Sixth_tile.size());
		
		List<WebElement> Seventh_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][7]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Seventh_tile.size());
		Assert.assertEquals(4, Seventh_tile.size());
		
		List<WebElement> Eighth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][8]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Eighth_tile.size());
		Assert.assertEquals(4, Eighth_tile.size());
		
		List<WebElement> Ninth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][9]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Ninth_tile.size());
		Assert.assertEquals(4, Ninth_tile.size());
		
		List<WebElement> Tenth_tile = driver.findElements(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][10]//i[@color='#EB6E00']"));
		System.out.println("Number of Selected Stars : > " + Tenth_tile.size());
		Assert.assertEquals(4, Tenth_tile.size());
		System.out.println("***All Review tiles are having 4 start ratings displayed successfully***");
		
		TestUtility.clickOn(driver, BQL_3DotMenu, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, BQL_3DotMenu_ResetFilter, 10);
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Assert.assertFalse(BQL_SelectedStars.isEmpty());
		
		System.out.println("*****Ratings filter are set to default using reset filter*****");
	}
	
	public void C393_Addconfirmdeletedialogforemailschedules () throws InterruptedException {
		Thread.sleep(6000);
		TestUtility.clickOn(driver, Selected_All_Reviews, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Responded_Reviews, 10);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		Thread.sleep(3000);
		WebElement Envolope = driver.findElement(By.xpath("//i[starts-with(@class,'material-icons  sc-')][contains(text(),'email')]"));
		Assert.assertTrue(Envolope.isDisplayed());
		//TestUtility.clickOn(driver, Envolope, 30);
		js1.executeScript("arguments[0].click();", Envolope);

		// Scheduled Email Check :::>>>>>>>>
		Thread.sleep(3000);
		WebElement First_ScheduledMail = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'ui-checkbox sc-')][1]"));
		//First_ScheduledMail.click();
		js1.executeScript("arguments[0].click();", First_ScheduledMail);
		Thread.sleep(1000);
		WebElement Second_ScheduledMail = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'ui-checkbox sc-')][2]"));
		//Second_ScheduledMail.click();
		js1.executeScript("arguments[0].click();", Second_ScheduledMail);
		Thread.sleep(1000);
		WebElement Third_ScheduledMail = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'ui-checkbox sc-')][3]"));
		//Third_ScheduledMail.click();
		js1.executeScript("arguments[0].click();", Third_ScheduledMail);
		Thread.sleep(1000);

		WebElement DeleteIcon = driver.findElement(By.xpath("//i[contains(text(),'delete')]"));
		js1.executeScript("arguments[0].click();", DeleteIcon);
		//TestUtility.clickOn(driver, DeleteIcon, 30);
		//DeleteIcon.click();

		Thread.sleep(1000);
		String ConfirmDelete = driver.findElement(By.xpath("//div[contains(text(),'Please Confirm Deletion')]")).getText();
		Assert.assertTrue(ConfirmDelete.contains("Please Confirm Deletion"));
		System.out.println("Pop-up Box for confirm delete Email is Displyed");

		WebElement Cancel = driver.findElement(By.xpath("//a[starts-with(@class,'confirm-popup-cancel sc-')][contains(text(),'Cancel')]"));
		Assert.assertTrue(Cancel.isDisplayed());

		WebElement Delete = driver.findElement(By.xpath("//a[starts-with(@class,'confirm confirm-popup-confirm sc-')][contains(text(),'Delete')]"));
		Assert.assertTrue(Delete.isDisplayed());
		
		System.out.println("***Confirmation to delete Scheduled Email is verified successfully***");

		driver.findElement(By.xpath("//a[starts-with(@class,'confirm-popup-cancel sc-')][contains(text(),'Cancel')]")).click();
		Thread.sleep(3000);
		driver.findElement(By.xpath("//a[contains(text(),'Close')]")).click();	
		
	}
	

	public void C395_DefaultFilterVisibility () throws InterruptedException {
		Thread.sleep(2400);
		driver.navigate().refresh();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));	
		Thread.sleep(3000);
		
		
		Thread.sleep(3000);
		WebElement PostingDate = driver.findElement(By.xpath("//a[@id='fltrOptPosting Date']"));
		Assert.assertTrue(PostingDate.isDisplayed());
		WebElement ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']"));
		Assert.assertTrue(ReviewStatus.isDisplayed());
		WebElement ReviewText = driver.findElement(By.xpath("//a[@id='fltrOptReview Text']"));
		Assert.assertTrue(ReviewText.isDisplayed());
		WebElement Publisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']"));
		Assert.assertTrue(Publisher.isDisplayed());
		WebElement Rating = driver.findElement(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]"));
		Assert.assertTrue(Rating.isDisplayed());
		WebElement AddFilter = driver.findElement(By.xpath("//a[@id='filterAdd']"));
		Assert.assertTrue(AddFilter.isDisplayed());
		
		System.out.println("***Default filters are verified successfully***");
	}
	
	public void C1106_Pre_populateShareReviewview () throws InterruptedException {
		Thread.sleep(1000);
		RespondedReview_3DotMenuOption.click();
		Thread.sleep(2000);
		String ShareReview = driver.findElement(By.xpath("//div[contains(text(),'Share Review')]")).getText();
		Assert.assertEquals(ShareReview, "Share Review");

		WebElement shareReview = driver.findElement(By.xpath("//div[contains(text(),'Share Review')]"));
		Assert.assertTrue(shareReview.isEnabled());

		driver.findElement(By.xpath("//div[contains(text(),'Share Review')]")).click();

		driver.findElement(By.xpath("//input[@placeholder='Enter an email address']")).sendKeys("sachin@where2getit.com");
		driver.findElement(By.xpath("//i[@id='submitbutton']")).click();

		driver.findElement(By.xpath("//textarea[contains(@placeholder,'Enter your message...')]")).sendKeys("Automation Review Test Option Check");

		String Cancel = driver.findElement(By.xpath("//a[contains(text(),'CANCEL')]")).getText();
		Assert.assertEquals(Cancel, "CANCEL");

		String Share1 = driver.findElement(By.xpath("//a[contains(text(),'SEND')]")).getText();
		Assert.assertEquals(Share1, "SEND");

		driver.findElement(By.xpath("//a[contains(text(),'SEND')]")).click();	
		System.out.println("***Review is shared with assigned Email successfully***");
	}
	
	public void C371_UnmodifiedReviewsVisibleDespiteFilter () throws InterruptedException {
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Thread.sleep(1000);
		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_ModifiedReviews.click();
		Thread.sleep(1000);
		SelectFilter_UnModified_CheckBox.click();
		Thread.sleep(1000);
		SelectFilter_ModifiedFilter_ApplyBtn.click();
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));	
		Thread.sleep(2000);
		
		Add_Filter.click();
		Thread.sleep(1000);
		SelectFilter.click();
		Thread.sleep(1000);
		SelectFilter_Author.click();
		Thread.sleep(1000);
		SelectFilter_Author_TextField.sendKeys("Joe");
		Thread.sleep(2000);
		SelectFilter_Author_ApplyBtn.click();
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));	
		Thread.sleep(2000);
		
		String Author = driver.findElement(By.xpath("/descendant::span[contains(text(),'Joe')][3]")).getText();
		//Assert.assertTrue(Author.isDisplayed());
		Assert.assertTrue(Author.contains("Joe"));
		
		Thread.sleep(2000);		
		//Assert.assertFalse(Unmodified_Name.isDisplayed());
		System.out.println("*** <> UnModified Review is Displayed Successfully <> ***");
		Thread.sleep(2000);
		
	}
	
	public void C1107_ShowPointofContactinReviewFeedtile () throws InterruptedException {
		Thread.sleep(1000);
		driver.navigate().refresh();
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		List<WebElement> NOContactAssigned = driver.findElements(By.xpath("//span[contains(text(),'No Contacts assigned')]"));
		System.out.println("Number of Selected Stars : > " + NOContactAssigned.size());
		Assert.assertEquals(10, NOContactAssigned.size());
		for (int i = 0; i < NOContactAssigned.size(); i++) {
			System.out.println("Available List is ==> : " + NOContactAssigned.get(i).getText());
		}
		
		System.out.println("No Contacts assigned is verified successfully");
	}
	
	public void C333_Verify_ReviewStatusisClickable () throws InterruptedException {
		WebDriverWait Status = new WebDriverWait(driver, 10);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		WebElement New = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'tile-container provider-')][1]//a[starts-with(@class,'status-button sc-')]"));
		Status.until(ExpectedConditions.elementToBeClickable(New));
	}
	
	public void C334_MarkReviewStatus_New_to_Done () throws InterruptedException {
		
		WebElement New = driver.findElement(By.xpath("/descendant::span[contains(text(),'New')][3]"));
		if (New.isDisplayed() && New.isEnabled()) {
			WebElement Text = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'date-wrapper sc-')][1]"));
			Text.getText();
			System.out.println(Text);
			New.click();
			//Assert.assertFalse(Text.isDisplayed());
			System.out.println("Review tile is wiped out successfully");

			Thread.sleep(2000);
			WebElement ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']"));
			ReviewStatus.click();

			Thread.sleep(1500);
			WebElement SelectAllStatus = driver.findElement(By.xpath("/descendant::a[contains(text(),'Select All')][1]"));
			js1.executeScript("arguments[0].click();", SelectAllStatus);

			Thread.sleep(2000);
			WebElement ClearAllStatus = driver.findElement(By.xpath("/descendant::a[contains(text(),'Clear All')][1]"));
			js1.executeScript("arguments[0].click();", ClearAllStatus);

			Thread.sleep(2000);
			WebElement DoneStatus = driver.findElement(By.xpath("//input[@id='Done']"));
			js1.executeScript("arguments[0].click();", DoneStatus);

			Thread.sleep(2000);
			WebElement Apply = driver.findElement(By.xpath("/descendant::a[contains(text(),'Apply')][2]"));
			js1.executeScript("arguments[0].click();", Apply);

			Thread.sleep(3000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
			String DoneText = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'date-wrapper sc-')][1]")).getText();
			System.out.println(DoneText);
			/*System.out.printf(Text, DoneText);*/
			System.out.println("Both Reviews Are Same");

			WebElement Done = driver.findElement(By.xpath("/descendant::span[contains(text(),'Done')][2]"));
			if (Done.isDisplayed() && Done.isEnabled()) {
				js1.executeScript("arguments[0].click();", Done);
			}

			Thread.sleep(2000);
			WebElement ReviewStatus1 = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']"));
			js1.executeScript("arguments[0].click();", ReviewStatus1);

			Thread.sleep(2000);
			WebElement SelectAllStatus1 = driver.findElement(By.xpath("/descendant::a[contains(text(),'Select All')][1]"));
			js1.executeScript("arguments[0].click();", SelectAllStatus1);

			Thread.sleep(2000);
			WebElement ClearAllStatus1 = driver.findElement(By.xpath("/descendant::a[contains(text(),'Clear All')][1]"));
			js1.executeScript("arguments[0].click();", ClearAllStatus1);

			Thread.sleep(2000);
			WebElement NewStatus = driver.findElement(By.xpath("//input[@id='New']"));
			js1.executeScript("arguments[0].click();", NewStatus);

			Thread.sleep(2000);
			js1.executeScript("arguments[0].click();", Apply);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		}
	}
	
	public void C335_VerifytheReviewstatuschangedfrom_New_to_Done_ornot () {
		System.out.println("*** <> C335 is covered in C334 <> ***");
	}
	
	public void C387_CustomFilterHiddenonContextSwitch () throws InterruptedException {
		Thread.sleep(1000);
		driver.navigate().refresh();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1000);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(2500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		TestUtility.clickOn(driver, BQL_Ratings, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, BQL_5Ratings, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, BQL_Ratings_ApplyBtn, 10);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		String PostingDate = driver.findElement(By.xpath("//a[@id='fltrOptPosting Date']")).getText();
		String ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']")).getText();
		String ReviewText = driver.findElement(By.xpath("//a[@id='fltrOptReview Text']")).getText();
		String Publisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']")).getText();
		String Rating = driver.findElement(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]")).getText();
		String AddFilter = driver.findElement(By.xpath("//a[@id='filterAdd']")).getText();

		SelectFilter_3DotMenu.click();
		Thread.sleep(1000);
		SaveAsNewFilter_3DotMenu.click();
		Thread.sleep(1000);

		WebElement CreateFilterName_TextField = driver.findElement(By.xpath("//input[@placeholder='Filter Name']"));
		CreateFilterName_TextField.sendKeys("123");
		Thread.sleep(1000);
		WebElement SaveNewFilter_SaveBtn = driver.findElement(By.xpath("//span[contains(text(),'Submit')]"));
		SaveNewFilter_SaveBtn.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")));
		Assert.assertTrue(driver.findElement(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")).isDisplayed());
		System.out.println("*** Custom Filter is Displayed***");

		
		ToggleIcon.click();

		WebElement FirstCreatedFilter = driver.findElement(By.xpath("//h5[contains(text(),'123')]"));
		Assert.assertTrue(FirstCreatedFilter.isDisplayed());
		FirstCreatedFilter.click();

		Thread.sleep(1500);
		System.out.println("Custom Filter is Selected");
		
		
		Thread.sleep(1500);
		context.click();
		Thread.sleep(1500);
		SingleLocation.click();
		Thread.sleep(3000);
		WebElement SingleSelectedLocation = driver.findElement(By.xpath("//div[contains(text(),'Cheesecake Factory - Jack Belk')]"));
		Assert.assertTrue(SingleSelectedLocation.isDisplayed());
		System.out.println("***Location is Successfully switched to single location***");
		Assert.assertTrue(driver.findElement(By.xpath("//div[starts-with(@class,'userfilterwrapper sc-')]")).isDisplayed());
		System.out.println("Custom created filter is same as on single location");
		
		
		Thread.sleep(2500);
		Single_context.click();
		Thread.sleep(1500);
		AllLocation.click();
		Thread.sleep(3000);
		WebElement AllSelectedLocation = driver.findElement(By.xpath("/descendant::div[contains(text(),'All Locations')][1]"));
		Assert.assertTrue(AllSelectedLocation.isDisplayed());
		System.out.println("***Location is Successfully switched to All location***");
		
		
		
		Thread.sleep(2500);
		ToggleIcon.click();
		Thread.sleep(2000);
		WebElement firstCreatedFilter_DeleteBtn = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'savedfilterright sc-')][1]//i[contains(text(),'close')]"));
		firstCreatedFilter_DeleteBtn.click();
		Thread.sleep(2500);

		String ContextPostingDate = driver.findElement(By.xpath("//a[@id='fltrOptPosting Date']")).getText();
		Assert.assertEquals(PostingDate, ContextPostingDate);

		String ContextReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']")).getText();
		Assert.assertEquals(ReviewStatus, ContextReviewStatus);

		String ContextReviewText = driver.findElement(By.xpath("//a[@id='fltrOptReview Text']")).getText();
		Assert.assertEquals(ReviewText, ContextReviewText);

		String ContextPublisher = driver.findElement(By.xpath("//a[@id='fltrOptPublisher']")).getText();
		Assert.assertEquals(Publisher, ContextPublisher);

		String ContextRating = driver.findElement(By.xpath("//a[starts-with(@class,'bqltoggle sc-')]")).getText();
		Assert.assertEquals(Rating, ContextRating);

		String ContextAddFilter = driver.findElement(By.xpath("//a[@id='filterAdd']")).getText();
		Assert.assertEquals(AddFilter, ContextAddFilter);

		System.out.println("Filter is still remains same");
		driver.navigate().refresh();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
	}
	
	public void C389_Settingflaggedreviewto_done_shouldremoveitfromthepane () throws InterruptedException {
		Thread.sleep(3000);
		homePage.clickOnContextAndSelectgeostix2();
		Thread.sleep(5000);
		/*wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		Thread.sleep(1500);*/
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(3500);
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		WebElement ResponseRequired_FirstTile_Name = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]/span"));
		ResponseRequired_FirstTile_Name.getText();
		System.out.println("First Review Tile Name : = > " + ResponseRequired_FirstTile_Name);

		WebElement FirstTile_FlagICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagICon);

		Thread.sleep(2000);
		Assert.assertFalse(ResponseRequired_FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is wiped out successfully****");

		TestUtility.clickOn(driver, Selected_Response_Required, 10);
		Thread.sleep(1000);
		TestUtility.clickOn(driver, Select_Flagged_Reviews, 10);
		Thread.sleep(6000);
		js1.executeScript("arguments[0].click();", Posting_Date);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_AllTime);
		Thread.sleep(1500);
		js1.executeScript("arguments[0].click();", PostingDate_ApplyBtn);
		Thread.sleep(3500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));

		WebElement FlaggedReview_FirstTile_Name = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'username-wrapper sc-')][1]/span"));
		FlaggedReview_FirstTile_Name.getText();
		Assert.assertTrue(FlaggedReview_FirstTile_Name.isDisplayed());

		System.out.println("****Flagged Review Tile is Displayed Under Flagged review filter successfully****");
		
		
		WebElement New = driver.findElement(By.xpath("/descendant::span[contains(text(),'New')][2]"));
		if (New.isDisplayed() && New.isEnabled()) {
			WebElement Text = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'date-wrapper sc-')][1]"));
			Text.getText();
			System.out.println(Text);
			New.click();
			//Assert.assertFalse(Text.isDisplayed());
			System.out.println("Review tile is wiped out successfully");

			Thread.sleep(2000);
			WebElement ReviewStatus = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']"));
			ReviewStatus.click();

			Thread.sleep(1000);
			WebElement SelectAllStatus = driver.findElement(By.xpath("/descendant::a[contains(text(),'Select All')][2]"));
			SelectAllStatus.click();

			Thread.sleep(1000);
			WebElement ClearAllStatus = driver.findElement(By.xpath("/descendant::a[contains(text(),'Clear All')][1]"));
			ClearAllStatus.click();

			Thread.sleep(1000);
			WebElement DoneStatus = driver.findElement(By.xpath("//input[@id='Done']"));
			DoneStatus.click();

			Thread.sleep(1000);
			WebElement Apply = driver.findElement(By.xpath("/descendant::a[contains(text(),'Apply')][3]"));
			Apply.click();

			Thread.sleep(3000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
			String DoneText = driver.findElement(By.xpath("/descendant::div[starts-with(@class,'date-wrapper sc-')][1]")).getText();
			System.out.println(DoneText);
			/*System.out.printf(Text, DoneText);*/
			System.out.println("Both Reviews Are Same");

			WebElement Done = driver.findElement(By.xpath("/descendant::span[contains(text(),'Done')][2]"));
			if (Done.isDisplayed() && Done.isEnabled()) {
				Done.click();
			}

			Thread.sleep(2000);
			WebElement ReviewStatus1 = driver.findElement(By.xpath("//a[@id='fltrOptReview Status']"));
			ReviewStatus1.click();

			Thread.sleep(1000);
			WebElement SelectAllStatus1 = driver.findElement(By.xpath("/descendant::a[contains(text(),'Select All')][2]"));
			SelectAllStatus1.click();

			Thread.sleep(1000);
			WebElement ClearAllStatus1 = driver.findElement(By.xpath("/descendant::a[contains(text(),'Clear All')][1]"));
			ClearAllStatus1.click();

			Thread.sleep(1000);
			WebElement NewStatus = driver.findElement(By.xpath("//input[@id='New']"));
			NewStatus.click();

			Thread.sleep(1000);
			WebElement apply = driver.findElement(By.xpath("/descendant::a[contains(text(),'Apply')][3]"));
			apply.click();
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[starts-with(@class,'tile-container provider-')]")));
		
		
		WebElement FirstTile_FlagedICon = driver.findElement(By.xpath("/descendant::i[contains(text(),'flag')][1]"));
		js1.executeScript("arguments[0].click();", FirstTile_FlagedICon);
		Thread.sleep(3000);
		System.out.println("****Flagged Review Tile is set to default****");
		}
	}
	
	
	
}

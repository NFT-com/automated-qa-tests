package com.b1.qa.pages;

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.HasInputDevices;
import org.openqa.selenium.interactions.Keyboard;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.nft.qa.base.IgniteTestBase;

public class IgniteUI extends IgniteTestBase {

	@FindBy(xpath = "//input[@id='loginid']")
	WebElement UserName;

	@FindBy(xpath = "//input[@id='password']")
	WebElement Password;

	@FindBy(xpath = "//div[@class='login-button']//input")
	WebElement LogIn;

	@FindBy(xpath = "//a[@id='where2getit']")
	WebElement Ignite;

	@FindBy(xpath = "//div[@class='OmnibarLogo']")
	WebElement BrandifyLogo;

	@FindBy(xpath = "//a[@id='ActiveTab']")
	WebElement LocationManager;

	@FindBy(xpath = "//span[contains(text(),'echo')]")
	WebElement DefaultLocation;

	@FindBy(xpath = "//button[@id='change_account']")
	WebElement ChangeAccount;

	@FindBy(xpath = "//li[@id='accounts_chzn_o_205']")
	WebElement GeostixAutomation;

	@FindBy(xpath = "//a[@id='logout-button']")
	WebElement LogOutBtn;

	@FindBy(xpath = "//input[@placeholder='Search by address, city and state, and/or postal code']")
	WebElement SearchByAdd;

	@FindBy(xpath = "//select[@id='search_country']")
	WebElement SelectCountry;

	@FindBy(xpath = "//select[@id='search_radius']")
	WebElement Radius;

	@FindBy(xpath = "//select[@id='radius_type']")
	WebElement RadiusType;

	@FindBy(xpath = "//input[@id='search_button']")
	WebElement SearchBtn;

	@FindBy(xpath = "//a[@id='advanced_search_button']")
	WebElement AdvncSearchBtn;

	@FindBy(xpath = "//a[@id='add_location_box']")
	WebElement AddLocation;

	@FindBy(xpath = "//img[@id='feedback-button']")
	WebElement FeedBackBtn;

	@FindBy(xpath = "//a[@class='Tooltip'][contains(text(),'Locations')]")
	WebElement Locations;

	@FindBy(xpath = "//a[contains(text(),'Files')]")
	WebElement Files;

	@FindBy(xpath = "//a[contains(text(),'Sites')]")
	WebElement Sites;

	@FindBy(xpath = "//li[@id='Configuration']//a[@id='NotActiveTab']")
	WebElement Sites_Config;

	@FindBy(xpath = "//a[contains(text(),'Configuration Admin')]")
	WebElement Sites_ConfigAdmin;

	@FindBy(xpath = "//a[contains(text(),'Coupons')]")
	WebElement Sites_Coupons;

	@FindBy(xpath = "//a[contains(text(),'Events')]")
	WebElement Sites_Events;

	@FindBy(xpath = "//a[contains(text(),'Locator Builder')]")
	WebElement Sites_LocatorBuilder;

	@FindBy(xpath = "//a[contains(text(),'Snapchat')]")
	WebElement Sites_Snapchat;

	@FindBy(xpath = "//a[contains(text(),'Claiming')]")
	WebElement Claiming;

	@FindBy(xpath = "//a[contains(text(),'On Demand')]")
	WebElement Claiming_OnDemand;

	@FindBy(xpath = "//a[contains(text(),'Scheduled')]")
	WebElement Claiming_Scheduled;

	@FindBy(xpath = "//li[@id='History']//a[@id='NotActiveTab']")
	WebElement Claiming_History;

	@FindBy(xpath = "//a[contains(text(),'Configuration')]")
	WebElement Claiming_Config;

	@FindBy(xpath = "//a[contains(text(),'Import Data')]")
	WebElement Claiming_ImportData;

	@FindBy(xpath = "//a[contains(text(),'Import History')]")
	WebElement Claiming_ImportHistory;

	@FindBy(xpath = "//a[contains(text(),'Data Override')]")
	WebElement Claiming_DataOverride;

	@FindBy(xpath = "//a[contains(text(),'Reports')]")
	WebElement Reports;

	@FindBy(xpath = "//a[contains(text(),'Leads')]")
	WebElement Leads;

	@FindBy(xpath = "//a[contains(text(),'Accounts')]")
	WebElement Accounts;

	@FindBy(xpath = "//a[contains(text(),'Client Information')]")
	WebElement Accounts_ClientInfo;

	@FindBy(xpath = "//a[contains(text(),'Create Account')]")
	WebElement Accounts_CreateAccount;

	@FindBy(xpath = "//a[contains(text(),'Locator Information')]")
	WebElement Accounts_LocatorAccount;

	@FindBy(xpath = "//a[contains(text(),'Help')]")
	WebElement Help;

	@FindBy(xpath = "//a[@id='ActiveTab']")
	WebElement Uploads;

	@FindBy(xpath = "//a[contains(text(),'Schedule')]")
	WebElement Schedule;

	@FindBy(xpath = "//a[contains(text(),'Revert')]")
	WebElement Revert;

	@FindBy(xpath = "//a[contains(text(),'Download')]")
	WebElement Download;

	@FindBy(xpath = "//a[contains(text(),'History')]")
	WebElement History;

	@FindBy(xpath = "//td//input[@id='search_button']")
	WebElement UploadFile;

	@FindBy(xpath = "/descendant::tbody[@id='sched_list_body'][1]")
	WebElement ActiveSchedule;

	@FindBy(xpath = "//a[contains(text(),'Messages')]")
	WebElement Messages;

	@FindBy(xpath = "//a[contains(text(),'Campaigns')]")
	WebElement Campaign;

	@FindBy(xpath = "//a[contains(text(),'Batch SMS')]")
	WebElement BatchSMS;

	@FindBy(xpath = "//button[@id='change_account']")
	WebElement SelectAccount;

	@FindBy(xpath = "//a[contains(text(),'Monitor')]")
	WebElement Monitor;

	@FindBy(xpath = "//a[text()='Etailer']")
	WebElement Etailer;

	@FindBy(xpath = "//a[text()='Admin Tools']")
	WebElement AdminTools;

	public IgniteUI() {

		PageFactory.initElements(driver, this);
		
	}

	public void LoginPage() throws InterruptedException {

		driver.findElement(By.xpath("//a[@id='hs-eu-confirmation-button']")).click();
		Thread.sleep(2000);
		UserName.sendKeys("ayadav@where2getit.com");
		Password.sendKeys("Tracker*141#");
		Thread.sleep(2000);
		LogIn.click();
		Thread.sleep(2000);

		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='OmnibarLogo']")));

		// Ignite.click();
	}

	public void PageTabs() {

		String LaunchPad = driver.findElement(By.xpath("//a[contains(text(),'Launchpad')]")).getText();
		System.out.println(LaunchPad);
		Assert.assertEquals("Launchpad", LaunchPad);

		String Location = driver.findElement(By.xpath("//a[@class='Tooltip'][contains(text(),'Locations')]")).getText();
		System.out.println(Location);
		Assert.assertEquals("Locations", Location);

		String File = driver.findElement(By.xpath("//a[contains(text(),'Files')]")).getText();
		System.out.println(File);
		Assert.assertEquals("Files", File);

		String Sites = driver.findElement(By.xpath("//a[contains(text(),'Sites')]")).getText();
		System.out.println(Sites);
		Assert.assertEquals("Sites", Sites);

		String Claiming = driver.findElement(By.xpath("//a[contains(text(),'Claiming')]")).getText();
		System.out.println(Claiming);
		Assert.assertEquals("Claiming", Claiming);

		String Reports = driver.findElement(By.xpath("//a[contains(text(),'Reports')]")).getText();
		System.out.println(Reports);
		Assert.assertEquals("Reports", Reports);

		String Leads = driver.findElement(By.xpath("//a[contains(text(),'Leads')]")).getText();
		System.out.println(Leads);
		Assert.assertEquals("Leads", Leads);

		String Accouonts = driver.findElement(By.xpath("//a[contains(text(),'Accounts')]")).getText();
		System.out.println(Accouonts);
		Assert.assertEquals("Accounts", Accouonts);

		String Monitor = driver.findElement(By.xpath("//a[contains(text(),'Monitor')]")).getText();
		System.out.println(Monitor);
		Assert.assertEquals("Monitor", Monitor);

		String Etailer = driver.findElement(By.xpath("//a[contains(text(),'Etailer')]")).getText();
		System.out.println(Etailer);
		Assert.assertEquals("Etailer", Etailer);

		String Help = driver.findElement(By.xpath("//a[contains(text(),'Help')]")).getText();
		System.out.println(Help);
		Assert.assertEquals("Help", Help);

		String AdminTools = driver.findElement(By.xpath("//a[contains(text(),'Admin Tools')]")).getText();
		System.out.println(AdminTools);
		Assert.assertEquals("Admin Tools", AdminTools);

	}

	public void LocationPage() throws InterruptedException {

		BrandifyLogo.isDisplayed();
		LocationManager.isDisplayed();
		DefaultLocation.isDisplayed();
		Thread.sleep(1000);
		DefaultLocation.click();
		GeostixAutomation.click();
		SelectAccount.click();
		Thread.sleep(2000);
		// Assert.assertEquals("alfredangelotest", DefaultLocation);
		ChangeAccount.isDisplayed();
		LogOutBtn.isDisplayed();

	}

	public void GoToLaunchPad() {

		WebElement LaunchPad = driver.findElement(By.xpath("//a[contains(text(),'Launchpad')]"));
		LaunchPad.click();

		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h2[contains(text(),'Launchpad')]")));

	}

	public void VerifyLaunchPad() {

		String Header = driver.findElement(By.xpath("//h2[contains(text(),'Launchpad')]")).getText();
		System.out.println(Header);
		Assert.assertEquals("Launchpad", Header);

		WebElement date = driver.findElement(By.xpath("//input[@id='date-range']"));
		date.isDisplayed();

		WebElement Settings = driver.findElement(By.xpath("//span[@class='icon-cog']"));
		Settings.isDisplayed();

		WebElement StPc = driver.findElement(By.xpath("//input[@value='Switch to Pie Chart']"));
		StPc.isDisplayed();

		String STPC = driver.findElement(By.xpath("//input[@value='Switch to Pie Chart']")).getText();
		System.out.println(STPC);
		// Assert.assertEquals("Switch to Pie Chart", STPC);

		String TCPAT = driver.findElement(By.xpath("//strong[@class='chart-title']")).getText();
		System.out.println(TCPAT);
		Assert.assertEquals("Total Channel Performance Across Time", TCPAT);

		WebElement stpc = driver.findElement(By.xpath("//input[@id='change-chart']"));
		stpc.click();

		String STLC = driver.findElement(By.xpath("//input[@id='change-chart']")).getText();
		System.out.println(STLC);
		// Assert.assertEquals("Switch to Line Chart", STLC);

		String BBC = driver.findElement(By.xpath("//strong[@class='chart-title']")).getText();
		System.out.println(BBC);
		Assert.assertEquals("% Breakdown by Channel", BBC);

		/*
		 * WebElement stlc =
		 * driver.findElement(By.xpath("//input[@id='change-chart']")); stlc.click();
		 */

	}

	public void VerifySwitchToLineChart_ChannelsPerformance() {

		String ChannelPerformance = driver.findElement(By.xpath("//strong[contains(text(),'Channels Performance')]"))
				.getText();
		System.out.println(ChannelPerformance);
		Assert.assertEquals("Channels Performance", ChannelPerformance);

		String Channel = driver.findElement(By.xpath("//ul[@id='channels-header']//li[contains(text(),'Channels')]"))
				.getText();
		System.out.println(Channel);
		Assert.assertEquals("Channels", Channel);

		String PageView = driver.findElement(By.xpath("//li[contains(text(),'Page Views')]")).getText();
		System.out.println(PageView);
		Assert.assertEquals("Page Views", PageView);

		String Conversions = driver.findElement(By.xpath("//li[contains(text(),'Conversions')]")).getText();
		System.out.println(Conversions);
		Assert.assertTrue(Conversions.contains("Conversions"));

		String ConversionRate = driver.findElement(By.xpath("//li[contains(text(),'Conversion Rate')]")).getText();
		System.out.println(ConversionRate);
		Assert.assertTrue(ConversionRate.contains("Conversion Rate"));

		String Totals = driver.findElement(By.xpath("//strong[contains(text(),'Totals')]")).getText();
		System.out.println(Totals);
		Assert.assertEquals("Totals", Totals);

	}

	public void VerifySwitchToLineChart_LocationDataQualitySummary() {

		String LDQS = driver.findElement(By.xpath("//strong[contains(text(),'Location Data Quality Summary')]"))
				.getText();
		System.out.println(LDQS);
		Assert.assertEquals("Location Data Quality Summary", LDQS);

		/*
		 * WebElement AllLocation =
		 * driver.findElement(By.xpath("//label[contains(text(),'All locations')]"));
		 * AllLocation.isDisplayed();
		 * 
		 * WebElement Claimed =
		 * driver.findElement(By.xpath("//label[contains(text(),'Claimed locations')]"))
		 * ; Claimed.isDisplayed();
		 * 
		 * String Website =
		 * driver.findElement(By.xpath("//li[contains(text(),'Website')]")).getText();
		 * System.out.println(Website); Assert.assertEquals("Website", Website);
		 * 
		 * String MissingLocations =
		 * driver.findElement(By.xpath("//li[contains(text(),'Missing Locations')]")).
		 * getText(); System.out.println(MissingLocations);
		 * Assert.assertEquals("Missing Locations", MissingLocations);
		 * 
		 * String BadAddresses =
		 * driver.findElement(By.xpath("//li[contains(text(),'Bad Addresses')]")).
		 * getText(); System.out.println(BadAddresses);
		 * Assert.assertEquals("Bad Addresses", BadAddresses);
		 * 
		 * String BPN =
		 * driver.findElement(By.xpath("//li[contains(text(),'Bad Phone Numbers')]")).
		 * getText(); System.out.println(BPN); Assert.assertEquals("Bad Phone Numbers",
		 * BPN);
		 * 
		 * String PoorGeocodes =
		 * driver.findElement(By.xpath("//li[contains(text(),'Poor Geocodes')]")).
		 * getText(); System.out.println(PoorGeocodes);
		 * Assert.assertEquals("Poor Geocodes", PoorGeocodes);
		 * 
		 * String Duplicates =
		 * driver.findElement(By.xpath("//li[contains(text(),'Duplicates')]")).getText()
		 * ; System.out.println(Duplicates); Assert.assertEquals("Duplicates",
		 * Duplicates);
		 * 
		 * WebElement TableList =
		 * driver.findElement(By.xpath("//ul[@id='ldqs-values']"));
		 * System.out.println(TableList.getText());
		 */
	}

	public void VerifySwitchToLineChart_ReviewsAndRatings() {

		String ReviewsandRatings = driver.findElement(By.xpath("//strong[contains(text(),'Reviews and Ratings')]"))
				.getText();
		System.out.println(ReviewsandRatings);
		Assert.assertEquals("Reviews and Ratings", ReviewsandRatings);

		String DataSource = driver.findElement(By.xpath("//li[contains(text(),'Data Source')]")).getText();
		System.out.println(DataSource);
		Assert.assertEquals("Data Source", DataSource);

		String AllReviews = driver.findElement(By.xpath("//section[@id='reviews-main']//li[2]")).getText();
		System.out.println(AllReviews);
		Assert.assertTrue(AllReviews.contains("All Reviews"));

		String AllReviewsDateRange = driver.findElement(By.xpath("//section[@id='reviews-main']//li[3]")).getText();
		System.out.println(AllReviewsDateRange);
		Assert.assertTrue(AllReviewsDateRange.contains("All Reviews"));

		String NegativeRatings = driver.findElement(By.xpath("//section[@id='reviews-main']//li[4]")).getText();
		System.out.println(NegativeRatings);
		Assert.assertTrue(NegativeRatings.contains("Negative Ratings"));

		String NegativeRatingsDateRange = driver.findElement(By.xpath("//section[@id='reviews-main']//li[5]"))
				.getText();
		System.out.println(NegativeRatingsDateRange);
		Assert.assertTrue(NegativeRatingsDateRange.contains("Negative Ratings"));

		String PositiveRatings = driver.findElement(By.xpath("//section[@id='reviews-main']//li[6]")).getText();
		System.out.println(PositiveRatings);
		Assert.assertTrue(PositiveRatings.contains("Positive Ratings"));

		String PositiveRatingsDateRange = driver.findElement(By.xpath("//section[@id='MainContent']//li[7]")).getText();
		System.out.println(PositiveRatingsDateRange);
		Assert.assertTrue(PositiveRatingsDateRange.contains("Positive Ratings"));

		String Total = driver.findElement(By.xpath("//span[contains(text(),'Total')]")).getText();
		System.out.println(Total);
		Assert.assertEquals("Total", Total);
	}

	public void VerifySwitchToPieChart() {

		WebElement Pie = driver.findElement(By.xpath("//input[@id='change-chart']"));
		Pie.click();

		String pie = driver.findElement(By.xpath("//input[@id='change-chart']")).getText();
		System.out.println(pie);
		// Assert.assertEquals("Switch to Pie Chart", Pie);

	}

	public void VerifySwitchToPieChart_ChannelPerformance() {

		String ChannelPerformance = driver.findElement(By.xpath("//strong[contains(text(),'Channels Performance')]"))
				.getText();
		System.out.println(ChannelPerformance);
		Assert.assertEquals("Channels Performance", ChannelPerformance);

		String Channel = driver.findElement(By.xpath("//ul[@id='channels-header']//li[contains(text(),'Channels')]"))
				.getText();
		System.out.println(Channel);
		Assert.assertEquals("Channels", Channel);

		String PageView = driver.findElement(By.xpath("//li[contains(text(),'Page Views')]")).getText();
		System.out.println(PageView);
		Assert.assertEquals("Page Views", PageView);

		String Conversions = driver.findElement(By.xpath("//li[contains(text(),'Conversions')]")).getText();
		System.out.println(Conversions);
		Assert.assertTrue(Conversions.contains("Conversions"));

		String ConversionRate = driver.findElement(By.xpath("//li[contains(text(),'Conversion Rate')]")).getText();
		System.out.println(ConversionRate);
		Assert.assertTrue(ConversionRate.contains("Conversion Rate"));

		String Totals = driver.findElement(By.xpath("//strong[contains(text(),'Totals')]")).getText();
		System.out.println(Totals);
		Assert.assertEquals("Totals", Totals);

	}

	public void VerifySwitchToPieChart_LocationDataQualitySummary() {

		String LDQS = driver.findElement(By.xpath("//strong[contains(text(),'Location Data Quality Summary')]"))
				.getText();
		System.out.println(LDQS);
		Assert.assertEquals("Location Data Quality Summary", LDQS);

		/*
		 * WebElement AllLocation =
		 * driver.findElement(By.xpath("//label[contains(text(),'All locations')]"));
		 * AllLocation.isDisplayed();
		 * 
		 * WebElement Claimed =
		 * driver.findElement(By.xpath("//label[contains(text(),'Claimed locations')]"))
		 * ; Claimed.isDisplayed();
		 * 
		 * String Website =
		 * driver.findElement(By.xpath("//li[contains(text(),'Website')]")).getText();
		 * System.out.println(Website); Assert.assertEquals("Website", Website);
		 * 
		 * String MissingLocations =
		 * driver.findElement(By.xpath("//li[contains(text(),'Missing Locations')]")).
		 * getText(); System.out.println(MissingLocations);
		 * Assert.assertEquals("Missing Locations", MissingLocations);
		 * 
		 * String BadAddresses =
		 * driver.findElement(By.xpath("//li[contains(text(),'Bad Addresses')]")).
		 * getText(); System.out.println(BadAddresses);
		 * Assert.assertEquals("Bad Addresses", BadAddresses);
		 * 
		 * String BPN =
		 * driver.findElement(By.xpath("//li[contains(text(),'Bad Phone Numbers')]")).
		 * getText(); System.out.println(BPN); Assert.assertEquals("Bad Phone Numbers",
		 * BPN);
		 * 
		 * String PoorGeocodes =
		 * driver.findElement(By.xpath("//li[contains(text(),'Poor Geocodes')]")).
		 * getText(); System.out.println(PoorGeocodes);
		 * Assert.assertEquals("Poor Geocodes", PoorGeocodes);
		 * 
		 * String Duplicates =
		 * driver.findElement(By.xpath("//li[contains(text(),'Duplicates')]")).getText()
		 * ; System.out.println(Duplicates); Assert.assertEquals("Duplicates",
		 * Duplicates);
		 * 
		 * WebElement TableList =
		 * driver.findElement(By.xpath("//ul[@id='ldqs-values']"));
		 * System.out.println(TableList.getText());
		 */
	}

	public void VerifySwitchToPieChart_ReviewsAndRatings() {

		String ReviewsandRatings = driver.findElement(By.xpath("//strong[contains(text(),'Reviews and Ratings')]"))
				.getText();
		System.out.println(ReviewsandRatings);
		Assert.assertEquals("Reviews and Ratings", ReviewsandRatings);

		String DataSource = driver.findElement(By.xpath("//li[contains(text(),'Data Source')]")).getText();
		System.out.println(DataSource);
		Assert.assertEquals("Data Source", DataSource);

		String AllReviews = driver.findElement(By.xpath("//section[@id='reviews-main']//li[2]")).getText();
		System.out.println(AllReviews);
		Assert.assertTrue(AllReviews.contains("All Reviews"));

		String AllReviewsDateRange = driver.findElement(By.xpath("//section[@id='reviews-main']//li[3]")).getText();
		System.out.println(AllReviewsDateRange);
		Assert.assertTrue(AllReviewsDateRange.contains("All Reviews"));

		String NegativeRatings = driver.findElement(By.xpath("//section[@id='reviews-main']//li[4]")).getText();
		System.out.println(NegativeRatings);
		Assert.assertTrue(NegativeRatings.contains("Negative Ratings"));

		String NegativeRatingsDateRange = driver.findElement(By.xpath("//section[@id='reviews-main']//li[5]"))
				.getText();
		System.out.println(NegativeRatingsDateRange);
		Assert.assertTrue(NegativeRatingsDateRange.contains("Negative Ratings"));

		String PositiveRatings = driver.findElement(By.xpath("//section[@id='reviews-main']//li[6]")).getText();
		System.out.println(PositiveRatings);
		Assert.assertTrue(PositiveRatings.contains("Positive Ratings"));

		String PositiveRatingsDateRange = driver.findElement(By.xpath("//section[@id='MainContent']//li[7]")).getText();
		System.out.println(PositiveRatingsDateRange);
		Assert.assertTrue(PositiveRatingsDateRange.contains("Positive Ratings"));

		String Total = driver.findElement(By.xpath("//span[contains(text(),'Total')]")).getText();
		System.out.println(Total);
		Assert.assertEquals("Total", Total);
	}

	public void GoToLocationManager() {

		WebElement Location = driver.findElement(By.xpath("//a[text()='Locations']"));
		Location.click();

	}

	public void LocationManager() {

		SearchByAdd.isDisplayed();

		// Select Country
		SelectCountry.isDisplayed();
		SelectCountry.click();

		List<WebElement> DropDown = driver.findElements(By.xpath("//select[@id='search_country']"));
		System.out.println("Number of elements:" + DropDown.size());

		for (int i = 0; i < DropDown.size(); i++) {
			System.out.println("Total country List is ==> : " + DropDown.get(i).getText());
		}
		Select drpCountry = new Select(driver.findElement(By.xpath("//select[@id='search_country']")));
		drpCountry.selectByVisibleText("India");

		// Select Radius
		Radius.isDisplayed();
		Radius.click();
		List<WebElement> searchradius = driver.findElements(By.xpath("//select[@id='search_radius']"));
		System.out.println("Number of elements:" + searchradius.size());

		for (int i = 0; i < searchradius.size(); i++) {
			System.out.println("Available Radius List is ==> : " + searchradius.get(i).getText());
		}
		Select searchRadius = new Select(driver.findElement(By.xpath("//select[@id='search_radius']")));
		searchRadius.selectByVisibleText("50");

		// Select Radius Type
		RadiusType.isDisplayed();
		RadiusType.click();
		List<WebElement> RT = driver.findElements(By.xpath("//select[@id='radius_type']"));
		System.out.println("Number of elements:" + RT.size());

		for (int i = 0; i < RT.size(); i++) {
			System.out.println("Available Radius Type is ==> : " + RT.get(i).getText());
		}
		Select RDD = new Select(driver.findElement(By.xpath("//select[@id='radius_type']")));
		RDD.selectByVisibleText("km");

		SearchBtn.isDisplayed();
		AdvncSearchBtn.isDisplayed();
		AddLocation.isDisplayed();
		FeedBackBtn.isDisplayed();

	}

	public void LocationManager_AdvanceSearch() throws InterruptedException {

		Thread.sleep(2000);
		AdvncSearchBtn.click();
		Thread.sleep(2000);

		WebElement AdvanceSearch = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']"));
		AdvanceSearch.isDisplayed();
		System.out.println(AdvanceSearch);
		// Assert.assertTrue(AdvanceSearch.contains("Advanced Search"));
		Thread.sleep(2000);
		WebElement ClientKey = driver.findElement(By.xpath("//td[contains(text(),'clientkey')]"));
		ClientKey.isDisplayed();

		WebElement PostalCode = driver.findElement(By.xpath("//td[contains(text(),'postalcode')]"));
		PostalCode.isDisplayed();

		WebElement Friday_Hours = driver.findElement(By.xpath("//td[contains(text(),'fri_hour')]"));
		Friday_Hours.isDisplayed();

		WebElement UID = driver.findElement(By.xpath("//td[contains(text(),'uid')]"));
		UID.isDisplayed();

		WebElement Sat_Hours = driver.findElement(By.xpath("//td[contains(text(),'sat_hour')]"));
		Sat_Hours.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//td[contains(text(),'name')]"));
		Name.isDisplayed();

		WebElement Phone = driver.findElement(By.xpath("//td[contains(text(),'phone')]"));
		Phone.isDisplayed();

		WebElement Sun_Hours = driver.findElement(By.xpath("//td[contains(text(),'sun_hour')]"));
		Sun_Hours.isDisplayed();

		WebElement Address1 = driver.findElement(By.xpath("//td[contains(text(),'address1')]"));
		Address1.isDisplayed();

		WebElement mon_Hours = driver.findElement(By.xpath("//td[contains(text(),'mon_hour')]"));
		mon_Hours.isDisplayed();

		WebElement Email = driver.findElement(By.xpath("//td[contains(text(),'email')]"));
		Email.isDisplayed();

		WebElement Address2 = driver.findElement(By.xpath("//td[contains(text(),'address2')]"));
		Address2.isDisplayed();

		WebElement Tues_Hours = driver.findElement(By.xpath("//td[contains(text(),'tues_hour')]"));
		Tues_Hours.isDisplayed();

		WebElement Websites = driver.findElement(By.xpath("//td[contains(text(),'website')]"));
		Websites.isDisplayed();

		WebElement City = driver.findElement(By.xpath("//td[contains(text(),'city')]"));
		City.isDisplayed();

		WebElement Wed_Hours = driver.findElement(By.xpath("//td[contains(text(),'wed_hour')]"));
		Wed_Hours.isDisplayed();

		WebElement Fax = driver.findElement(By.xpath("//td[contains(text(),'fax')]"));
		Fax.isDisplayed();

		WebElement Thurs_Hours = driver.findElement(By.xpath("//td[contains(text(),'thurshour')]"));
		Thurs_Hours.isDisplayed();

		WebElement Icon = driver.findElement(By.xpath("//td[contains(text(),'icon')]"));
		Icon.isDisplayed();

		WebElement State = driver.findElement(By.xpath("//td//div[contains(text(),'state')]"));
		State.isDisplayed();

		String Country = driver.findElement(By.xpath("//td[contains(text(),'country')]")).getText();
		System.out.println(Country);
		Assert.assertTrue(Country.contains("country"));

		List<WebElement> Country_DropDown = driver.findElements(By.xpath("//select[@id='location_country']"));
		System.out.println("Number of elements:" + Country_DropDown.size());

		for (int i = 0; i < Country_DropDown.size(); i++) {
			System.out.println("Total country List is ==> : " + Country_DropDown.get(i).getText());
		}

		WebElement Search = driver.findElement(By.xpath("//input[@id='location_submit']"));
		Search.isDisplayed();

		WebElement Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		Close.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@id='cancel_form']"));
		Cancel.isDisplayed();
		Thread.sleep(1500);
		// Cancel.click();

	}

	public void LocationManager_AdvanceSearchTextFields() throws InterruptedException {

		/*
		 * Thread.sleep(2000); AdvncSearchBtn.click(); Thread.sleep(2000);
		 */

		WebElement AdvanceSearch = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']"));
		AdvanceSearch.isDisplayed();
		System.out.println(AdvanceSearch);
		// Assert.assertTrue(AdvanceSearch.contains("Advanced Search"));
		Thread.sleep(2000);
		WebElement ClientKeyTextField = driver.findElement(By.xpath("//input[@id='location_clientkey']"));
		ClientKeyTextField.isDisplayed();

		WebElement PostalCodeTextField = driver.findElement(By.xpath("//input[@id='location_postalcode']"));
		PostalCodeTextField.isDisplayed();

		WebElement Friday_HoursTextField = driver.findElement(By.xpath("//input[@id='location_fri_hour']"));
		Friday_HoursTextField.isDisplayed();

		WebElement UIDTextField = driver.findElement(By.xpath("//input[@id='location_uid']"));
		UIDTextField.isDisplayed();

		WebElement Sat_HoursTextField = driver.findElement(By.xpath("//input[@id='location_sat_hour']"));
		Sat_HoursTextField.isDisplayed();

		WebElement NameTextField = driver.findElement(By.xpath("//input[@id='location_name']"));
		NameTextField.isDisplayed();

		WebElement PhoneTextField = driver.findElement(By.xpath("//input[@id='location_phone']"));
		PhoneTextField.isDisplayed();

		WebElement Sun_HoursTextField = driver.findElement(By.xpath("//input[@id='location_sun_hour']"));
		Sun_HoursTextField.isDisplayed();

		WebElement Address1TextField = driver.findElement(By.xpath("//input[@id='location_address1']"));
		Address1TextField.isDisplayed();

		WebElement mon_HoursTextField = driver.findElement(By.xpath("//input[@id='location_mon_hour']"));
		mon_HoursTextField.isDisplayed();

		WebElement EmailTextField = driver.findElement(By.xpath("//input[@id='location_email']"));
		EmailTextField.isDisplayed();

		WebElement Address2TextField = driver.findElement(By.xpath("//input[@id='location_address2']"));
		Address2TextField.isDisplayed();

		WebElement Tues_HoursTextField = driver.findElement(By.xpath("//input[@id='location_tues_hour']"));
		Tues_HoursTextField.isDisplayed();

		WebElement WebsitesTextField = driver.findElement(By.xpath("//input[@id='location_website']"));
		WebsitesTextField.isDisplayed();

		WebElement CityTextField = driver.findElement(By.xpath("//input[@id='location_city']"));
		CityTextField.isDisplayed();

		WebElement Wed_HoursTextField = driver.findElement(By.xpath("//input[@id='location_wed_hour']"));
		Wed_HoursTextField.isDisplayed();

		WebElement FaxTextField = driver.findElement(By.xpath("//input[@id='location_fax']"));
		FaxTextField.isDisplayed();

		WebElement Thurs_HoursTextField = driver.findElement(By.xpath("//input[@id='location_thurshour']"));
		Thurs_HoursTextField.isDisplayed();

		WebElement IconTextField = driver.findElement(By.xpath("//input[@id='location_icon']"));
		IconTextField.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@id='cancel_form']"));
		Cancel.isDisplayed();
		Thread.sleep(1500);
		Cancel.click();

	}

	public void LocationManager_AddLocation() throws InterruptedException {

		Thread.sleep(2000);
		AddLocation.click();
		Thread.sleep(2000);

		WebElement AddLocation = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']"));
		AddLocation.isDisplayed();
		System.out.println(AddLocation);
		Thread.sleep(2000);

		WebElement ClientKey = driver.findElement(By.xpath("//td[contains(text(),'clientkey')]"));
		ClientKey.isDisplayed();

		WebElement Auto_ClientKey = driver.findElement(By.xpath("//div[contains(text(),'Auto Generate Clientkey')]"));
		Auto_ClientKey.isDisplayed();

		WebElement Auto_ClientKeyCheckBox = driver.findElement(By.xpath("//input[@id='autogenerateid']"));
		Auto_ClientKeyCheckBox.isDisplayed();

		String Country = driver.findElement(By.xpath("//td[contains(text(),'country')]")).getText();
		System.out.println(Country);
		Assert.assertTrue(Country.contains("country"));

		List<WebElement> Country_DropDown = driver.findElements(By.xpath("//select[@id='location_country']"));
		System.out.println("Number of elements:" + Country_DropDown.size());

		for (int i = 0; i < Country_DropDown.size(); i++) {
			System.out.println("Total country List is ==> : " + Country_DropDown.get(i).getText());
		}

		WebElement Sat_Hours = driver.findElement(By.xpath("//td[contains(text(),'sat_hour')]"));
		Sat_Hours.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//td[contains(text(),'name')]"));
		Name.isDisplayed();

		WebElement Phone = driver.findElement(By.xpath("//td[contains(text(),'phone')]"));
		Phone.isDisplayed();

		WebElement Sun_Hours = driver.findElement(By.xpath("//td[contains(text(),'sun_hour')]"));
		Sun_Hours.isDisplayed();

		WebElement Address1 = driver.findElement(By.xpath("//td[contains(text(),'address1')]"));
		Address1.isDisplayed();

		WebElement mon_Hours = driver.findElement(By.xpath("//td[contains(text(),'mon_hour')]"));
		mon_Hours.isDisplayed();

		WebElement Email = driver.findElement(By.xpath("//td[contains(text(),'email')]"));
		Email.isDisplayed();

		WebElement Address2 = driver.findElement(By.xpath("//td[contains(text(),'address2')]"));
		Address2.isDisplayed();

		WebElement Tues_Hours = driver.findElement(By.xpath("//td[contains(text(),'tues_hour')]"));
		Tues_Hours.isDisplayed();

		WebElement Websites = driver.findElement(By.xpath("//td[contains(text(),'website')]"));
		Websites.isDisplayed();

		WebElement City = driver.findElement(By.xpath("//td[contains(text(),'city')]"));
		City.isDisplayed();

		WebElement Wed_Hours = driver.findElement(By.xpath("//td[contains(text(),'wed_hour')]"));
		Wed_Hours.isDisplayed();

		WebElement Fax = driver.findElement(By.xpath("//td[contains(text(),'fax')]"));
		Fax.isDisplayed();

		WebElement Thurs_Hours = driver.findElement(By.xpath("//td[contains(text(),'thurshour')]"));
		Thurs_Hours.isDisplayed();

		WebElement Icon = driver.findElement(By.xpath("//td[contains(text(),'icon')]"));
		Icon.isDisplayed();

		WebElement State = driver.findElement(By.xpath("//td//div[contains(text(),'state')]"));
		State.isDisplayed();

		WebElement PostalCode = driver.findElement(By.xpath("//td[contains(text(),'postalcode')]"));
		PostalCode.isDisplayed();

		WebElement Friday_Hours = driver.findElement(By.xpath("//td[contains(text(),'fri_hour')]"));
		Friday_Hours.isDisplayed();

		WebElement Latitude = driver.findElement(By.xpath("//td[contains(text(),'latitude')]"));
		Latitude.isDisplayed();

		WebElement Longitude = driver.findElement(By.xpath("//td[contains(text(),'longitude')]"));
		Longitude.isDisplayed();

		WebElement GeoResult = driver.findElement(By.xpath("//td[contains(text(),'georesult')]"));
		GeoResult.isDisplayed();

		WebDriverWait wait = new WebDriverWait(driver, 10);
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='location_geocode']")));
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='location_reversegeocode']")));
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='location_submit']")));
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='cancel_form']")));

		WebElement Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		Close.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@id='cancel_form']"));
		Cancel.isDisplayed();
		Thread.sleep(1500);
		// Cancel.click();

	}

	public void LocationManager_AddLocationTextField() throws InterruptedException {

		/*
		 * Thread.sleep(2000); AddLocation.click(); Thread.sleep(2000);
		 */
		/*
		 * WebElement AddLocation =
		 * driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']"));
		 * AddLocation.isDisplayed(); System.out.println(AddLocation);
		 */
		Thread.sleep(2000);

		WebElement ClientKeyTextField = driver.findElement(By.xpath("//input[@id='location_clientkey']"));
		ClientKeyTextField.isDisplayed();

		WebElement Sat_HoursTextField = driver.findElement(By.xpath("//input[@id='location_sat_hour']"));
		Sat_HoursTextField.isDisplayed();

		WebElement NameTextField = driver.findElement(By.xpath("//input[@id='location_name']"));
		NameTextField.isDisplayed();

		WebElement PhoneTextField = driver.findElement(By.xpath("//input[@id='location_phone']"));
		PhoneTextField.isDisplayed();

		WebElement Sun_HoursTextField = driver.findElement(By.xpath("//input[@id='location_sun_hour']"));
		Sun_HoursTextField.isDisplayed();

		WebElement Address1TextField = driver.findElement(By.xpath("//input[@id='location_address1']"));
		Address1TextField.isDisplayed();

		WebElement mon_HoursTextField = driver.findElement(By.xpath("//input[@id='location_mon_hour']"));
		mon_HoursTextField.isDisplayed();

		WebElement EmailTextField = driver.findElement(By.xpath("//input[@id='location_email']"));
		EmailTextField.isDisplayed();

		WebElement Address2TextField = driver.findElement(By.xpath("//input[@id='location_address2']"));
		Address2TextField.isDisplayed();

		WebElement Tues_HoursTextField = driver.findElement(By.xpath("//input[@id='location_tues_hour']"));
		Tues_HoursTextField.isDisplayed();

		WebElement WebsitesTextField = driver.findElement(By.xpath("//input[@id='location_website']"));
		WebsitesTextField.isDisplayed();

		WebElement CityTextField = driver.findElement(By.xpath("//input[@id='location_city']"));
		CityTextField.isDisplayed();

		WebElement Wed_HoursTextField = driver.findElement(By.xpath("//input[@id='location_wed_hour']"));
		Wed_HoursTextField.isDisplayed();

		WebElement FaxTextField = driver.findElement(By.xpath("//input[@id='location_fax']"));
		FaxTextField.isDisplayed();

		WebElement Thurs_HoursTextField = driver.findElement(By.xpath("//input[@id='location_thurshour']"));
		Thurs_HoursTextField.isDisplayed();

		WebElement IconTextField = driver.findElement(By.xpath("//input[@id='location_icon']"));
		IconTextField.isDisplayed();

		WebElement PostalCodeTextField = driver.findElement(By.xpath("//input[@id='location_postalcode']"));
		PostalCodeTextField.isDisplayed();

		WebElement Friday_HoursTextField = driver.findElement(By.xpath("//input[@id='location_fri_hour']"));
		Friday_HoursTextField.isDisplayed();

		WebElement LatitudeTextField = driver.findElement(By.xpath("//input[@id='location_latitude']"));
		LatitudeTextField.isDisplayed();

		WebElement LongitudeTextField = driver.findElement(By.xpath("//input[@id='location_longitude']"));
		LongitudeTextField.isDisplayed();

		WebElement GeoResultTextField = driver.findElement(By.xpath("//input[@id='location_georesult']"));
		GeoResultTextField.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@id='cancel_form']"));
		Cancel.isDisplayed();
		Thread.sleep(1500);
		Cancel.click();
		Thread.sleep(1500);
	}

	public void VerifyNewDealerApprovalQueue() {

		WebElement NDAQ = driver.findElement(By.xpath("//a[contains(text(),'New Dealer Approval Queue')]"));
		NDAQ.click();

		String NewDealerQueue = driver.findElement(By.xpath("//h3[contains(text(),'New Dealer Queue')]")).getText();
		System.out.println(NewDealerQueue);
		Assert.assertTrue(NewDealerQueue.contains("New Dealer Queue"));

		String Nopendingqueue = driver.findElement(By.xpath("/descendant::div[contains(text(),'No pending queue')][1]"))
				.getText();
		System.out.println(Nopendingqueue);
		Assert.assertTrue(Nopendingqueue.contains("No pending queue"));

		WebElement ApproveSelected = driver.findElement(By.xpath("//input[@id='batch_approve']"));
		ApproveSelected.isDisplayed();

		WebElement RejectSelected = driver.findElement(By.xpath("//input[@id='batch_disapprove']"));
		RejectSelected.isDisplayed();

		String ModifyDealerQueue = driver.findElement(By.xpath("//h3[contains(text(),'Modify Dealer Queue')]"))
				.getText();
		System.out.println(ModifyDealerQueue);
		Assert.assertTrue(ModifyDealerQueue.contains("Modify Dealer Queue"));

		String NoPendingQueue = driver.findElement(By.xpath("/descendant::div[contains(text(),'No pending queue')][2]"))
				.getText();
		System.out.println(NoPendingQueue);
		Assert.assertTrue(NoPendingQueue.contains("No pending queue"));

		WebElement AS = driver.findElement(By.xpath("//input[@id='batch_approve_modify']"));
		AS.click();

		WebElement RS = driver.findElement(By.xpath("//input[@id='batch_disapprove_modify']"));
		RS.click();

	}

	public void VerifySocialLocationManager() {

		WebElement SLM = driver.findElement(By.xpath("//a[contains(text(),'Social Location Manager')]"));
		SLM.click();

		SearchByAdd.isDisplayed();

		// Select Country
		SelectCountry.isDisplayed();
		SelectCountry.click();

		List<WebElement> DropDown = driver.findElements(By.xpath("//select[@id='search_country']"));
		System.out.println("Number of elements:" + DropDown.size());

		for (int i = 0; i < DropDown.size(); i++) {
			System.out.println("Total country List is ==> : " + DropDown.get(i).getText());
		}
		Select drpCountry = new Select(driver.findElement(By.xpath("//select[@id='search_country']")));
		drpCountry.selectByVisibleText("India");

		// Select Radius
		Radius.isDisplayed();
		Radius.click();
		List<WebElement> searchradius = driver.findElements(By.xpath("//select[@id='search_radius']"));
		System.out.println("Number of elements:" + searchradius.size());

		for (int i = 0; i < searchradius.size(); i++) {
			System.out.println("Available Radius List is ==> : " + searchradius.get(i).getText());
		}
		Select searchRadius = new Select(driver.findElement(By.xpath("//select[@id='search_radius']")));
		searchRadius.selectByVisibleText("50");

		// Select Radius Type
		RadiusType.isDisplayed();
		RadiusType.click();
		List<WebElement> RT = driver.findElements(By.xpath("//select[@id='radius_type']"));
		System.out.println("Number of elements:" + RT.size());

		for (int i = 0; i < RT.size(); i++) {
			System.out.println("Available Radius Type is ==> : " + RT.get(i).getText());
		}
		Select RDD = new Select(driver.findElement(By.xpath("//select[@id='radius_type']")));
		RDD.selectByVisibleText("km");

		AdvncSearchBtn.isDisplayed();

		FeedBackBtn.isDisplayed();

	}

	public void ClickOnFiles() {

		Files.click();

	}

	public void Files_UploadTabs() {

		Uploads.isDisplayed();

		String Upload = driver.findElement(By.xpath("//td[contains(text(),'Upload File')]")).getText();
		System.out.println(Upload);
		Assert.assertEquals("Upload File", Upload);

		String ChooseFile = driver.findElement(By.xpath("//input[@id='upload_file']")).getText();
		System.out.println(ChooseFile);
		// Assert.assertEquals("Choose File", ChooseFile);

		String Filetype = driver.findElement(By.xpath("//td[contains(text(),'File Type')]")).getText();
		System.out.println(Filetype);
		Assert.assertEquals("File Type", Filetype);

		String Locations = driver.findElement(By.xpath("//label[contains(text(),'Locations')]")).getText();
		System.out.println(Locations);
		Assert.assertEquals("Locations", Locations);

		String Offlineproducts = driver.findElement(By.xpath("//label[contains(text(),'Offline products')]")).getText();
		System.out.println(Offlineproducts);
		Assert.assertEquals("Offline products", Offlineproducts);

		String Events = driver.findElement(By.xpath("//label[contains(text(),'Events')]")).getText();
		System.out.println(Events);
		Assert.assertEquals("Events", Events);

		String Territory = driver.findElement(By.xpath("//label[contains(text(),'Territory')]")).getText();
		System.out.println(Territory);
		Assert.assertEquals("Territory", Territory);

		String Product = driver.findElement(By.xpath("/descendant::label[contains(text(),'Product')][1]")).getText();
		System.out.println(Product);
		Assert.assertEquals("Product", Product);

		String Etailer = driver.findElement(By.xpath("//label[contains(text(),'Etailer')]")).getText();
		System.out.println(Etailer);
		Assert.assertEquals("Etailer", Etailer);

		String PC = driver.findElement(By.xpath("//label[contains(text(),'Product Category')]")).getText();
		System.out.println(PC);
		Assert.assertEquals("Product Category", PC);

		String CA = driver.findElement(By.xpath("//td[contains(text(),'Choose an Action')]")).getText();
		System.out.println(CA);
		Assert.assertEquals("Choose an Action", CA);

		String Update = driver.findElement(By.xpath("/descendant::label[contains(text(),'Update')][1]")).getText();
		System.out.println(Update);
		Assert.assertEquals("Update", Update);

		String UD = driver.findElement(By.xpath("//label[contains(text(),'Update-Delete')]")).getText();
		System.out.println(UD);
		Assert.assertEquals("Update-Delete", UD);

		String Delete = driver.findElement(By.xpath("/descendant::label[contains(text(),'Delete')][2]")).getText();
		System.out.println(Delete);
		Assert.assertEquals("Delete", Delete);

		String Replace = driver.findElement(By.xpath("//label[contains(text(),'Replace')]")).getText();
		System.out.println(Replace);
		Assert.assertEquals("Replace", Replace);

		String Edit = driver.findElement(By.xpath("//label[contains(text(),'Edit')]")).getText();
		System.out.println(Edit);
		Assert.assertEquals("Edit", Edit);

		WebElement UF = driver.findElement(By.xpath("//td//input[@id='search_button']"));
		UF.isDisplayed();

	}

	public void ClickOnFile_ScheduleTab() throws InterruptedException {

		Schedule.click();
		Thread.sleep(2000);

	}

	public void Files_ScheduleTabs() throws InterruptedException {

		Schedule.isDisplayed();

		String CSU = driver.findElement(By.xpath("//p[contains(text(),'Current Scheduled Uploads')]")).getText();
		System.out.println(CSU);
		Assert.assertEquals("Current Scheduled Uploads", CSU);

		String FN = driver.findElement(By.xpath("//td[@class='sched_name'][contains(text(),'File Name')]")).getText();
		System.out.println(FN);
		Assert.assertEquals("File Name", FN);

		String Time = driver.findElement(By.xpath("/descendant::td[@class='sched_time'][contains(text(),'Time')][1]"))
				.getText();
		System.out.println(Time);
		Assert.assertEquals("Time", Time);

		String Frequency = driver
				.findElement(By.xpath("/descendant::td[@class='sched_freq'][contains(text(),'Frequency')][1]"))
				.getText();
		System.out.println(Frequency);
		Assert.assertEquals("Frequency", Frequency);

		ActiveSchedule.isDisplayed();

		String FS = driver.findElement(By.xpath("//td[@class='StepText'][contains(text(),'File Settings')]")).getText();
		System.out.println(FS);
		Assert.assertEquals("File Settings", FS);

		String FT = driver.findElement(By.xpath("//td[contains(text(),'File Type')]")).getText();
		System.out.println(FT);
		Assert.assertEquals("File Type", FT);

		String Locations = driver.findElement(By.xpath("//label[contains(text(),'Locations')]")).getText();
		System.out.println(Locations);
		Assert.assertEquals("Locations", Locations);

		String OP = driver.findElement(By.xpath("//label[contains(text(),'Offline Products')]")).getText();
		System.out.println(OP);
		Assert.assertEquals("Offline Products", OP);

		String Events = driver.findElement(By.xpath("//label[contains(text(),'Events')]")).getText();
		System.out.println(Events);
		Assert.assertEquals("Events", Events);

		String Territory = driver.findElement(By.xpath("//label[contains(text(),'Territory')]")).getText();
		System.out.println(Territory);
		Assert.assertEquals("Territory", Territory);

		String Product = driver.findElement(By.xpath("/descendant::label[contains(text(),'Product')][2]")).getText();
		System.out.println(Product);
		Assert.assertEquals("Product", Product);

		String Etailer = driver.findElement(By.xpath("//label[contains(text(),'Etailer')]")).getText();
		System.out.println(Etailer);
		Assert.assertEquals("Etailer", Etailer);

		String PC = driver.findElement(By.xpath("//label[contains(text(),'Product Category')]")).getText();
		System.out.println(PC);
		Assert.assertEquals("Product Category", PC);

		String Action = driver.findElement(By.xpath("//td[contains(text(),'Action')]")).getText();
		System.out.println(Action);
		Assert.assertEquals("Action", Action);

		String Update = driver.findElement(By.xpath("/descendant::label[contains(text(),'Update')][1]")).getText();
		System.out.println(Update);
		Assert.assertEquals("Update", Update);

		String UD = driver.findElement(By.xpath("//label[contains(text(),'Update-Delete')]")).getText();
		System.out.println(UD);
		Assert.assertEquals("Update-Delete", UD);

		String Delete = driver.findElement(By.xpath("/descendant::label[contains(text(),'Delete')][2]")).getText();
		System.out.println(Delete);
		Assert.assertEquals("Delete", Delete);

		String Replace = driver.findElement(By.xpath("//label[contains(text(),'Replace')]")).getText();
		System.out.println(Replace);
		Assert.assertEquals("Replace", Replace);

		String Edit = driver.findElement(By.xpath("//label[contains(text(),'Edit')]")).getText();
		System.out.println(Edit);
		Assert.assertEquals("Edit", Edit);

		String Delimeter = driver.findElement(By.xpath("//td[contains(text(),'Delimeter')]")).getText();
		System.out.println(Delimeter);
		Assert.assertEquals("Delimeter", Delimeter);

		List<WebElement> Delimeters = driver.findElements(By.xpath("//select[@id='textdelimiter']"));
		System.out.println("Number of elements:" + Delimeters.size());

		for (int i = 0; i < Delimeters.size(); i++) {
			System.out.println("Available List is ==> : " + Delimeters.get(i).getText());
		}

		String TQ = driver.findElement(By.xpath("//td[contains(text(),'Text qualifier')]")).getText();
		System.out.println(TQ);
		Assert.assertEquals("Text qualifier", TQ);

		List<WebElement> TextQualifier = driver.findElements(By.xpath("//select[@id='textqualifier']"));
		System.out.println("Number of elements:" + TextQualifier.size());

		for (int i = 0; i < TextQualifier.size(); i++) {
			System.out.println("Available List is ==> : " + TextQualifier.get(i).getText());
		}

		String SS = driver.findElement(By.xpath("//p[contains(text(),'Server Settings')]")).getText();
		System.out.println(SS);
		Assert.assertEquals("Server Settings", SS);

		String Username = driver.findElement(By.xpath("//td[contains(text(),'Username')]")).getText();
		System.out.println(Username);
		Assert.assertEquals("Username", Username);

		String Password = driver.findElement(By.xpath("//td[contains(text(),'Password')]")).getText();
		System.out.println(Password);
		Assert.assertEquals("Password", Password);

		String FileName = driver.findElement(By.xpath("//table[@class='FormTable']//td[contains(text(),'File Name')]"))
				.getText();
		System.out.println(FileName);
		Assert.assertEquals("File Name", FileName);

		String Filepath = driver.findElement(By.xpath("//td[contains(text(),'File Path')]")).getText();
		System.out.println(Filepath);
		Assert.assertEquals("File Path", Filepath);

		String SA = driver.findElement(By.xpath("//td[contains(text(),'Server Address')]")).getText();
		System.out.println(SA);
		Assert.assertEquals("Server Address", SA);

		String ST = driver.findElement(By.xpath("//td[contains(text(),'Server Type')]")).getText();
		System.out.println(ST);
		Assert.assertEquals("Server Type", ST);

		List<WebElement> method = driver.findElements(By.xpath("//select[@id='method']"));
		System.out.println("Number of elements:" + method.size());

		for (int i = 0; i < method.size(); i++) {
			System.out.println("Available List is ==> : " + method.get(i).getText());
		}

		String SaN = driver.findElement(By.xpath("//p[contains(text(),'Schedule and Notification')]")).getText();
		System.out.println(SaN);
		Assert.assertEquals("Schedule and Notification", SaN);

		String frequency = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Frequency')]"))
				.getText();
		System.out.println(frequency);
		Assert.assertEquals("Frequency", frequency);

		List<WebElement> F = driver.findElements(By.xpath("//select[@id='frequency']"));
		System.out.println("Number of elements:" + F.size());

		for (int i = 0; i < F.size(); i++) {
			System.out.println("Available List is ==> : " + F.get(i).getText());
		}

		String CS = driver.findElement(By.xpath("//td[contains(text(),'Time (Central Standard Time)')]")).getText();
		System.out.println(CS);
		Assert.assertEquals("Time (Central Standard Time)", CS);

		WebElement Hours = driver.findElement(By.xpath("//li[contains(text(),'Hour')]"));
		/*
		 * System.out.println(Hours); Assert.assertEquals("Hour", Hours);
		 */
		Hours.isDisplayed();

		WebElement Mins = driver.findElement(By.xpath("//li[contains(text(),'Minute')]"));
		/*
		 * System.out.println(Mins); Assert.assertEquals("Minute", Mins);
		 */
		Mins.isDisplayed();

		String EN = driver.findElement(By.xpath("//td[contains(text(),'Email Notification')]")).getText();
		System.out.println(EN);
		Assert.assertEquals("Email Notification", EN);

		String RaU = driver.findElement(By.xpath("//td[contains(text(),'Run as user')]")).getText();
		System.out.println(RaU);
		Assert.assertEquals("Run as user", RaU);

		List<WebElement> RunasUser = driver.findElements(By.xpath("//select[@id='authuser']"));
		System.out.println("Number of elements:" + RunasUser.size());

		for (int i = 0; i < RunasUser.size(); i++) {
			System.out.println("Available List is ==> : " + RunasUser.get(i).getText());
		}

		String Add = driver.findElement(By.xpath("//input[@id='add_sched']")).getText();
		System.out.println(Add);
		// Assert.assertEquals("Add", Add);

		String Clear = driver.findElement(By.xpath("//a[contains(text(),'Clear')]")).getText();
		System.out.println(Clear);
		Assert.assertEquals("Clear", Clear);

		String delete = driver.findElement(By.xpath("//a[contains(text(),'Delete Scheduled Upload')]")).getText();
		System.out.println(delete);
		Assert.assertEquals("Delete Scheduled Upload", delete);

	}

	public void ClickOnRevert() {

		Revert.click();

	}

	public void VerifyRevertTab() {

		String Warning = driver.findElement(By.xpath("//strong[contains(text(),'Warning')]")).getText();
		System.out.println(Warning);
		Assert.assertEquals("Warning", Warning);

		String CRC = driver.findElement(By.xpath("//strong[contains(text(),'Current Record Count')]")).getText();
		System.out.println(CRC);
		Assert.assertEquals("Current Record Count", CRC);

		List<WebElement> TableList = driver.findElements(By.xpath("//div[@id='count_cont']"));
		System.out.println("Number of elements:" + TableList.size());

		for (int i = 0; i < TableList.size(); i++) {
			System.out.println("Available List is ==> : " + TableList.get(i).getText());
		}

		String RTPD = driver.findElement(By.xpath("//a[@id='revert_button']")).getText();
		System.out.println(RTPD);
		Assert.assertEquals("Revert to Previous Database", RTPD);

	}

	public void ClickOnDownloads() {

		Download.click();
	}

	public void VerifyDownloadsData() {

		String SDataT = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Select Data Type')]"))
				.getText();
		System.out.println(SDataT);
		Assert.assertEquals("Select Data Type", SDataT);

		List<WebElement> SDTtable = driver.findElements(By.xpath("//select[@id='download_category_list']"));
		System.out.println("Number of elements:" + SDTtable.size());

		for (int i = 0; i < SDTtable.size(); i++) {
			System.out.println("Available List is ==> : " + SDTtable.get(i).getText());
		}

		String SdocT = driver.findElement(By.xpath("//tr[2]//td[2]//ul[1]//li[1]//label[1]")).getText();
		System.out.println(SdocT);
		Assert.assertTrue(SdocT.contains("Text"));

		String Excel2003 = driver.findElement(By.xpath("//label[contains(text(),'Excel 2003 or older (.xls)')]"))
				.getText();
		System.out.println(Excel2003);
		Assert.assertEquals("Excel 2003 or older (.xls)", Excel2003);

		String Excel = driver.findElement(By.xpath("//tr[2]//td[2]//ul[1]//li[3]//label[1]")).getText();
		System.out.println(Excel);
		Assert.assertTrue(Excel.contains("Excel"));

		String CAD = driver.findElement(By.xpath("//td[contains(text(),'Choose a Delimeter')]")).getText();
		System.out.println(CAD);
		Assert.assertEquals("Choose a Delimeter", CAD);

		String SDT = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Select Data Type')]"))
				.getText();
		System.out.println(SDT);
		Assert.assertEquals("Select Data Type", SDT);

		String Tab = driver.findElement(By.xpath("//label[contains(text(),'Tab')]")).getText();
		System.out.println(Tab);
		Assert.assertEquals("Tab", Tab);

		String Comma = driver.findElement(By.xpath("//label[contains(text(),'Comma')]")).getText();
		System.out.println(Comma);
		Assert.assertEquals("Comma", Comma);

		String Semicolon = driver.findElement(By.xpath("//label[contains(text(),'Semicolon')]")).getText();
		System.out.println(Semicolon);
		Assert.assertEquals("Semicolon", Semicolon);

		String Other = driver.findElement(By.xpath("//label[contains(text(),'Other')]")).getText();
		System.out.println(Other);
		Assert.assertEquals("Other", Other);

		WebElement download = driver.findElement(By.xpath("//input[@id='download_button']"));
		download.isDisplayed();

	}

	public void ClickOnAdmin_Downloads() {

		WebElement Admindownload = driver.findElement(By.xpath("//a[contains(text(),'Admin Download')]"));
		Admindownload.click();

	}

	public void VerifyAdmin_DownloadsData() {

		String SDataT = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Select Data Type')]"))
				.getText();
		System.out.println(SDataT);
		Assert.assertEquals("Select Data Type", SDataT);

		List<WebElement> SDTtable = driver.findElements(By.xpath("//select[@id='download_category_list']"));
		System.out.println("Number of elements:" + SDTtable.size());

		for (int i = 0; i < SDTtable.size(); i++) {
			System.out.println("Available List is ==> : " + SDTtable.get(i).getText());
		}

		String SdocT = driver.findElement(By.xpath("//td[contains(text(),'Select Document Type')]")).getText();
		System.out.println(SdocT);
		Assert.assertTrue(SdocT.contains("Select Document Type"));

		String TextDoc = driver.findElement(By.xpath("//tr[2]//td[2]//ul[1]//li[1]//label[1]")).getText();
		System.out.println(TextDoc);
		Assert.assertTrue(TextDoc.contains("Text"));

		String Excel2003 = driver.findElement(By.xpath("//label[contains(text(),'Excel 2003 or older (.xls)')]"))
				.getText();
		System.out.println(Excel2003);
		Assert.assertEquals("Excel 2003 or older (.xls)", Excel2003);

		String Excel = driver.findElement(By.xpath("//tr[2]//td[2]//ul[1]//li[3]//label[1]")).getText();
		System.out.println(Excel);
		Assert.assertTrue(Excel.contains("Excel"));

		String CAD = driver.findElement(By.xpath("//td[contains(text(),'Choose a Delimeter')]")).getText();
		System.out.println(CAD);
		Assert.assertEquals("Choose a Delimeter", CAD);

		String Tab = driver.findElement(By.xpath("//label[contains(text(),'Tab')]")).getText();
		System.out.println(Tab);
		Assert.assertEquals("Tab", Tab);

		String Comma = driver.findElement(By.xpath("//label[contains(text(),'Comma')]")).getText();
		System.out.println(Comma);
		Assert.assertEquals("Comma", Comma);

		String Semicolon = driver.findElement(By.xpath("//label[contains(text(),'Semicolon')]")).getText();
		System.out.println(Semicolon);
		Assert.assertEquals("Semicolon", Semicolon);

		String Other = driver.findElement(By.xpath("//label[contains(text(),'Other')]")).getText();
		System.out.println(Other);
		Assert.assertEquals("Other", Other);

		WebElement download = driver.findElement(By.xpath("//input[@id='admin_download_button']"));
		download.isDisplayed();

	}

	public void ClickOnHistory() {

		History.click();

	}

	public void Verify_HistoryTabData() {
		// div[@id='job_history_table']

		List<WebElement> HistoryTable = driver.findElements(By.xpath("//div[@id='MainWrap']//tbody//tr"));
		System.out.println("Number of elements:" + HistoryTable.size());

		for (int i = 0; i < HistoryTable.size(); i++) {
			System.out.println("Available List is ==> : " + HistoryTable.get(i).getText());
		}
	}

	public void ClickOnFieldEditor() {

		WebElement FieldEditor = driver.findElement(By.xpath("//a[contains(text(),'Field Editor')]"));
		FieldEditor.click();

	}

	public void Verify_FieldEditorData() {

		String SDT = driver.findElement(By.xpath("//td[contains(text(),'Select Data Type')]")).getText();
		System.out.println(SDT);
		Assert.assertEquals("Select Data Type", SDT);

		List<WebElement> SDTTable = driver.findElements(By.xpath("//select[@id='tables']"));
		System.out.println("Number of elements:" + SDTTable.size());

		for (int i = 0; i < SDTTable.size(); i++) {
			System.out.println("Available List is ==> : " + SDTTable.get(i).getText());
		}

		String SFSE = driver.findElement(By.xpath("//p[contains(text(),'Select a Field to Start Editing')]")).getText();
		System.out.println(SFSE);
		Assert.assertEquals("Select a Field to Start Editing", SFSE);

	}

	public void VerifyFieldEditor_basestorelocatorData() {

		WebElement SDT = driver.findElement(By.xpath("//select[@id='tables']"));
		SDT.click();

		WebElement Product = driver.findElement(By.xpath("//option[contains(text(),'basestorelocator')]"));
		Product.click();
		Product.click();

		String SelectDataType = driver.findElement(By.xpath("//td[contains(text(),'Select Data Type')]")).getText();
		System.out.println(SelectDataType);
		Assert.assertEquals("Select Data Type", SelectDataType);

		String SelectViewType = driver.findElement(By.xpath("//td[contains(text(),'Select View Type')]")).getText();
		System.out.println(SelectViewType);
		// Assert.assertEquals("Select View Type", SelectViewType);

		List<WebElement> SVTTable = driver.findElements(By.xpath("//select[@id='views']"));
		System.out.println("Number of elements:" + SVTTable.size());

		for (int i = 0; i < SVTTable.size(); i++) {
			System.out.println("Available List is ==> : " + SVTTable.get(i).getText());
		}

		String SFSE = driver.findElement(By.xpath("//p[contains(text(),'Select a Field to Start Editing')]")).getText();
		System.out.println(SFSE);
		Assert.assertEquals("Select a Field to Start Editing", SFSE);

		List<WebElement> FieldItems = driver.findElements(By.xpath("//ul[@id='field_items']"));
		System.out.println("Number of elements:" + FieldItems.size());

		for (int i = 0; i < FieldItems.size(); i++) {
			System.out.println("Available List is ==> : " + FieldItems.get(i).getText());
		}

		WebElement Click = driver.findElement(By.xpath("//li[contains(text(),'country')]"));
		Click.click();

	}

	public void VerifyFieldEditor_basestorelocatorDiscription() {

		String Name = driver.findElement(By.xpath("//td[contains(text(),'Name')]")).getText();
		System.out.println(Name);
		Assert.assertEquals("Name", Name);

		String Adjust = driver.findElement(By.xpath("//td[contains(text(),'Adjust')]")).getText();
		System.out.println(Adjust);
		Assert.assertEquals("Adjust", Adjust);

		String Chart = driver.findElement(By.xpath("//td[contains(text(),'Chart')]")).getText();
		System.out.println(Chart);
		Assert.assertEquals("Chart", Chart);

		String Currency = driver.findElement(By.xpath("//td[contains(text(),'Currency')]")).getText();
		System.out.println(Currency);
		Assert.assertEquals("Currency", Currency);

		String Datatype = driver.findElement(By.xpath("//td[contains(text(),'Datatype')]")).getText();
		System.out.println(Datatype);
		Assert.assertEquals("Datatype", Datatype);

		String Display = driver.findElement(By.xpath("//td[contains(text(),'Display')]")).getText();
		System.out.println(Display);
		Assert.assertEquals("Display", Display);

		String Order = driver.findElement(By.xpath("//td[contains(text(),'Order')]")).getText();
		System.out.println(Order);
		Assert.assertEquals("Order", Order);

		String Size = driver.findElement(By.xpath("//td[contains(text(),'Size')]")).getText();
		System.out.println(Size);
		Assert.assertEquals("Size", Size);

		String Visible = driver.findElement(By.xpath("//td[contains(text(),'Visible')]")).getText();
		System.out.println(Visible);
		Assert.assertEquals("Visible", Visible);

		String Dynamic = driver.findElement(By.xpath("//td[contains(text(),'Dynamic')]")).getText();
		System.out.println(Dynamic);
		Assert.assertEquals("Dynamic", Dynamic);

		String Required = driver.findElement(By.xpath("//td[contains(text(),'Required')]")).getText();
		System.out.println(Required);
		Assert.assertEquals("Required", Required);

		String Type = driver.findElement(By.xpath("//form[@id='editor_form']//td[contains(text(),'Type')]")).getText();
		System.out.println(Type);
		Assert.assertEquals("Type", Type);

		String GroupEditable = driver.findElement(By.xpath("//td[contains(text(),'Group Editable')]")).getText();
		System.out.println(GroupEditable);
		Assert.assertEquals("Group Editable", GroupEditable);

		String DataSource = driver.findElement(By.xpath("//td[contains(text(),'Data Source')]")).getText();
		System.out.println(DataSource);
		Assert.assertEquals("Data Source", DataSource);

		String Description = driver.findElement(By.xpath("//td[contains(text(),'Description')]")).getText();
		System.out.println(Description);
		Assert.assertEquals("Description", Description);

		String DV = driver.findElement(By.xpath("//td[contains(text(),'Default Value(s)')]")).getText();
		System.out.println(DV);
		Assert.assertEquals("Default Value(s)", DV);

		String group = driver.findElement(By.xpath("//tr[17]//td[1]")).getText();
		System.out.println(group);
		Assert.assertEquals("Group", group);

	}

	public void VerifyFieldEditor_basestorelocatorDiscriptionDetails() {

		String Name = driver.findElement(By.xpath("//input[@id='form_name']")).getText();
		System.out.println(Name);

		List<WebElement> Adjust = driver.findElements(By.xpath("//select[@name='adjust']"));
		System.out.println("Number of elements:" + Adjust.size());

		for (int i = 0; i < Adjust.size(); i++) {
			System.out.println("Available List is ==> : " + Adjust.get(i).getText());
		}

		List<WebElement> Chart = driver.findElements(By.xpath("//select[@name='chart']"));
		System.out.println("Number of elements:" + Chart.size());

		for (int i = 0; i < Chart.size(); i++) {
			System.out.println("Available List is ==> : " + Chart.get(i).getText());
		}

		List<WebElement> Currency = driver.findElements(By.xpath("//select[@name='currency']"));
		System.out.println("Number of elements:" + Currency.size());

		for (int i = 0; i < Currency.size(); i++) {
			System.out.println("Available List is ==> : " + Currency.get(i).getText());
		}

		List<WebElement> Datatype = driver.findElements(By.xpath("//select[@id='datatype_list']"));
		System.out.println("Number of elements:" + Datatype.size());

		for (int i = 0; i < Datatype.size(); i++) {
			System.out.println("Available List is ==> : " + Datatype.get(i).getText());
		}

		String Display = driver.findElement(By.xpath("//input[@name='display']")).getText();
		System.out.println(Display);

		String Order = driver.findElement(By.xpath("//input[@name='order']")).getText();
		System.out.println(Order);

		String Size = driver.findElement(By.xpath("//input[@name='size']")).getText();
		System.out.println(Size);

		WebDriverWait Visible = new WebDriverWait(driver, 20);
		Visible.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@name='visible']")));

		WebDriverWait Dynamic = new WebDriverWait(driver, 20);
		Dynamic.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@name='dynamic']")));

		WebDriverWait Required = new WebDriverWait(driver, 20);
		Required.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@name='required']")));

		String Type = driver.findElement(By.xpath("//input[@id='form_type']")).getText();
		System.out.println(Type);

		WebDriverWait GroupEditable = new WebDriverWait(driver, 20);
		GroupEditable.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@name='groupeditable']")));

		String DataSource = driver.findElement(By.xpath("//input[@name='datasource']")).getText();
		System.out.println(DataSource);

		String Description = driver.findElement(By.xpath("//input[@name='description']")).getText();
		System.out.println(Description);

		WebElement DV = driver.findElement(By.xpath("//form[@id='editor_form']//a[contains(text(),'Edit')]"));
		DV.isDisplayed();

		List<WebElement> group = driver.findElements(By.xpath("//input[@name='groupname']"));
		System.out.println("Number of elements:" + group.size());

		for (int i = 0; i < group.size(); i++) {
			System.out.println("Available List is ==> : " + group.get(i).getText());
		}

		WebElement Update = driver.findElement(By.xpath("//input[@class='Button marginT-30']"));
		Update.isDisplayed();

	}

	public void GotoFiles_DataCleansing() {

		WebElement DataCleansing = driver.findElement(By.xpath("//li[@id='DataCleansing']//a[@id='NotActiveTab']"));
		DataCleansing.click();
	}

	public void VerifyFiles_DataCleansing() {

		String Start = driver.findElement(By.xpath("//a[contains(text(),'Start')]")).getText();
		System.out.println(Start);
		Assert.assertEquals("Start", Start);

		String FileSetup = driver.findElement(By.xpath("//a[contains(text(),'File Setup')]")).getText();
		System.out.println(FileSetup);
		Assert.assertEquals("File Setup", FileSetup);

		String Options = driver.findElement(By.xpath("//a[contains(text(),'Options')]")).getText();
		System.out.println(Options);
		Assert.assertEquals("Options", Options);

		String Submit = driver.findElement(By.xpath("//a[contains(text(),'Submit')]")).getText();
		System.out.println(Submit);
		Assert.assertEquals("Submit", Submit);

	}

	public void VerifyFiles_DataCleansing_Start() {

		String SFULD = driver.findElement(By.xpath("//p[contains(text(),'Select File or Use Locator Database')]"))
				.getText();
		System.out.println(SFULD);
		Assert.assertEquals("Select File or Use Locator Database", SFULD);

		WebDriverWait CFCheckBox = new WebDriverWait(driver, 20);
		CFCheckBox.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='use_file']")));

		WebDriverWait ChooseFile = new WebDriverWait(driver, 20);
		ChooseFile.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='locfile']")));

		WebDriverWait Use_db = new WebDriverWait(driver, 20);
		Use_db.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='use_db']")));

		WebDriverWait NextStep = new WebDriverWait(driver, 20);
		NextStep.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@id='start_slide_next']")));
	}

	public void VerifyFiles_DataCleansing_FileSetUp() {

		WebElement FileSetup = driver.findElement(By.xpath("//a[contains(text(),'File Setup')]"));
		FileSetup.click();

		String FS = driver.findElement(By.xpath("//a[contains(text(),'File Setup')]")).getText();
		System.out.println(FS);
		Assert.assertTrue(FS.contains("File Setup"));

		WebElement Delimeter = driver.findElement(By.xpath("//td[contains(text(),'Delimiter:')]"));
		System.out.println(Delimeter);
		Delimeter.isDisplayed();

		boolean Tab = driver.findElement(By.xpath("//label[contains(text(),'Tab')]")).isDisplayed();
		System.out.println(Tab);
		// Assert.assertTrue(Tab.contains("Tab"));

		boolean Comma = driver.findElement(By.xpath("//label[contains(text(),'Comma')]")).isDisplayed();
		System.out.println(Comma);
		// Assert.assertEquals("Comma", Comma);

		boolean Semicolon = driver.findElement(By.xpath("//label[contains(text(),'Semicolon')]")).isDisplayed();
		System.out.println(Semicolon);
		// Assert.assertEquals("Semicolon", Semicolon);

		boolean Other = driver.findElement(By.xpath("//label[contains(text(),'Other')]")).isDisplayed();
		System.out.println(Other);
		// Assert.assertEquals("Other", Other);

		String Textqualifier = driver.findElement(By.xpath("//td[contains(text(),'Text qualifier')]")).getText();
		System.out.println(Textqualifier);
		Assert.assertEquals("Text qualifier", Textqualifier);

		List<WebElement> TQ = driver.findElements(By.xpath("//select[@id='textQualifier']"));
		System.out.println("Number of elements:" + TQ.size());

		for (int i = 0; i < TQ.size(); i++) {
			System.out.println("Available List is ==> : " + TQ.get(i).getText());
		}

		String PS = driver.findElement(By.xpath("/descendant::a[contains(text(),'Previous Step')][1]")).getText();
		System.out.println(PS);
		Assert.assertEquals("Previous Step", PS);

		WebDriverWait NextStep = new WebDriverWait(driver, 20);
		NextStep.until(ExpectedConditions.elementToBeClickable(By.xpath(
				"//ul[@class='liInlineBlock marginT-20']//a[@class='carousel-control GrayButton next'][contains(text(),'Next Step')]")));

	}

	public void VerifyFiles_DataCleansing_Options() {

		WebElement Options = driver.findElement(By.xpath("//a[contains(text(),'Options')]"));
		Options.click();

		boolean DataCleansingOptions = driver.findElement(By.xpath("//p[contains(text(),'Data Cleansing Options')]"))
				.isDisplayed();
		System.out.println(DataCleansingOptions);
		// Assert.assertEquals("Data Cleansing Options", DataCleansingOptions);
		// Assert.assertTrue(DataCleansingOptions.contains("Data Cleansing Options"));

		String Validation = driver.findElement(By.xpath("//strong[contains(text(),'Validation')]")).getText();
		System.out.println(Validation);
		Assert.assertEquals("Validation", Validation);

		String AnPC = driver.findElement(By.xpath("//strong[contains(text(),'Address & Phone Cleanse')]")).getText();
		System.out.println(AnPC);
		Assert.assertEquals("Address & Phone Cleanse", AnPC);

		String De_Duplication = driver.findElement(By.xpath("//strong[contains(text(),'De-Duplication')]")).getText();
		System.out.println(De_Duplication);
		Assert.assertEquals("De-Duplication", De_Duplication);

		String GT = driver.findElement(By.xpath("//strong[contains(text(),'Geocode Thresholds')]")).getText();
		System.out.println(GT);
		Assert.assertEquals("Geocode Thresholds", GT);

		String PS = driver.findElement(By.xpath("/descendant::a[contains(text(),'Previous Step')][2]")).getText();
		System.out.println(PS);
		Assert.assertEquals("Previous Step", PS);

		WebDriverWait NextStep = new WebDriverWait(driver, 20);
		NextStep.until(ExpectedConditions.elementToBeClickable(By.xpath(
				"//ul[@class='liInlineBlock marginT-30']//a[@class='carousel-control GrayButton next'][contains(text(),'Next Step')]")));

	}

	public void VerifyFiles_DataCleansing_Submit() {

		WebElement Submit = driver.findElement(By.xpath("//a[contains(text(),'Submit')]"));
		Submit.click();

		boolean SLDC = driver.findElement(By.xpath("//p[contains(text(),'Submit Locations for Data Cleansing')]"))
				.isDisplayed();
		System.out.println(SLDC);
		// Assert.assertTrue(SLDC.contains("Submit Locations for Data Cleansing"));

		boolean SSR = driver.findElement(By.xpath("//label[contains(text(),'Send summary report')]")).isDisplayed();
		System.out.println(SSR);
		// Assert.assertEquals("Send summary report", SSR);

		WebDriverWait SubmitFormCheckbox = new WebDriverWait(driver, 20);
		SubmitFormCheckbox.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='summary_report']")));

		String PS = driver.findElement(By.xpath("/descendant::a[contains(text(),'Previous Step')][3]")).getText();
		System.out.println(PS);
		Assert.assertEquals("Previous Step", PS);

		WebDriverWait SubmitForm = new WebDriverWait(driver, 20);
		SubmitForm.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='submit_form']")));

	}

	public void GotoFiles_DataCleansingHistory() {

		WebElement DCH = driver.findElement(By.xpath("//li[@id='DataCleansingHistory']//a[@id='NotActiveTab']"));
		DCH.click();
	}

	public void VerifyFiles_DataCleansingHistory() throws InterruptedException {

		boolean Notice = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).isDisplayed();
		System.out.println(Notice);
		// Assert.assertEquals("Notice", Notice);

		boolean NRA = driver.findElement(By.xpath("//div[contains(text(),'No records available')]")).isDisplayed();
		System.out.println(NRA);
		// Assert.assertEquals("File Setup", FileSetup);

		boolean Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).isDisplayed();
		System.out.println(Close);
		// Assert.assertEquals("Close", Close);

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();
		Thread.sleep(2000);
	}

	public void GotoFiles_Configuration() {

		WebElement config = driver.findElement(By.xpath("//a[contains(text(),'Configuration')]"));
		config.click();
	}

	public void VerifyFiles_Configuration() throws InterruptedException {

		boolean BHC = driver.findElement(By.xpath("//td[contains(text(),'Business Hours Configuration')]"))
				.isDisplayed();
		System.out.println(BHC);
		// Assert.assertEquals("Notice", Notice);

		boolean ID = driver.findElement(By.xpath("//td[contains(text(),'Initialization')]")).isDisplayed();
		System.out.println(ID);
		// Assert.assertEquals("File Setup", FileSetup);

		boolean EID = driver.findElement(By.xpath("//td[contains(text(),'Each Input')]")).isDisplayed();
		System.out.println(EID);
		// Assert.assertEquals("Close", Close);

		boolean LMC = driver.findElement(By.xpath("//td[contains(text(),'Location Management')]")).isDisplayed();
		System.out.println(LMC);
		// Assert.assertEquals("Close", Close);

	}

	public void VerifyFiles_ConfigurationDetails() throws InterruptedException {

		String Daylist = driver.findElement(By.xpath("//td[contains(text(),'Day List')]")).getText();
		System.out.println(Daylist);
		Assert.assertEquals("Day List", Daylist);

		String Daylist1 = driver.findElement(By.xpath("//input[@id='dayList']")).getText();
		System.out.println(Daylist1);

		/*
		 * boolean LMC =
		 * driver.findElement(By.xpath("//td[contains(text(),'Location Management')]")).
		 * isDisplayed(); System.out.println(LMC);
		 */

		String StartingDay = driver.findElement(By.xpath("//td[contains(text(),'Starting Day:')]")).getText();
		System.out.println(StartingDay);
		Assert.assertEquals("Starting Day:", StartingDay);

		boolean Sunday = driver.findElement(By.xpath("//td[@id='bho_config']//tr[2]//td[2]//label[1]")).isDisplayed();
		System.out.println(Sunday);

		boolean Monday = driver.findElement(By.xpath("//tr[2]//td[2]//label[2]")).isDisplayed();
		System.out.println(Monday);

		String Separators = driver.findElement(By.xpath("//td[contains(text(),'Separators:')]")).getText();
		System.out.println(Separators);
		Assert.assertEquals("Separators:", Separators);

		boolean Day = driver.findElement(By.xpath("//label[contains(text(),'Day:')]")).isDisplayed();
		System.out.println(Day);

		boolean DayRange = driver.findElement(By.xpath("//label[contains(text(),'Day Range:')]")).isDisplayed();
		System.out.println(DayRange);

		boolean TimeRange = driver.findElement(By.xpath("//label[contains(text(),'Time Range:')]")).isDisplayed();
		System.out.println(TimeRange);

		boolean Day_Time = driver.findElement(By.xpath("//label[contains(text(),'Day/Time:')]")).isDisplayed();
		System.out.println(Day_Time);

		boolean Splithours = driver.findElement(By.xpath("//label[contains(text(),'Split Hours:')]")).isDisplayed();
		System.out.println(Splithours);

		String Formats = driver.findElement(By.xpath("//td[contains(text(),'Formats:')]")).getText();
		System.out.println(Formats);
		Assert.assertEquals("Formats:", Formats);

		boolean time = driver.findElement(By.xpath("//tr//tr[4]//td[2]//label[1]")).isDisplayed();
		System.out.println(time);

		boolean Closed = driver.findElement(By.xpath("//label[contains(text(),'Closed:')]")).isDisplayed();
		System.out.println(Closed);

		boolean opendaily = driver.findElement(By.xpath("//label[contains(text(),'Open Daily:')]")).isDisplayed();
		System.out.println(opendaily);

		boolean Seven_24 = driver.findElement(By.xpath("//label[contains(text(),'Open 7x24:')]")).isDisplayed();
		System.out.println(Seven_24);

		boolean open24hours = driver.findElement(By.xpath("//label[contains(text(),'Open 24 Hours:')]")).isDisplayed();
		System.out.println(open24hours);

		String Features = driver.findElement(By.xpath("//td[contains(text(),'Features:')]")).getText();
		System.out.println(Features);
		Assert.assertEquals("Features:", Features);

		boolean DFH = driver.findElement(By.xpath("//label[contains(text(),'Days Follow Hours:')]")).isDisplayed();
		System.out.println(DFH);

		boolean RHF = driver.findElement(By.xpath("//label[contains(text(),'Reformat Hours Fields:')]")).isDisplayed();
		System.out.println(RHF);

		boolean IF = driver.findElement(By.xpath("//label[contains(text(),'Input in 24h Format:')]")).isDisplayed();
		System.out.println(IF);

		boolean STH = driver.findElement(By.xpath("//label[contains(text(),'Split time hack:')]")).isDisplayed();
		System.out.println(STH);

		boolean Save = driver.findElement(By.xpath("//input[@id='save']")).isDisplayed();
		System.out.println(Save);

	}

	public void GotoFiles_FieldGroupEditor() {

		WebElement FGE = driver.findElement(By.xpath("//a[contains(text(),'Field Group Editor')]"));
		FGE.click();
	}

	public void VerifyFiles_FieldGroupEditor() throws InterruptedException {

		String selectdatatype = driver.findElement(By.xpath("//td[contains(text(),'Select Data Type')]")).getText();
		System.out.println(selectdatatype);
		Assert.assertEquals("Select Data Type", selectdatatype);

		String selectviewtype = driver.findElement(By.xpath("//td[contains(text(),'Select View Type')]")).getText();
		System.out.println(selectviewtype);
		Assert.assertEquals("Select View Type", selectviewtype);

		boolean Selectgroup = driver.findElement(By.xpath("//h2[@class='marginT-30']")).isDisplayed();
		System.out.println(Selectgroup);
		// Assert.assertEquals("File Setup", FileSetup);

		boolean Addgroupname = driver.findElement(By.xpath("//li[@class='groupname add']")).isDisplayed();
		System.out.println(Addgroupname);
		// Assert.assertEquals("Close", Close);

		WebElement groupname = driver.findElement(By.xpath("//li[@class='groupname add']"));
		groupname.click();

	}

	public void VerifyFiles_FieldGroupEditor_GroupNameDiscription() throws InterruptedException {

		WebElement groupname = driver.findElement(By.xpath("//li[@class='groupname add']"));
		groupname.click();

		String Name = driver.findElement(By.xpath("//td[contains(text(),'Name:')]")).getText();
		System.out.println(Name);
		Assert.assertEquals("Name:", Name);

		String Editable = driver.findElement(By.xpath("//td[contains(text(),'Editable:')]")).getText();
		System.out.println(Editable);
		Assert.assertEquals("Editable:", Editable);

		String Order = driver.findElement(By.xpath("//td[contains(text(),'Order:')]")).getText();
		System.out.println(Order);
		Assert.assertEquals("Order:", Order);

		String Type = driver.findElement(By.xpath("//td[contains(text(),'Type:')]")).getText();
		System.out.println(Type);
		Assert.assertEquals("Type:", Type);

		String Fields = driver.findElement(By.xpath("//p[contains(text(),'Fields')]")).getText();
		System.out.println(Fields);
		Assert.assertEquals("Fields", Fields);

		List<WebElement> type = driver.findElements(By.xpath("//select[@name='datatype']"));
		System.out.println("Number of elements:" + type.size());

		for (int i = 0; i < type.size(); i++) {
			System.out.println("Available List is ==> : " + type.get(i).getText());
		}

		List<WebElement> Discriptions = driver.findElements(By.xpath("//select[@id='add_field_select']"));
		System.out.println("Number of elements:" + Discriptions.size());

		for (int i = 0; i < Discriptions.size(); i++) {
			System.out.println("Available List is ==> : " + Discriptions.get(i).getText());
		}

		boolean Save = driver.findElement(By.xpath("//body//input[2]")).isDisplayed();
		System.out.println(Save);

		boolean Cancel = driver.findElement(By.xpath("//body//input[3]")).isDisplayed();
		System.out.println(Cancel);

	}

	public void GoToSitesTab() {

		Sites.click();

	}

	public void VerifySitesTab() {

		WebElement AddTemplate = driver.findElement(By.xpath("//input[@id='add_template']"));
		AddTemplate.isDisplayed();

		// Verify Header Option :::>>>>>>>
		List<WebElement> TableHeader = driver.findElements(By.xpath("//*[@id='template_header_row']/tr/th"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		// Verify Table "Row" Contents :::>>>>>>>
		List<WebElement> TableRows = driver.findElements(By.xpath("//tr[starts-with(@id,'row_-')]"));
		System.out.println("Number of elements:" + TableRows.size());

		for (int i = 0; i < TableRows.size(); i++) {
			System.out.println("Available List is ==> : " + TableRows.get(i).getText());
		}

	}

	public void GoToSites_Config() {

		Sites_Config.click();

	}

	public void VerifySites_ConfigTab() throws InterruptedException {

		WebElement ImageManager = driver.findElement(By.xpath("//input[@id='gallery_manager']"));
		ImageManager.isDisplayed();

		WebElement Preview = driver.findElement(By.xpath("//input[@id='preview']"));
		Preview.isDisplayed();

		WebElement Preview_NewWindow = driver.findElement(By.xpath("//input[@id='preview_new_window']"));
		Preview_NewWindow.isDisplayed();

		String SelectTemplate = driver.findElement(By.xpath("//li[@class='ToolbarInstruction']")).getText();
		System.out.println(SelectTemplate);
		Assert.assertTrue(SelectTemplate.contains("Select a Template:"));

		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

		List<WebElement> TemplateList = driver
				.findElements(By.xpath("//div[@id='locations_chzn']//ul[@class='chzn-results']"));
		System.out.println("Number of elements:" + TemplateList.size());

		for (int i = 0; i < TemplateList.size(); i++) {
			System.out.println("Available List is ==> : " + TemplateList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

	}

	public void GoToSites_ConfigAdmin() {

		Sites_ConfigAdmin.click();

	}

	public void VerifySites_ConfigAdminTab() throws InterruptedException {

		WebElement GlobalTemplate = driver.findElement(By.xpath("//li[2]//label[1]"));
		GlobalTemplate.isDisplayed();

		WebElement LocalTemplate = driver.findElement(By.xpath("//li[3]//label[1]"));
		LocalTemplate.isDisplayed();

		WebElement ImageManager = driver.findElement(By.xpath("//input[@id='gallery_manager']"));
		ImageManager.isDisplayed();

		WebElement AssetManager = driver.findElement(By.xpath("//input[@id='asset_manager']"));
		AssetManager.isDisplayed();

		WebElement AddAnotherTab = driver
				.findElement(By.xpath("//div[@id='table_body']//input[@value='Add another tab']"));
		AddAnotherTab.isDisplayed();

		WebElement AddElement = driver.findElement(By.xpath("//div[@id='table_body']//input[@value='Add an element']"));
		AddElement.isDisplayed();

		// Verify Header Option :::>>>>>>>
		List<WebElement> TableHeader = driver.findElements(By.xpath("//div[@id='table_header_row']//span"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		// Verify location Landing page dropdown Option :::>>>>>>>
		driver.findElement(By.xpath("//select[@id='template_types']")).click();

		List<WebElement> LLP = driver.findElements(By.xpath("//select[@id='template_types']"));
		System.out.println("Number of elements:" + LLP.size());

		for (int i = 0; i < LLP.size(); i++) {
			System.out.println("Available List is ==> : " + LLP.get(i).getText());
		}
		driver.findElement(By.xpath("//select[@id='template_types']")).click();

		// Verify locator Option :::>>>>>>>
		driver.findElement(By.xpath("//select[@id='template_files']")).click();

		List<WebElement> TempFiles = driver.findElements(By.xpath("//li[@id='template_files_div']"));
		System.out.println("Number of elements:" + TempFiles.size());

		for (int i = 0; i < TempFiles.size(); i++) {
			System.out.println("Available List is ==> : " + TempFiles.get(i).getText());
		}
		driver.findElement(By.xpath("//select[@id='template_files']")).click();
	}

	public void VerifySites_ConfigAdmin_AddAnotherTab() throws InterruptedException {

		WebElement AddAnotherTab = driver
				.findElement(By.xpath("//div[@id='table_body']//input[@value='Add another tab']"));
		AddAnotherTab.click();

		Thread.sleep(2000);
		boolean Notice = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).isDisplayed();
		System.out.println(Notice);
		// Assert.assertEquals("Notice", Notice);

		boolean Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).isDisplayed();
		System.out.println(Close);
		// Assert.assertEquals("Close", Close);

		String Title = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Title')]"))
				.getText();
		System.out.println(Title);
		Assert.assertTrue(Title.contains("Title"));

		String Order = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Order')]"))
				.getText();
		System.out.println(Order);
		Assert.assertTrue(Order.contains("Order"));

		String Active = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Active')]"))
				.getText();
		System.out.println(Active);
		Assert.assertTrue(Active.contains("Active"));

		String RequiredContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Required Content')]"))
				.getText();
		System.out.println(RequiredContent);
		Assert.assertTrue(RequiredContent.contains("Required Content"));

		String DefaultContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Default Content')]"))
				.getText();
		System.out.println(DefaultContent);
		Assert.assertTrue(DefaultContent.contains("Default Content"));

		String ContaintTransformation = driver
				.findElement(
						By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Content Transformation')]"))
				.getText();
		System.out.println(ContaintTransformation);
		Assert.assertTrue(ContaintTransformation.contains("Content Transformation"));

		String HTMLContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'HTML Content')]"))
				.getText();
		System.out.println(HTMLContent);
		Assert.assertTrue(HTMLContent.contains("HTML Content"));

		boolean DetailForm = driver.findElement(By.xpath("//div[@id='lightwindow']//tr[10]//td[1]")).isDisplayed();
		System.out.println(DetailForm);

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();
		Thread.sleep(2000);

	}

	public void VerifySites_ConfigAdmin_AddAnElementTab() throws InterruptedException {

		WebElement AddAnElement = driver
				.findElement(By.xpath("//div[@id='table_body']//input[@value='Add an element']"));
		AddAnElement.click();

		String ElementType = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Element Type')]"))
				.getText();
		System.out.println(ElementType);
		Assert.assertTrue(ElementType.contains("Element Type"));

		String ParentTab = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Parent Tab')]"))
				.getText();
		System.out.println(ParentTab);
		Assert.assertTrue(ParentTab.contains("Parent Tab"));

		String Title = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Title')]"))
				.getText();
		System.out.println(Title);
		Assert.assertTrue(Title.contains("Title"));

		String Order = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Order')]"))
				.getText();
		System.out.println(Order);
		Assert.assertTrue(Order.contains("Order"));

		String Active = driver.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Active')]"))
				.getText();
		System.out.println(Active);
		Assert.assertTrue(Active.contains("Active"));

		String RequiredContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Required Content')]"))
				.getText();
		System.out.println(RequiredContent);
		Assert.assertTrue(RequiredContent.contains("Required Content"));

		String DefaultContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Default Content')]"))
				.getText();
		System.out.println(DefaultContent);
		Assert.assertTrue(DefaultContent.contains("Default Content"));

		String ContaintTransformation = driver
				.findElement(
						By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'Content Transformation')]"))
				.getText();
		System.out.println(ContaintTransformation);
		Assert.assertTrue(ContaintTransformation.contains("Content Transformation"));

		String HTMLContent = driver
				.findElement(By.xpath("//div[@id='lightwindow_contents']//td[contains(text(),'HTML Content')]"))
				.getText();
		System.out.println(HTMLContent);
		Assert.assertTrue(HTMLContent.contains("HTML Content"));

		boolean DetailForm = driver.findElement(By.xpath("//div[@id='lightwindow']//tr[10]//td[1]")).isDisplayed();
		System.out.println(DetailForm);

		driver.findElement(By.xpath("//option[contains(text(),'Custom content object')]")).click();

		List<WebElement> ContentList = driver
				.findElements(By.xpath("//span[@id='lightwindow_cache_data']//select[@id='contenttypes']"));
		System.out.println("Number of elements:" + ContentList.size());

		for (int i = 0; i < ContentList.size(); i++) {
			System.out.println("Available List is ==> : " + ContentList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//option[contains(text(),'Custom content object')]")).click();

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();
		Thread.sleep(2000);

	}

	public void GoToSites_CouponsTab() {

		Sites_Coupons.click();

	}

	public void VerifySites_CouponsTab() throws InterruptedException {

		String SelectLocation = driver.findElement(By.xpath("//li[contains(text(),'Select a Location')]")).getText();
		System.out.println(SelectLocation);
		Assert.assertTrue(SelectLocation.contains("Select a Location"));

		WebElement ImageManager = driver.findElement(By.xpath("//input[@id='image_manager']"));
		ImageManager.isDisplayed();

		WebElement AddNewCoupon = driver.findElement(By.xpath("//input[@id='add_coupon']"));
		AddNewCoupon.isDisplayed();

		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

		List<WebElement> TemplateList = driver
				.findElements(By.xpath("//div[@id='locations_chzn']//ul[@class='chzn-results']"));
		System.out.println("Number of elements:" + TemplateList.size());

		for (int i = 0; i < TemplateList.size(); i++) {
			System.out.println("Available List is ==> : " + TemplateList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

		// Verify Table Header ::>>>>
		List<WebElement> TableHeader = driver.findElements(By.xpath("//div[@id='coupon_table']//span"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		WebElement Preview_25 = driver.findElement(By.xpath("//input[@id='prev_page']"));
		Preview_25.isDisplayed();

		WebElement Next_25 = driver.findElement(By.xpath("//input[@id='next_page']"));
		Next_25.isDisplayed();

		WebElement Show = driver.findElement(By.xpath("//li[contains(text(),'Show')]"));
		Show.isDisplayed();

	}

	public void GoToSites_EventsTab() {

		Sites_Events.click();

	}

	public void VerifySites_EventsTab() throws InterruptedException {

		String SelectLocation = driver.findElement(By.xpath("//li[contains(text(),'Select a Location')]")).getText();
		System.out.println(SelectLocation);
		Assert.assertTrue(SelectLocation.contains("Select a Location"));

		WebElement ImageManager = driver.findElement(By.xpath("//input[@id='image_manager']"));
		ImageManager.isDisplayed();

		WebElement AddNewImage = driver.findElement(By.xpath("//input[@id='add_event']"));
		AddNewImage.isDisplayed();

		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

		List<WebElement> TemplateList = driver
				.findElements(By.xpath("//div[@id='locations_chzn']//ul[@class='chzn-results']"));
		System.out.println("Number of elements:" + TemplateList.size());

		for (int i = 0; i < TemplateList.size(); i++) {
			System.out.println("Available List is ==> : " + TemplateList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//span[contains(text(),'1 - GeoStix (1500 W-Altamont-UT)')]")).click();

		// Verify Table Header ::>>>>
		List<WebElement> TableHeader = driver.findElements(By.xpath("//div[@id='coupon_table']//span"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		WebElement Preview_25 = driver.findElement(By.xpath("//input[@id='prev_page']"));
		Preview_25.isDisplayed();

		WebElement Next_25 = driver.findElement(By.xpath("//input[@id='next_page']"));
		Next_25.isDisplayed();

		WebElement Show = driver.findElement(By.xpath("//li[contains(text(),'Show')]"));
		Show.isDisplayed();

	}

	public void GoToSites_LocatorBuilderTab() {

		Sites_LocatorBuilder.click();

	}

	public void VerifySites_LocatorBuilderTab() throws InterruptedException {

		String LocatorBuilder = driver.findElement(By.xpath("//h1[contains(text(),'Locator Builder')]")).getText();
		System.out.println(LocatorBuilder);
		Assert.assertTrue(LocatorBuilder.contains("Locator Builder"));

		WebElement SelectLayout = driver.findElement(By.xpath("//li[contains(text(),'Select Layout')]"));
		SelectLayout.isDisplayed();

		WebElement SelectColor = driver.findElement(By.xpath("//li[contains(text(),'Select Color')]"));
		SelectColor.isDisplayed();

		WebElement LocatorWidth = driver.findElement(By.xpath("//li[contains(text(),'Locator Width')]"));
		LocatorWidth.isDisplayed();

		WebElement LocatorHeight = driver.findElement(By.xpath("//li[contains(text(),'Locator Height')]"));
		LocatorHeight.isDisplayed();

		WebElement MaximumSearchRadius = driver.findElement(By.xpath("//li[contains(text(),'Maximum Search Radius')]"));
		MaximumSearchRadius.isDisplayed();

		WebElement MaximumSearchResults = driver
				.findElement(By.xpath("//li[contains(text(),'Maximum Search Results')]"));
		MaximumSearchResults.isDisplayed();

		WebElement GenerateBtn = driver.findElement(By.xpath("//input[@class='orange-button go-button']"));
		GenerateBtn.isDisplayed();

		String HTMLContentText = driver.findElement(By.xpath("//h1[contains(text(),'Paste HTML to embed in website')]"))
				.getText();
		System.out.println(HTMLContentText);
		Assert.assertTrue(HTMLContentText.contains("Paste HTML to embed in website"));

		WebElement HTMLTextArea = driver.findElement(By.xpath("//textarea[@id='preview_code']"));
		HTMLTextArea.isDisplayed();

		WebElement PreviewBox = driver.findElement(By.xpath("//h1[contains(text(),'Preview Box')]"));
		PreviewBox.isDisplayed();

	}

	public void GoToSites_SnapChatTab() {

		Sites_Snapchat.click();

	}

	public void VerifySites_SnapChatTab() throws InterruptedException {

		Thread.sleep(3500);
		String Snap_Comment = driver.findElement(By.xpath(
				"//h3[contains(text(),'This account or one or more of its child accounts have not been enabled for Snapchat quotes.')]"))
				.getText();
		System.out.println(Snap_Comment);
		Assert.assertTrue(Snap_Comment.contains(
				"This account or one or more of its child accounts have not been enabled for Snapchat quotes."));

	}

	public void GoToClaiming() {

		Claiming.click();

	}

	public void VerifyClaiming_ColumnMapTab() throws InterruptedException {

		Thread.sleep(1000);
		WebElement ColumnMap = driver.findElement(By.xpath("//a[contains(text(),'Column Map')]"));
		ColumnMap.click();
		Thread.sleep(2000);

		String columnMap = driver.findElement(By.xpath("//a[contains(text(),'Column Map')]")).getText();
		System.out.println(columnMap);
		Assert.assertTrue(columnMap.contains("Column Map"));

		List<WebElement> PublisherList = driver.findElements(By.xpath("//select[@id='distributor']"));
		System.out.println("Number of elements:" + PublisherList.size());

		for (int i = 0; i < PublisherList.size(); i++) {
			System.out.println("Available List is ==> : " + PublisherList.get(i).getText());
		}

		WebElement ChangeDistributer = driver.findElement(By.xpath("//input[@id='switch_distributor']"));
		ChangeDistributer.isDisplayed();

		WebElement SaveChanges = driver.findElement(By.xpath("//input[@id='save']"));
		SaveChanges.isDisplayed();

		WebElement Delete = driver.findElement(By.xpath("//a[@id='delete_col']"));
		Delete.isDisplayed();

		String PublisherDatabase = driver
				.findElement(By.xpath("//p[contains(text(),'Publisher Database Filter Override')]")).getText();
		System.out.println(PublisherDatabase);
		Assert.assertTrue(PublisherDatabase.contains("Publisher Database Filter Override"));

		WebElement RunGlobalFilter = driver.findElement(By.xpath("//label[contains(text(),'Run Global Filter')]"));
		RunGlobalFilter.isDisplayed();

		WebElement RunSelectedLocation = driver
				.findElement(By.xpath("//label[contains(text(),'Run Selected Locations')]"));
		RunSelectedLocation.isDisplayed();

		WebElement Filter_Edit = driver.findElement(By.xpath("//a[@id='edit_filter']"));
		Filter_Edit.isDisplayed();

		WebElement PublisherColumn = driver.findElement(By.xpath("//p[contains(text(),'Publisher Columns')]"));
		PublisherColumn.isDisplayed();

		WebElement UnusedColumn = driver.findElement(By.xpath("//p[contains(text(),'Unused Columns')]"));
		UnusedColumn.isDisplayed();
	}

	public void VerifyClaiming_ColumnMap_PopUPFormTab() throws InterruptedException {

		WebElement FormTitle = driver
				.findElement(By.xpath("//p[contains(text(),'Edit formula, comment, or add new column')]"));
		FormTitle.isDisplayed();

		WebElement ColumnName = driver.findElement(By.xpath("//strong[contains(text(),'Column Name')]"));
		ColumnName.isDisplayed();

		WebElement addNewColumn = driver.findElement(By.xpath("//a[@id='addNewColumn']"));
		addNewColumn.isDisplayed();

		WebElement Formula = driver.findElement(By.xpath("//strong[contains(text(),'Formula:')]"));
		Formula.isDisplayed();

		WebElement Comment = driver.findElement(By.xpath("//strong[contains(text(),'Comment')]"));
		Comment.isDisplayed();

		WebElement SaveMap = driver.findElement(By.xpath("//input[@id='update_map']"));
		SaveMap.isDisplayed();
	}

	public void GoToClaiming_OnDemand() {

		Claiming_OnDemand.click();

	}

	public void VerifyClaiming_OnDemandTab() throws InterruptedException {

		Thread.sleep(2000);

		String OnDemand = driver.findElement(By.xpath("//a[contains(text(),'On Demand')]")).getText();
		System.out.println(OnDemand);
		Assert.assertTrue(OnDemand.contains("On Demand"));

		WebElement Destination = driver.findElement(By.xpath("//td[contains(text(),'Destination')]"));
		Destination.isDisplayed();

		List<WebElement> PublisherList = driver.findElements(By.xpath("//select[@id='distributor']"));
		System.out.println("Number of elements:" + PublisherList.size());

		for (int i = 0; i < PublisherList.size(); i++) {
			System.out.println("Available List is ==> : " + PublisherList.get(i).getText());
		}

		WebElement GenerateTestFile_CheckBox = driver.findElement(By.xpath("//input[@id='test']"));
		GenerateTestFile_CheckBox.isDisplayed();

		WebElement OnlyClientKeys = driver.findElement(By.xpath("//td[contains(text(),'Only Client Keys:')]"));
		OnlyClientKeys.isDisplayed();

		WebElement OnlyClientKeys_TextBox = driver.findElement(By.xpath("//textarea[@id='onlyclientkeys']"));
		OnlyClientKeys_TextBox.isDisplayed();

		WebElement LDSCode = driver.findElement(By.xpath("//td[contains(text(),'Test LDS Code:')]"));
		LDSCode.isDisplayed();

		WebElement LDSCode_TextBox = driver.findElement(By.xpath("//textarea[@id='testlds']"));
		LDSCode_TextBox.isDisplayed();

		WebElement GenerateFile = driver.findElement(By.xpath("//input[@id='add']"));
		GenerateFile.isDisplayed();

		WebElement ViewSample = driver.findElement(By.xpath("//a[@id='view_file']"));
		ViewSample.isDisplayed();

	}

	public void GoToClaiming_Scheduled() {

		Claiming_Scheduled.click();

	}

	public void VerifyClaiming_ScheduledTab() throws InterruptedException {

		Thread.sleep(1500);

		String ActiveUploadSchedules = driver.findElement(By.xpath("//p[contains(text(),'Active Upload Schedules')]"))
				.getText();
		System.out.println(ActiveUploadSchedules);
		Assert.assertTrue(ActiveUploadSchedules.contains("Active Upload Schedules"));

		WebElement Distributor = driver.findElement(By.xpath("//td[@class='sched_name']"));
		Distributor.isDisplayed();

		WebElement Time = driver.findElement(By.xpath("//td[@class='sched_time']"));
		Time.isDisplayed();

		WebElement Frequency = driver.findElement(By.xpath("//td[@class='sched_freq']"));
		Frequency.isDisplayed();

		String PostConfig = driver.findElement(By.xpath("//p[contains(text(),'Post Configuration')]")).getText();
		System.out.println(PostConfig);
		Assert.assertTrue(PostConfig.contains("Post Configuration"));

		WebElement destination = driver.findElement(By.xpath("//td[contains(text(),'Destination')]"));
		destination.isDisplayed();

		List<WebElement> distributor = driver.findElements(By.xpath("//select[@id='distributor']"));
		System.out.println("Number of elements:" + distributor.size());

		for (int i = 0; i < distributor.size(); i++) {
			System.out.println("Available List is ==> : " + distributor.get(i).getText());
		}

		String ScheduleNotification = driver.findElement(By.xpath("//p[@class='StepText ScheduledItem']")).getText();
		System.out.println(ScheduleNotification);
		Assert.assertTrue(ScheduleNotification.contains("Schedule and Notifications"));

		WebElement Frequ = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Frequency')]"));
		Frequ.isDisplayed();

		List<WebElement> FrequencyList = driver.findElements(By.xpath("//select[@id='frequency']"));
		System.out.println("Number of elements:" + FrequencyList.size());

		for (int i = 0; i < FrequencyList.size(); i++) {
			System.out.println("Available List is ==> : " + FrequencyList.get(i).getText());
		}

		WebElement time = driver.findElement(By.xpath("//td[contains(text(),'Time (Central Standard Time)')]"));
		time.isDisplayed();

		WebElement Hours = driver.findElement(By.xpath("//li[contains(text(),'Hour')]"));
		Hours.isDisplayed();

		WebElement Minutes = driver.findElement(By.xpath("//li[contains(text(),'Minute')]"));
		Minutes.isDisplayed();

		WebElement Notifications = driver.findElement(By.xpath("//td[contains(text(),'Notification')]"));
		Notifications.isDisplayed();

		WebElement Add = driver.findElement(By.xpath("//input[@id='add_sched']"));
		Add.isDisplayed();

		WebElement Delete = driver.findElement(By.xpath("//a[@class='GrayButton']"));
		Delete.isDisplayed();

		WebElement Clear = driver.findElement(By.xpath("//a[@class='warning-button']"));
		Clear.isDisplayed();

	}

	public void GoToClaiming_History() {

		Claiming_History.click();

	}

	public void VerifyClaiming_HistoryTab() throws InterruptedException {

		Thread.sleep(2000);
		/*
		 * boolean Notice =
		 * driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).
		 * isDisplayed(); System.out.println(Notice);
		 * 
		 * boolean Close =
		 * driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).
		 * isDisplayed(); System.out.println(Close);
		 * 
		 * Thread.sleep(2000); WebElement close =
		 * driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		 * close.click();
		 */
		List<WebElement> TableHeader = driver
				.findElements(By.xpath("//div[@id='job_history_table']//table[@id='collection_ldshistory']//tr//th"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		Thread.sleep(2000);
		List<WebElement> TableContent = driver
				.findElements(By.xpath("//div[@id='job_history_table']//table[@id='collection_ldshistory']//tr//td"));
		System.out.println("Number of elements:" + TableContent.size());

		for (int i = 0; i < TableContent.size(); i++) {
			System.out.println("Available List is ==> : " + TableContent.get(i).getText());
		}

	}

	public void GoToClaiming_Config() {

		Claiming_Config.click();

	}

	public void VerifyClaiming_ConfigurationTab() throws InterruptedException {

		Thread.sleep(2000);
		boolean GlobalDatabaseFilter = driver.findElement(By.xpath("//td[contains(text(),'Global Database Filter')]"))
				.isDisplayed();
		System.out.println(GlobalDatabaseFilter);

		boolean RunAllLocation = driver.findElement(By.xpath("//label[contains(text(),'Run All Locations')]"))
				.isDisplayed();
		System.out.println(RunAllLocation);

		boolean RunSelectedLocation = driver.findElement(By.xpath("//label[@class='marginR-10']")).isDisplayed();
		System.out.println(RunSelectedLocation);

		boolean GlobalDirective = driver.findElement(By.xpath("//td[contains(text(),'Global directives')]"))
				.isDisplayed();
		System.out.println(GlobalDirective);

		boolean PrelocationDirectives = driver.findElement(By.xpath("//td[contains(text(),'Per-Location directives')]"))
				.isDisplayed();
		System.out.println(PrelocationDirectives);

		boolean PrelocationDirectivesDetails = driver.findElement(By.xpath("//textarea[@id='client_directives']"))
				.isDisplayed();
		System.out.println(PrelocationDirectivesDetails);

		boolean Save = driver.findElement(By.xpath("//input[@id='save']")).isDisplayed();
		System.out.println(Save);

		Thread.sleep(2000);

	}

	public void GoToClaiming_ImportData() {

		Claiming_ImportData.click();

	}

	public void VerifyClaiming_ImportDataTab() throws InterruptedException {

		Thread.sleep(2000);
		boolean UploadFiles = driver.findElement(By.xpath("//td[contains(text(),'Upload File')]")).isDisplayed();
		System.out.println(UploadFiles);

		WebElement Filetype = driver.findElement(By.xpath("//td[contains(text(),'File Type')]"));
		Filetype.isDisplayed();

		WebElement Claiming411 = driver.findElement(By.xpath("//label[contains(text(),'411 Claiming')]"));
		Claiming411.isDisplayed();

		WebElement Acxiom = driver.findElement(By.xpath("//label[contains(text(),'Acxiom')]"));
		Acxiom.isDisplayed();

		WebElement CitySquareClaiming = driver
				.findElement(By.xpath("//label[contains(text(),'Citysquares Claiming')]"));
		CitySquareClaiming.isDisplayed();

		WebElement ClientKeyrename = driver.findElement(By.xpath("//label[contains(text(),'Clientkey Rename')]"));
		ClientKeyrename.isDisplayed();

		WebElement DataOverrides = driver.findElement(By.xpath("//label[contains(text(),'Data Overrides')]"));
		DataOverrides.isDisplayed();

		WebElement FacebookClaiming = driver.findElement(By.xpath("//label[contains(text(),'Facebook Claim')]"));
		FacebookClaiming.isDisplayed();

		WebElement FaceBookIds = driver.findElement(By.xpath("//label[contains(text(),'Facebook IDs')]"));
		FaceBookIds.isDisplayed();

		WebElement FoursquareClaiming = driver.findElement(By.xpath("//label[contains(text(),'Foursquare Claiming')]"));
		FoursquareClaiming.isDisplayed();

		WebElement FSQDups = driver.findElement(By.xpath("//label[contains(text(),'FSQ Dups')]"));
		FSQDups.isDisplayed();

		WebElement GMBAdd = driver.findElement(By.xpath("//label[contains(text(),'GMB Add')]"));
		GMBAdd.isDisplayed();

		WebElement GMBDelete = driver.findElement(By.xpath("//label[contains(text(),'GMB Delete')]"));
		GMBDelete.isDisplayed();

		WebElement HotFrogClaiming = driver.findElement(By.xpath("//label[contains(text(),'Hotfrog Claiming')]"));
		HotFrogClaiming.isDisplayed();

		WebElement InfoGroup = driver.findElement(By.xpath("//label[contains(text(),'Infogroup')]"));
		InfoGroup.isDisplayed();

		WebElement JudysBookClaiming = driver.findElement(By.xpath("//label[contains(text(),'Judysbook Claiming')]"));
		JudysBookClaiming.isDisplayed();

		WebElement Localeze = driver.findElement(By.xpath("//label[contains(text(),'Localeze')]"));
		Localeze.isDisplayed();

		WebElement MirchantCircleClaiming = driver
				.findElement(By.xpath("//label[contains(text(),'MerchantCircle Claiming')]"));
		MirchantCircleClaiming.isDisplayed();

		WebElement MyLocalServicesClaiming = driver
				.findElement(By.xpath("//label[contains(text(),'MyLocalServices Claiming')]"));
		MyLocalServicesClaiming.isDisplayed();

		WebElement ShowmeLocalClaiming = driver
				.findElement(By.xpath("//label[contains(text(),'ShowMeLocal Claiming')]"));
		ShowmeLocalClaiming.isDisplayed();

		WebElement YalwaClaiming = driver.findElement(By.xpath("//label[contains(text(),'Yalwa Claiming')]"));
		YalwaClaiming.isDisplayed();

		WebElement YelpClaiming = driver.findElement(By.xpath("//label[contains(text(),'Yelp Claiming')]"));
		YelpClaiming.isDisplayed();

		WebElement YelpCreate = driver.findElement(By.xpath("//label[contains(text(),'Yelp Create')]"));
		YelpCreate.isDisplayed();

		WebElement InfoBel = driver.findElement(By.xpath("//label[contains(text(),'Infobel')]"));
		InfoBel.isDisplayed();

		WebElement Cylex = driver.findElement(By.xpath("//label[contains(text(),'Cylex')]"));
		Cylex.isDisplayed();

		WebElement MarchantCircleduplicates = driver
				.findElement(By.xpath("//label[contains(text(),'MerchantCircle Duplicates')]"));
		MarchantCircleduplicates.isDisplayed();

		WebElement ImportFile = driver.findElement(By.xpath("//input[@id='import_button']"));
		ImportFile.isDisplayed();

	}

	public void GoToClaiming_ImportHistory() {

		Claiming_ImportHistory.click();

	}

	public void VerifyClaiming_ImportHistoryTab() throws InterruptedException {

		Thread.sleep(2000);
		boolean Notice = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).isDisplayed();
		System.out.println(Notice);

		boolean Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).isDisplayed();
		System.out.println(Close);

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();
		Thread.sleep(2000);

	}

	public void GoToClaiming_DataOverride() {

		Claiming_DataOverride.click();

	}

	public void VerifyClaiming_DataOverrideTab() throws InterruptedException {

		Thread.sleep(2000);
		String DataoverrideForm = driver.findElement(By.xpath("//h1[contains(text(),'Data Override Form')]")).getText();
		System.out.println(DataoverrideForm);
		Assert.assertTrue(DataoverrideForm.contains("Data Override Form"));

		boolean ClientKey = driver.findElement(By.xpath("//div[contains(text(),'Client Key')]")).isDisplayed();
		System.out.println(ClientKey);

		boolean FileType = driver.findElement(By.xpath("//div[contains(text(),'File Type')]")).isDisplayed();
		System.out.println(FileType);

		List<WebElement> FileTypeList = driver.findElements(By.xpath("//select[@id='filetype']"));
		System.out.println("Number of elements:" + FileTypeList.size());

		for (int i = 0; i < FileTypeList.size(); i++) {
			System.out.println("Available List is ==> : " + FileTypeList.get(i).getText());
		}

		boolean Field = driver.findElement(By.xpath("//div[contains(text(),'Field')]")).isDisplayed();
		System.out.println(Field);

		List<WebElement> FieldNameList = driver.findElements(By.xpath("//select[@id='fieldname']"));
		System.out.println("Number of elements:" + FieldNameList.size());

		for (int i = 0; i < FieldNameList.size(); i++) {
			System.out.println("Available List is ==> : " + FieldNameList.get(i).getText());
		}

		boolean OldValue = driver.findElement(By.xpath("//div[contains(text(),'Old Value')]")).isDisplayed();
		System.out.println(OldValue);

		boolean OverrideValue = driver.findElement(By.xpath("//div[contains(text(),'Override Value')]")).isDisplayed();
		System.out.println(OverrideValue);

		WebElement Overridevalue = driver.findElement(By.xpath("//div[@id='MainWrap']//div[6]//div[1]//input[1]"));
		Overridevalue.isDisplayed();
		Thread.sleep(2000);

	}

	public void ClickonReports() {

		Reports.click();
	}

	public void VerifyReportsTab() throws InterruptedException {

		Thread.sleep(3000);
		boolean Notice = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).isDisplayed();
		System.out.println(Notice);

		boolean Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).isDisplayed();
		System.out.println(Close);

		String RefError = driver
				.findElement(By.xpath("//div[contains(text(),'ReferenceError: Highcharts is not defined')]")).getText();
		System.out.println(RefError);
		Assert.assertTrue(RefError.contains("ReferenceError: Highcharts is not defined"));

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();

		WebElement Reports = driver.findElement(By.xpath("//a[@id='ActiveTab']"));
		Reports.isDisplayed();

		WebElement LocalInteligenceAnalysis = driver
				.findElement(By.xpath("//a[contains(text(),'Local Intelligence Analysis')]"));
		LocalInteligenceAnalysis.isDisplayed();

		WebElement FlexMonster = driver.findElement(By.xpath("//a[contains(text(),'Flexmonster')]"));
		FlexMonster.isDisplayed();

		WebElement InstantUpdateReport = driver.findElement(By.xpath("//a[contains(text(),'Instant Update Report')]"));
		InstantUpdateReport.isDisplayed();

	}

	public void VerifyReport_ReportsTab() {

		WebElement ReportCategory = driver.findElement(By.xpath("//li[contains(text(),'Select a Report Category')]"));
		ReportCategory.isDisplayed();

		WebElement ReportType = driver.findElement(By.xpath("//li[contains(text(),'Select a Report Type')]"));
		ReportType.isDisplayed();

		List<WebElement> ReportCategoryList = driver.findElements(By.xpath("//select[@id='category']"));
		System.out.println("Number of elements:" + ReportCategoryList.size());

		for (int i = 0; i < ReportCategoryList.size(); i++) {
			System.out.println("Available List is ==> : " + ReportCategoryList.get(i).getText());
		}

		List<WebElement> ReportTypeList = driver.findElements(By.xpath("//select[@id='reports']"));
		System.out.println("Number of elements:" + ReportTypeList.size());

		for (int i = 0; i < ReportTypeList.size(); i++) {
			System.out.println("Available List is ==> : " + ReportTypeList.get(i).getText());
		}

		WebElement GenerateReportBtn = driver.findElement(By.xpath("//input[@id='genReport']"));
		GenerateReportBtn.isDisplayed();

		WebElement ChartType = driver.findElement(By.xpath("//span[@class='icon-bar-chart']"));
		ChartType.isDisplayed();

		WebElement BarChartDefault = driver.findElement(By.xpath("//select[@id='chartType']"));
		BarChartDefault.isDisplayed();

		WebElement ExportChart = driver.findElement(By.xpath("//a[@id='export_chart']"));
		ExportChart.isDisplayed();

		WebElement PrintReportBtn = driver.findElement(By.xpath("//a[@class='SmallGrayButton']"));
		PrintReportBtn.isDisplayed();

		WebElement ExportTableFormat = driver.findElement(By.xpath("//li[contains(text(),'Export Table')]"));
		ExportTableFormat.isDisplayed();

		List<WebElement> ExportTableOptions = driver.findElements(By.xpath("//li[contains(text(),'Export Table')]"));
		System.out.println("Number of elements:" + ExportTableOptions.size());

		for (int i = 0; i < ExportTableOptions.size(); i++) {
			System.out.println("Available List is ==> : " + ExportTableOptions.get(i).getText());
		}

		WebElement Description = driver.findElement(By.xpath("//span[contains(text(),'Description')]"));
		Description.isDisplayed();

		WebElement Yesterday = driver.findElement(By.xpath("//span[contains(text(),'Yesterday')]"));
		Yesterday.isDisplayed();

		WebElement Thisweek = driver.findElement(By.xpath("//span[contains(text(),'This Week')]"));
		Thisweek.isDisplayed();

		WebElement LastWeek = driver.findElement(By.xpath("//span[contains(text(),'Last Week')]"));
		LastWeek.isDisplayed();

		WebElement ThisMonth = driver.findElement(By.xpath("//span[contains(text(),'This Month')]"));
		ThisMonth.isDisplayed();

		WebElement LastMonth = driver.findElement(By.xpath("//span[contains(text(),'Last Month')]"));
		LastMonth.isDisplayed();

		WebElement QTD = driver.findElement(By.xpath("//span[contains(text(),'QTD')]"));
		QTD.isDisplayed();

		WebElement YTD = driver.findElement(By.xpath("//span[contains(text(),'YTD')]"));
		YTD.isDisplayed();

		List<WebElement> TableHeader = driver.findElements(By.xpath("//div[@id='MainWrap']//th"));
		System.out.println("Number of elements:" + TableHeader.size());

		for (int i = 0; i < TableHeader.size(); i++) {
			System.out.println("Available List is ==> : " + TableHeader.get(i).getText());
		}

		List<WebElement> ListTableContent = driver.findElements(By.xpath("//div[@id='MainWrap']//tr//td"));
		System.out.println("Number of elements:" + ListTableContent.size());

		for (int i = 0; i < ListTableContent.size(); i++) {
			System.out.println("Available List is ==> : " + ListTableContent.get(i).getText());
		}

	}

	public void VerifyReport_LocalIntelligenceAnalysis() throws InterruptedException {

		WebElement LocalIntelligenceAnalysis = driver
				.findElement(By.xpath("//a[contains(text(),'Local Intelligence Analysis')]"));
		LocalIntelligenceAnalysis.isDisplayed();
		/*
		 * LocalIntelligenceAnalysis.click(); Thread.sleep(2000);
		 */
		System.out.println("Clicking on This Tab 500 Error is Displayed");

	}

	public void VerifyReport_FlexMonster() {

		WebElement FlexMonster = driver.findElement(By.xpath("//a[contains(text(),'Flexmonster')]"));
		FlexMonster.isDisplayed();
		System.out.println("Flexmonster Report page is Displayed");

	}

	public void VerifyReport_InstantUpdateReport() throws InterruptedException {
		Thread.sleep(2000);
		WebElement InstantUpdateReport = driver.findElement(By.xpath("//a[contains(text(),'Instant Update Report')]"));
		InstantUpdateReport.click();
		Thread.sleep(2000);
		WebElement publisher = driver.findElement(By.xpath("//span[contains(text(),'Publisher')]"));
		publisher.isDisplayed();

		WebElement DateRange = driver.findElement(By.xpath("//span[contains(text(),'Date Range')]"));
		DateRange.isDisplayed();

		WebElement FilterByStatus = driver.findElement(By.xpath("//span[contains(text(),'Filter By Status')]"));
		FilterByStatus.isDisplayed();

		WebElement SearchByClientKey = driver.findElement(By.xpath("//span[contains(text(),'Search by Client Key')]"));
		SearchByClientKey.isDisplayed();

		WebElement SearchByErrorMessage = driver
				.findElement(By.xpath("//span[contains(text(),'Search by Error Message')]"));
		SearchByErrorMessage.isDisplayed();

		WebElement BackToAccountsummary = driver
				.findElement(By.xpath("//div[@id='account-level']//a[contains(text(),' < Back to Account Summary')]"));
		BackToAccountsummary.isDisplayed();

		List<WebElement> PublisherList = driver.findElements(By.xpath("//select[@class='publisher-select']"));
		System.out.println("Number of elements:" + PublisherList.size());

		for (int i = 0; i < PublisherList.size(); i++) {
			System.out.println("Available List is ==> : " + PublisherList.get(i).getText());
		}

		List<WebElement> FilterStatusList = driver.findElements(By.xpath("//select[@class='status-select']"));
		System.out.println("Number of elements:" + FilterStatusList.size());

		for (int i = 0; i < FilterStatusList.size(); i++) {
			System.out.println("Available List is ==> : " + FilterStatusList.get(i).getText());
		}
	}

	public void GoToLeadsTab() {
		Leads.click();
	}

	public void VerifyLeads_SubscribersTab() throws InterruptedException {

		driver.findElement(By.xpath("//li[@id='Subscribers']")).click();
		Thread.sleep(2000);
		String Campaign = driver.findElement(By.xpath("//li[@class='StepText']")).getText();
		System.out.println(Campaign);
		Assert.assertEquals("Please Select a Campaign:", Campaign);

		List<WebElement> CampaignList = driver.findElements(By.xpath("//select[@id='curr_campaigns']"));
		System.out.println("Number of elements:" + CampaignList.size());

		for (int i = 0; i < CampaignList.size(); i++) {
			System.out.println("Available List is ==> : " + CampaignList.get(i).getText());
		}

		String Analytics = driver.findElement(By.xpath("//td[contains(text(),\"Analytics Email's Subscribers\")]"))
				.getText();
		System.out.println(Analytics);
		Assert.assertEquals("Analytics Email's Subscribers", Analytics);

		WebElement CC = driver.findElement(By.xpath("/descendant::a[contains(text(),'Create Campaign')][2]"));
		CC.isDisplayed();

		WebElement SS = driver.findElement(By.xpath("/descendant::a[contains(text(),'Search Subscribers')][2]"));
		SS.isDisplayed();

		WebElement ETC = driver.findElement(By.xpath("/descendant::a[contains(text(),'Edit this Campaign')][2]"));
		ETC.isDisplayed();

		WebElement Download = driver.findElement(By.xpath("/descendant::a[contains(text(),'Download')][2]"));
		Download.isDisplayed();

		List<WebElement> SubscribersTable = driver
				.findElements(By.xpath("//div[@id='leads']//tr[@class='head_display_row']"));
		System.out.println("Number of elements:" + SubscribersTable.size());

		for (int i = 0; i < SubscribersTable.size(); i++) {
			System.out.println("Available Header Name List is ==> : " + SubscribersTable.get(i).getText());
		}

		String AddNewSubs = driver.findElement(By.xpath("//div[@id='leads']//td[@id='add_lead']")).getText();
		System.out.println(AddNewSubs);
		Assert.assertEquals("+ Add New Subscriber", AddNewSubs);

		WebElement Last25 = driver.findElement(By.xpath("//button[contains(text(),'Last 25')]"));
		Last25.isDisplayed();

		WebElement Next25 = driver.findElement(By.xpath("//button[contains(text(),'Next 25')]"));
		Next25.isDisplayed();

		List<WebElement> ResultPerPage = driver.findElements(By.xpath("//div[@id='leads']//select[@id='sliceSelect']"));
		System.out.println("Number of elements:" + ResultPerPage.size());

		for (int i = 0; i < ResultPerPage.size(); i++) {
			System.out.println("Available List is ==> : " + ResultPerPage.get(i).getText());
		}

	}

	public void VerifyLeads_Subscribers_AddNewSubscribers() {

		driver.findElement(By.xpath("//div[@id='leads']//td[@id='add_lead']")).click();

		String FirstName = driver.findElement(By.xpath("//span[@id='firstname_text']")).getText();
		System.out.println(FirstName);
		Assert.assertEquals("Firstname", FirstName);

		WebElement FirstNameTF = driver.findElement(By.xpath("//input[@id='firstname_input']"));
		FirstNameTF.isDisplayed();

		String LastName = driver.findElement(By.xpath("//span[@id='lastname_text']")).getText();
		System.out.println(LastName);
		Assert.assertEquals("Lastname", LastName);

		WebElement LastNameTF = driver.findElement(By.xpath("//input[@id='lastname_input']"));
		LastNameTF.isDisplayed();

		String EmailAdd = driver.findElement(By.xpath("//span[@id='emailaddress_text']")).getText();
		System.out.println(EmailAdd);
		Assert.assertEquals("Emailaddress", EmailAdd);

		WebElement EmailAddTF = driver.findElement(By.xpath("//input[@id='emailaddress_input']"));
		EmailAddTF.isDisplayed();

		String Add1 = driver.findElement(By.xpath("//span[@id='address1_text']")).getText();
		System.out.println(Add1);
		Assert.assertEquals("Address1", Add1);

		WebElement Add1TF = driver.findElement(By.xpath("//input[@id='address1_input']"));
		Add1TF.isDisplayed();

		String Add2 = driver.findElement(By.xpath("//span[@id='address2_text']")).getText();
		System.out.println(Add2);
		Assert.assertEquals("Address2", Add2);

		WebElement Add2TF = driver.findElement(By.xpath("//input[@id='address2_input']"));
		Add2TF.isDisplayed();

		String City = driver.findElement(By.xpath("//span[@id='city_text']")).getText();
		System.out.println(City);
		Assert.assertEquals("City", City);

		WebElement CityTF = driver.findElement(By.xpath("//input[@id='city_input']"));
		CityTF.isDisplayed();

		String Province = driver.findElement(By.xpath("//span[@id='province_text']")).getText();
		System.out.println(Province);
		Assert.assertEquals("Province", Province);

		WebElement ProvinceTF = driver.findElement(By.xpath("//input[@id='province_input']"));
		ProvinceTF.isDisplayed();

		String Country = driver.findElement(By.xpath("//span[@id='country_text']")).getText();
		System.out.println(Country);
		Assert.assertEquals("Country", Country);

		List<WebElement> CountryList = driver.findElements(By.xpath("//select[@id='country_input']"));
		System.out.println("Number of elements:" + CountryList.size());

		for (int i = 0; i < CountryList.size(); i++) {
			System.out.println("Available List is ==> : " + CountryList.get(i).getText());
		}

		String PostalCode = driver.findElement(By.xpath("//span[@id='postalcode_text']")).getText();
		System.out.println(PostalCode);
		Assert.assertEquals("Postalcode", PostalCode);

		WebElement PostalCodeTF = driver.findElement(By.xpath("//input[@id='postalcode_input']"));
		PostalCodeTF.isDisplayed();

		String Lat = driver.findElement(By.xpath("//span[@id='latitude_text']")).getText();
		System.out.println(Lat);
		Assert.assertEquals("Latitude", Lat);

		WebElement LatTF = driver.findElement(By.xpath("//input[@id='latitude_input']"));
		LatTF.isDisplayed();

		String Long = driver.findElement(By.xpath("//span[@id='longitude_text']")).getText();
		System.out.println(Long);
		Assert.assertEquals("Longitude", Long);

		WebElement LongTF = driver.findElement(By.xpath("//input[@id='longitude_input']"));
		LongTF.isDisplayed();

		String Bho = driver.findElement(By.xpath("//span[@id='bho_text']")).getText();
		System.out.println(Bho);
		Assert.assertEquals("Bho", Bho);

		WebElement BhoTF = driver.findElement(By.xpath("//input[@id='bho_input']"));
		BhoTF.isDisplayed();

		String Homephone = driver.findElement(By.xpath("//span[@id='homephone_text']")).getText();
		System.out.println(Homephone);
		Assert.assertEquals("Homephone", Homephone);

		WebElement HomephoneTF = driver.findElement(By.xpath("//input[@id='homephone_input']"));
		HomephoneTF.isDisplayed();

		String Cellphone = driver.findElement(By.xpath("//span[@id='cellphone_text']")).getText();
		System.out.println(Cellphone);
		Assert.assertEquals("Cellphone", Cellphone);

		WebElement CellphoneTF = driver.findElement(By.xpath("//input[@id='cellphone_input']"));
		CellphoneTF.isDisplayed();

		String Optindate = driver.findElement(By.xpath("//span[@id='optindate_text']")).getText();
		System.out.println(Optindate);
		Assert.assertEquals("Optindate", Optindate);

		WebElement OptindateTF = driver.findElement(By.xpath("//input[@id='optindate_input']"));
		OptindateTF.isDisplayed();

		String Optoutdate = driver.findElement(By.xpath("//span[@id='optoutdate_text']")).getText();
		System.out.println(Optoutdate);
		Assert.assertEquals("Optoutdate", Optoutdate);

		WebElement OptoutdateTF = driver.findElement(By.xpath("//input[@id='optoutdate_input']"));
		OptoutdateTF.isDisplayed();

		String Source = driver.findElement(By.xpath("//span[@id='source_text']")).getText();
		System.out.println(Source);
		Assert.assertEquals("Source", Source);

		WebElement SourceTF = driver.findElement(By.xpath("//input[@id='source_input']"));
		SourceTF.isDisplayed();

		String Useragent = driver.findElement(By.xpath("//span[@id='useragent_text']")).getText();
		System.out.println(Useragent);
		Assert.assertEquals("Useragent", Useragent);

		WebElement UseragentTF = driver.findElement(By.xpath("//input[@id='useragent_input']"));
		UseragentTF.isDisplayed();

		String Subscriptionuid = driver.findElement(By.xpath("//span[@id='subscriptionuid_text']")).getText();
		System.out.println(Subscriptionuid);
		Assert.assertEquals("Subscriptionuid", Subscriptionuid);

		WebElement SubscriptionuidTF = driver.findElement(By.xpath("//input[@id='subscriptionuid_input']"));
		SubscriptionuidTF.isDisplayed();

		String Dateadded = driver.findElement(By.xpath("//span[@id='dateadded_text']")).getText();
		System.out.println(Dateadded);
		Assert.assertEquals("Dateadded", Dateadded);

		WebElement DateaddedTF = driver.findElement(By.xpath("//input[@id='dateadded_input']"));
		DateaddedTF.isDisplayed();

		String Remoteip = driver.findElement(By.xpath("//span[@id='remoteip_text']")).getText();
		System.out.println(Remoteip);
		Assert.assertEquals("Remoteip", Remoteip);

		WebElement RemoteipTF = driver.findElement(By.xpath("//input[@id='remoteip_input']"));
		RemoteipTF.isDisplayed();

		WebElement Add = driver.findElement(By.xpath("//form[@id='add_lead_form']//input[@id='add_lead_button']"));
		Add.isDisplayed();

		WebElement Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		Close.click();

	}

	public void ClickOnLead_Messages() {
		Messages.click();
	}

	public void VerifyLead_Messages() throws InterruptedException {

		// Messages:
		List<WebElement> Msges = driver.findElements(By.xpath("//select[@id='curMessageSelect']"));
		System.out.println("Number of elements:" + Msges.size());

		for (int i = 0; i < Msges.size(); i++) {
			System.out.println("Available List is ==> : " + Msges.get(i).getText());
		}

		// Types:
		List<WebElement> Types = driver.findElements(By.xpath("//select[@id='messageType']"));
		System.out.println("Number of elements:" + Types.size());

		for (int i = 0; i < Types.size(); i++) {
			System.out.println("Available List is ==> : " + Types.get(i).getText());
		}

		String Configmessage = driver.findElement(By.xpath("//a[contains(text(),'Configure Message')]")).getText();
		System.out.println(Configmessage);
		Assert.assertEquals("Configure Message", Configmessage);

		String ScheduleMessage = driver.findElement(By.xpath("//a[contains(text(),'Schedule Message')]")).getText();
		System.out.println(ScheduleMessage);
		Assert.assertEquals("Schedule Message", ScheduleMessage);

		String ComposeMessage = driver.findElement(By.xpath("//a[contains(text(),'Compose Message')]")).getText();
		System.out.println(ComposeMessage);
		Assert.assertEquals("Compose Message", ComposeMessage);
	}

	public void VerifyLeads_Messages_ConfigureMessages() throws InterruptedException {

		String CYM = driver.findElement(By.xpath("//p[contains(text(),'Configure Your Message')]")).getText();
		System.out.println(CYM);
		Assert.assertEquals("Configure Your Message", CYM);

		String MN = driver.findElement(By.xpath("//p[contains(text(),'Message Name')]")).getText();
		System.out.println(MN);
		Assert.assertTrue(MN.contains("Message Name � Used to identify your message in the console (required)"));

		String Required = driver.findElement(By.xpath("//span[contains(text(),'Required')]")).getText();
		System.out.println(Required);
		Assert.assertEquals("Required", Required);

		String MS = driver.findElement(By.xpath("//p[contains(text(),'Message subject')]")).getText();
		System.out.println(MS);
		Assert.assertEquals("Message subject", MS);

		String FR = driver.findElement(By.xpath("//p[contains(text(),'Forward replies to')]")).getText();
		System.out.println(FR);
		Assert.assertTrue(FR
				.contains("Forward replies to � Replies to all email sent will be sent to the email ententered below"));

		String SN = driver.findElement(By.xpath("//p[contains(text(),\"Sender's name\")]")).getText();
		System.out.println(SN);
		Assert.assertTrue(SN.contains("Sender's name � This will be the name recipient will see in their inbox"));

		String SEA = driver.findElement(By.xpath("//p[contains(text(),\"Sender's email address\")]")).getText();
		System.out.println(SEA);
		Assert.assertTrue(
				SEA.contains("Sender's email address � This is the email address recipient will see in their inbox"));

		String required = driver.findElement(By.xpath("//span[contains(text(),'Required')]")).getText();
		System.out.println(required);
		Assert.assertEquals("Required", required);

		WebElement NextStep = driver.findElement(By.xpath("//a[@id='start_slide_next']"));
		NextStep.isDisplayed();
	}

	public void VerifyLeads_Messages_ScheduleMessages() throws InterruptedException {

		Thread.sleep(2000);
		/*
		 * WebElement scheduleMessage =
		 * driver.findElement(By.xpath("//a[contains(text(),'Schedule Message')]"));
		 * scheduleMessage.click();
		 */
		driver.findElement(By.xpath("//a[contains(text(),'Schedule Message')]")).click();

		String SYM = driver.findElement(By.xpath("//p[contains(text(),'Schedule your message')]")).getText();
		System.out.println(SYM);
		// Assert.assertEquals("Schedule your message", SYM);

		String DNSTM = driver.findElement(By.xpath("//strong[contains(text(),'Do not schedule this message')]"))
				.getText();
		System.out.println(DNSTM);
		Assert.assertEquals("Do not schedule this message", DNSTM);

		WebElement SkipBtn = driver.findElement(By.xpath("//a[@id='btnSkipSchedule']"));
		SkipBtn.isDisplayed();

		String QnHeader = driver
				.findElement(By.xpath("//strong[contains(text(),'When would you like to send this message?')]"))
				.getText();
		System.out.println(QnHeader);
		Assert.assertEquals("When would you like to send this message?", QnHeader);

		WebElement SendNow = driver.findElement(By.xpath("//input[@id='sendNow']"));
		SendNow.isEnabled();

		String SendnowTxt = driver.findElement(By.xpath("//label[contains(text(),'Send Now')]")).getText();
		System.out.println(SendnowTxt);
		Assert.assertEquals("Send Now", SendnowTxt);

		WebElement SendLater = driver.findElement(By.xpath("//input[@id='sendLater']"));
		SendLater.isEnabled();

		String SendLaterTxt = driver.findElement(By.xpath("//label[contains(text(),'Send Later')]")).getText();
		System.out.println(SendLaterTxt);
		Assert.assertEquals("Send Later", SendLaterTxt);
	}

	public void VerifyLeads_Messages_ComposeMessages() throws InterruptedException {

		Thread.sleep(2000);
		/*
		 * WebElement Composemessage =
		 * driver.findElement(By.xpath("//a[contains(text(),'Compose Message')]"));
		 * Composemessage.click();
		 */
		driver.findElement(By.xpath("//a[contains(text(),'Compose Message')]")).click();

		String ComposeYourMessage = driver.findElement(By.xpath("//p[contains(text(),'Compose your Message')]"))
				.getText();
		System.out.println(ComposeYourMessage);
		// Assert.assertEquals("Compose your Message", ComposeYourMessage);

		WebElement ContainerBody = driver.findElement(By.xpath("//div[@id='mceu_30-body']"));
		ContainerBody.isDisplayed();

		WebElement ContainerMenu = driver.findElement(By.xpath("//div[@id='mceu_31']"));
		ContainerMenu.isDisplayed();

		WebElement ContainerPanel = driver.findElement(By.xpath("//div[@id='mceu_39']"));
		ContainerPanel.isDisplayed();

		WebElement PreviewStep = driver.findElement(By.xpath("//a[@class='carousel-control LeftEndGrayButton']"));
		PreviewStep.isDisplayed();

		WebElement AddMessage = driver.findElement(By.xpath("//button[@id='editMessageSubmit']"));
		AddMessage.isDisplayed();

	}

	public void VerifyLeads_ComposeMessage_CotainerBody() {

		String Files = driver.findElement(By.xpath("//div[@id='mceu_32']")).getText();
		System.out.println(Files);
		Assert.assertEquals("File", Files);

		String Edit = driver.findElement(By.xpath("//button[@id='mceu_33-open']")).getText();
		System.out.println(Edit);
		Assert.assertEquals("Edit", Edit);

		String Insert = driver.findElement(By.xpath("//button[@id='mceu_34-open']")).getText();
		System.out.println(Insert);
		Assert.assertEquals("Insert", Insert);

		String View = driver.findElement(By.xpath("//button[@id='mceu_35-open']")).getText();
		System.out.println(View);
		Assert.assertEquals("View", View);

		String Format = driver.findElement(By.xpath("//button[@id='mceu_36-open']//span[contains(text(),'Format')]"))
				.getText();
		System.out.println(Format);
		Assert.assertEquals("Format", Format);

		String Table = driver.findElement(By.xpath("//button[@id='mceu_37-open']")).getText();
		System.out.println(Table);
		Assert.assertEquals("Table", Table);

		String Tools = driver.findElement(By.xpath("//button[@id='mceu_38-open']")).getText();
		System.out.println(Tools);
		Assert.assertEquals("Tools", Tools);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Files() {

		driver.findElement(By.xpath("//button[@id='mceu_32-open']//span[contains(text(),'File')]")).click();

		// Files :>>>
		List<WebElement> files = driver.findElements(By.xpath("//div[@id='mceu_61']"));
		System.out.println("Number of elements:" + files.size());

		for (int i = 0; i < files.size(); i++) {
			System.out.println("Available List is ==> : " + files.get(i).getText());
		}

		String NewDoc = driver.findElement(By.xpath("//span[contains(text(),'New document')]")).getText();
		System.out.println(NewDoc);
		Assert.assertEquals("New document", NewDoc);

		String Print = driver.findElement(By.xpath("//span[contains(text(),'Print')]")).getText();
		System.out.println(Print);
		Assert.assertEquals("Print", Print);

	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Edit() throws InterruptedException {

		driver.findElement(By.xpath("//button[@id='mceu_33-open']")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//button[@id='mceu_33-open']")).click();

		// Edit :>>
		Thread.sleep(2000);
		List<WebElement> edit = driver.findElements(By.xpath("//div[@id='mceu_64-body']"));
		System.out.println("Number of elements:" + edit.size());

		for (int i = 0; i < edit.size(); i++) {
			System.out.println("Available List is ==> : " + edit.get(i).getText());
		}

		String Undo = driver.findElement(By.xpath("//span[contains(text(),'Undo')]")).getText();
		System.out.println(Undo);
		// Assert.assertEquals("Undo", Undo);

		String Redo = driver.findElement(By.xpath("//span[contains(text(),'Redo')]")).getText();
		System.out.println(Redo);
		// Assert.assertEquals("Redu", Redo);

		String Cut = driver.findElement(By.xpath("//span[contains(text(),'Cut')]")).getText();
		System.out.println(Cut);
		Assert.assertEquals("Cut", Cut);

		String Copy = driver.findElement(By.xpath("//span[contains(text(),'Copy')]")).getText();
		System.out.println(Copy);
		Assert.assertEquals("Copy", Copy);

		String Paste = driver.findElement(By.xpath("/descendant::span[contains(text(),'Paste')][1]")).getText();
		System.out.println(Paste);
		Assert.assertEquals("Paste", Paste);

		String PasteAsText = driver.findElement(By.xpath("//span[contains(text(),'Paste as text')]")).getText();
		System.out.println(PasteAsText);
		Assert.assertEquals("Paste as text", PasteAsText);

		String SelectAll = driver.findElement(By.xpath("//span[contains(text(),'Select all')]")).getText();
		System.out.println(SelectAll);
		Assert.assertEquals("Select all", SelectAll);

		String FnR = driver.findElement(By.xpath("//span[contains(text(),'Find and replace')]")).getText();
		System.out.println(FnR);
		Assert.assertEquals("Find and replace", FnR);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Insert() throws InterruptedException {

		driver.findElement(By.xpath("//span[contains(text(),'Insert')]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//span[contains(text(),'Insert')]")).click();
		Thread.sleep(2000);
		// Insert :>>

		List<WebElement> insert = driver.findElements(By.xpath("//div[@id='mceu_104']"));
		System.out.println("Number of elements:" + insert.size());

		for (int i = 0; i < insert.size(); i++) {
			System.out.println("Available List is ==> : " + insert.get(i).getText());
		}

		String IEV = driver.findElement(By.xpath("//span[contains(text(),'Insert/edit video')]")).getText();
		System.out.println(IEV);
		Assert.assertEquals("Insert/edit video", IEV);

		String IEI = driver.findElement(By.xpath("//span[contains(text(),'Insert/edit image')]")).getText();
		System.out.println(IEI);
		Assert.assertEquals("Insert/edit image", IEI);

		String IeL = driver.findElement(By.xpath("//span[contains(text(),'Insert/edit link')]")).getText();
		System.out.println(IeL);
		Assert.assertEquals("Insert/edit link", IeL);

		String SpecialCharacter = driver.findElement(By.xpath("//span[contains(text(),'Special character')]"))
				.getText();
		System.out.println(SpecialCharacter);
		Assert.assertEquals("Special character", SpecialCharacter);

		String HorizontalLine = driver.findElement(By.xpath("//span[contains(text(),'Horizontal line')]")).getText();
		System.out.println(HorizontalLine);
		Assert.assertEquals("Horizontal line", HorizontalLine);

		String Anchor = driver.findElement(By.xpath("//span[contains(text(),'Anchor')]")).getText();
		System.out.println(Anchor);
		Assert.assertEquals("Anchor", Anchor);

		String PageBreak = driver.findElement(By.xpath("//span[contains(text(),'Page break')]")).getText();
		System.out.println(PageBreak);
		Assert.assertEquals("Page break", PageBreak);

		String IdT = driver.findElement(By.xpath("//span[contains(text(),'Insert date/time')]")).getText();
		System.out.println(IdT);
		Assert.assertEquals("Insert date/time", IdT);

		String NBS = driver.findElement(By.xpath("//span[contains(text(),'Nonbreaking space')]")).getText();
		System.out.println(NBS);
		Assert.assertEquals("Nonbreaking space", NBS);

		String Inserttemplate = driver.findElement(By.xpath("//span[contains(text(),'Insert template')]")).getText();
		System.out.println(Inserttemplate);
		Assert.assertEquals("Insert template", Inserttemplate);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody_View() throws InterruptedException {

		driver.findElement(By.xpath("//span[contains(text(),'View')]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//span[contains(text(),'View')]")).click();

		// View :>>

		List<WebElement> view = driver.findElements(By.xpath("//div[@id='mceu_97']"));
		System.out.println("Number of elements:" + view.size());

		for (int i = 0; i < view.size(); i++) {
			System.out.println("Available List is ==> : " + view.get(i).getText());
		}

		String SIC = driver.findElement(By.xpath("//span[contains(text(),'Show invisible characters')]")).getText();
		System.out.println(SIC);
		Assert.assertEquals("Show invisible characters", SIC);

		String SB = driver.findElement(By.xpath("//span[contains(text(),'Show blocks')]")).getText();
		System.out.println(SB);
		Assert.assertEquals("Show blocks", SB);

		String Visualaids = driver.findElement(By.xpath("//span[contains(text(),'Visual aids')]")).getText();
		System.out.println(Visualaids);
		Assert.assertEquals("Visual aids", Visualaids);

		String Preview = driver.findElement(By.xpath("//span[contains(text(),'Preview')]")).getText();
		System.out.println(Preview);
		Assert.assertEquals("Preview", Preview);

		String Fullscreen = driver.findElement(By.xpath("//span[contains(text(),'Fullscreen')]")).getText();
		System.out.println(Fullscreen);
		Assert.assertEquals("Fullscreen", Fullscreen);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Format() throws InterruptedException {

		driver.findElement(By.xpath("/descendant::span[contains(text(),'Format')][1]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("/descendant::span[contains(text(),'Format')][1]")).click();
		// View :>>

		List<WebElement> format = driver.findElements(By.xpath("//div[@id='mceu_61-body']"));
		System.out.println("Number of elements:" + format.size());

		for (int i = 0; i < format.size(); i++) {
			System.out.println("Available List is ==> : " + format.get(i).getText());
		}

		String Bold = driver.findElement(By.xpath("//span[contains(text(),'Bold')]")).getText();
		System.out.println(Bold);
		Assert.assertEquals("Bold", Bold);

		String Italic = driver.findElement(By.xpath("//span[contains(text(),'Italic')]")).getText();
		System.out.println(Italic);
		Assert.assertEquals("Italic", Italic);

		String Underline = driver.findElement(By.xpath("//span[contains(text(),'Underline')]")).getText();
		System.out.println(Underline);
		Assert.assertEquals("Underline", Underline);

		String Strickthrough = driver.findElement(By.xpath("//span[contains(text(),'Strikethrough')]")).getText();
		System.out.println(Strickthrough);
		Assert.assertEquals("Strikethrough", Strickthrough);

		String Superscript = driver.findElement(By.xpath("//span[contains(text(),'Superscript')]")).getText();
		System.out.println(Superscript);
		Assert.assertEquals("Superscript", Superscript);

		String Subscript = driver.findElement(By.xpath("//span[contains(text(),'Subscript')]")).getText();
		System.out.println(Subscript);
		Assert.assertEquals("Subscript", Subscript);

		String Formats = driver.findElement(By.xpath("//span[contains(text(),'Formats')]")).getText();
		System.out.println(Formats);
		Assert.assertEquals("Formats", Formats);

		String ClearFormating = driver.findElement(By.xpath("//span[contains(text(),'Clear formatting')]")).getText();
		System.out.println(ClearFormating);
		Assert.assertEquals("Clear formatting", ClearFormating);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Table() throws InterruptedException {

		driver.findElement(By.xpath("//button[@id='mceu_37-open']//span[contains(text(),'Table')]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//button[@id='mceu_37-open']//span[contains(text(),'Table')]")).click();

		// Table :>>

		List<WebElement> table = driver.findElements(By.xpath("//div[@id='mceu_77']"));
		System.out.println("Number of elements:" + table.size());

		for (int i = 0; i < table.size(); i++) {
			System.out.println("Available List is ==> : " + table.get(i).getText());
		}

		String Inserttable = driver.findElement(By.xpath("//span[contains(text(),'Insert table')]")).getText();
		System.out.println(Inserttable);
		Assert.assertEquals("Insert table", Inserttable);

		String Tableproperties = driver.findElement(By.xpath("//span[contains(text(),'Table properties')]")).getText();
		System.out.println(Tableproperties);
		Assert.assertEquals("Table properties", Tableproperties);

		String Deletetable = driver.findElement(By.xpath("//span[contains(text(),'Delete table')]")).getText();
		System.out.println(Deletetable);
		Assert.assertEquals("Delete table", Deletetable);

		String Cell = driver.findElement(By.xpath("//span[contains(text(),'Cell')]")).getText();
		System.out.println(Cell);
		Assert.assertEquals("Cell", Cell);

		String Superscript = driver.findElement(By.xpath("//span[contains(text(),'Row')]")).getText();
		System.out.println(Superscript);
		Assert.assertEquals("Row", Superscript);

		String Subscript = driver.findElement(By.xpath("//span[contains(text(),'Column')]")).getText();
		System.out.println(Subscript);
		Assert.assertEquals("Column", Subscript);

	}

	public void VerifyLeads_ComposeMessage_ContainerBody_Tools() throws InterruptedException {

		driver.findElement(By.xpath("//span[contains(text(),'Tools')]")).click();
		Thread.sleep(1500);
		// driver.findElement(By.xpath("//span[contains(text(),'Tools')]")).click();

		// Tools :>>

		List<WebElement> tools = driver.findElements(By.xpath("//div[@id='mceu_105']"));
		System.out.println("Number of elements:" + tools.size());

		for (int i = 0; i < tools.size(); i++) {
			System.out.println("Available List is ==> : " + tools.get(i).getText());
		}

		String SourceCode = driver.findElement(By.xpath("//span[contains(text(),'Source code')]")).getText();
		System.out.println(SourceCode);
		Assert.assertEquals("Source code", SourceCode);
	}

	public void VerifyLeads_ComposeMessage_ContainerBody() {

		WebDriverWait undo = new WebDriverWait(driver, 6);
		undo.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_0']//i[@class='mce-ico mce-i-undo']")));

		WebDriverWait redu = new WebDriverWait(driver, 6);
		redu.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_1']//i[@class='mce-ico mce-i-redo']")));

		WebDriverWait bold = new WebDriverWait(driver, 6);
		bold.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_3']//i[@class='mce-ico mce-i-bold']")));

		WebDriverWait Italic = new WebDriverWait(driver, 6);
		Italic.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_4']//i[@class='mce-ico mce-i-italic']")));

		WebDriverWait underline = new WebDriverWait(driver, 6);
		underline.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_5']//i[@class='mce-ico mce-i-underline']")));

		WebDriverWait strickthrough = new WebDriverWait(driver, 6);
		strickthrough.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_6']//i[@class='mce-ico mce-i-strikethrough']")));

		WebDriverWait AlignLeft = new WebDriverWait(driver, 6);
		AlignLeft.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='mceu_7']//button")));

		WebDriverWait AlignCentre = new WebDriverWait(driver, 6);
		AlignCentre.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_8']//i[@class='mce-ico mce-i-aligncenter']")));

		WebDriverWait alignright = new WebDriverWait(driver, 6);
		alignright.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_9']//i[@class='mce-ico mce-i-alignright']")));

		WebDriverWait alignjustify = new WebDriverWait(driver, 6);
		alignjustify.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_10']//i[@class='mce-ico mce-i-alignjustify']")));

		WebDriverWait bullist = new WebDriverWait(driver, 6);
		bullist.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-bullist']")));

		WebDriverWait numlist = new WebDriverWait(driver, 6);
		numlist.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-numlist']")));

		WebDriverWait outdent = new WebDriverWait(driver, 6);
		outdent.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-outdent']")));

		WebDriverWait indent = new WebDriverWait(driver, 6);
		indent.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-indent']")));

		WebDriverWait blockquote = new WebDriverWait(driver, 6);
		blockquote.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-blockquote']")));

		WebDriverWait print = new WebDriverWait(driver, 6);
		print.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_16']//i[@class='mce-ico mce-i-print']")));

		WebDriverWait preview = new WebDriverWait(driver, 6);
		preview.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-preview']")));

		WebDriverWait TextColor = new WebDriverWait(driver, 6);
		TextColor.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='mceu_18']//button[1]")));

		WebDriverWait backcolor = new WebDriverWait(driver, 6);
		backcolor.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-backcolor']")));

		WebDriverWait emoticons = new WebDriverWait(driver, 6);
		emoticons.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-emoticons']")));

		WebDriverWait Paragraph = new WebDriverWait(driver, 6);
		Paragraph.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//button[@id='mceu_21-open']//span[contains(text(),'Paragraph')]")));

		WebDriverWait FontFamily = new WebDriverWait(driver, 6);
		FontFamily.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[contains(text(),'Font Family')]")));

		WebDriverWait FontSizes = new WebDriverWait(driver, 6);
		FontSizes.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[contains(text(),'Font Sizes')]")));

		WebDriverWait Ilink = new WebDriverWait(driver, 6);
		Ilink.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_24']//i[@class='mce-ico mce-i-link']")));

		WebDriverWait Rlink = new WebDriverWait(driver, 6);
		Rlink.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-unlink']")));

		WebDriverWait Image = new WebDriverWait(driver, 6);
		Image.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_26']//i[@class='mce-ico mce-i-image']")));

		WebDriverWait HRline = new WebDriverWait(driver, 6);
		HRline.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//div[@id='mceu_27']//i[@class='mce-ico mce-i-hr']")));

		WebDriverWait fullscreen = new WebDriverWait(driver, 6);
		fullscreen.until(ExpectedConditions.elementToBeClickable(By.xpath("//i[@class='mce-ico mce-i-fullscreen']")));

		WebDriverWait SourceCode = new WebDriverWait(driver, 6);
		SourceCode.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='mceu_29']//button")));

	}

	public void ClickOnLeads_Campaigns() throws InterruptedException {

		Thread.sleep(2000);
		driver.findElement(By.xpath("//a[contains(text(),'Campaigns')]")).click();

	}

	public void VerifyLeads_Campaigns() throws InterruptedException {

		String SelectCampaignList = driver.findElement(By.xpath("//li[contains(text(),'Please Select a Campaign:')]"))
				.getText();
		System.out.println(SelectCampaignList);
		Assert.assertEquals("Please Select a Campaign:", SelectCampaignList);

		// CampaignList :>>

		List<WebElement> List = driver.findElements(By.xpath("//select[@id='changeCampSelect']"));
		System.out.println("Number of elements:" + List.size());

		for (int i = 0; i < List.size(); i++) {
			System.out.println("Available List is ==> : " + List.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='changeCampSelect']")).click();

		String NewCampgn = driver.findElement(By.xpath("//option[contains(text(),'New Campaign')]")).getText();
		System.out.println(NewCampgn);
		Assert.assertEquals("New Campaign", NewCampgn);

		String AnalyticsEmail = driver.findElement(By.xpath("//option[contains(text(),'Analytics Email')]")).getText();
		System.out.println(AnalyticsEmail);
		Assert.assertEquals("Analytics Email", AnalyticsEmail);

		String DealerEmail = driver.findElement(By.xpath("//option[contains(text(),'Dealer Email')]")).getText();
		System.out.println(DealerEmail);
		Assert.assertEquals("Dealer Email", DealerEmail);

		String NegativeReviewAlert = driver.findElement(By.xpath("//option[contains(text(),'Negative Review Alert')]"))
				.getText();
		System.out.println(NegativeReviewAlert);
		Assert.assertEquals("Negative Review Alert", NegativeReviewAlert);

		driver.findElement(By.xpath("//p[contains(text(),'Configure Your Campaign')]")).click();

		String CYC = driver.findElement(By.xpath("//p[contains(text(),'Configure Your Campaign')]")).getText();
		System.out.println(CYC);
		Assert.assertEquals("Configure Your Campaign", CYC);

	}

	public void VerifyLeads_Campaigns_ConfigureYourCampaign() {

		String CampaignName = driver.findElement(By.xpath("//td[contains(text(),'Campaign Name')]")).getText();
		System.out.println(CampaignName);
		Assert.assertEquals("Campaign Name", CampaignName);

		String ShortName = driver.findElement(By.xpath("//td[contains(text(),'Short Name')]")).getText();
		System.out.println(ShortName);
		Assert.assertEquals("Short Name", ShortName);

		String Channel = driver.findElement(By.xpath("//td[contains(text(),'Channel')]")).getText();
		System.out.println(Channel);
		Assert.assertEquals("Channel", Channel);

		String Type = driver.findElement(By.xpath("/descendant::td[contains(text(),'Type')][1]")).getText();
		System.out.println(Type);
		Assert.assertEquals("Type", Type);

		String CampaignDate = driver.findElement(By.xpath("//td[contains(text(),'Campaign Date')]")).getText();
		System.out.println(CampaignDate);
		Assert.assertEquals("Campaign Date", CampaignDate);

		String UCTF = driver.findElement(By.xpath("//label[contains(text(),'Use Custom Text File')]")).getText();
		System.out.println(UCTF);
		Assert.assertEquals("Use Custom Text File", UCTF);

		String USLT = driver.findElement(By.xpath("//label[contains(text(),'Use Store Locator Table')]")).getText();
		System.out.println(USLT);
		Assert.assertEquals("Use Store Locator Table", USLT);

		String ShortCode = driver.findElement(By.xpath("//td[contains(text(),'Short Code')]")).getText();
		System.out.println(ShortCode);
		Assert.assertEquals("Short Code", ShortCode);

		String DoubleOPt_In = driver.findElement(By.xpath("//label[contains(text(),'Double Opt-In')]")).getText();
		System.out.println(DoubleOPt_In);
		Assert.assertEquals("Double Opt-In", DoubleOPt_In);

	}

	public void VerifyLeads_Campaigns_ConfigureYourCampaign_Channel() throws InterruptedException {

		List<WebElement> ChannelList = driver.findElements(By.xpath("//select[@id='campChannelSelect']"));
		System.out.println("Number of elements:" + ChannelList.size());

		for (int i = 0; i < ChannelList.size(); i++) {
			System.out.println("Available List is ==> : " + ChannelList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='campChannelSelect']")).click();

		String API = driver.findElement(By.xpath("//option[contains(text(),'API')]")).getText();
		System.out.println(API);
		Assert.assertEquals("API", API);

		String WEB = driver.findElement(By.xpath("//option[contains(text(),'Web')]")).getText();
		System.out.println(WEB);
		Assert.assertEquals("Web", WEB);

		String SEARCH = driver.findElement(By.xpath("//option[contains(text(),'Search')]")).getText();
		System.out.println(SEARCH);
		Assert.assertEquals("Search", SEARCH);

		String IVR = driver.findElement(By.xpath("//option[contains(text(),'IVR')]")).getText();
		System.out.println(IVR);
		Assert.assertEquals("IVR", IVR);

		String MOBILE = driver.findElement(By.xpath("//option[contains(text(),'Mobile')]")).getText();
		System.out.println(MOBILE);
		Assert.assertEquals("Mobile", MOBILE);

		String SOCIAL = driver.findElement(By.xpath("//option[contains(text(),'Social')]")).getText();
		System.out.println(SOCIAL);
		Assert.assertEquals("Social", SOCIAL);

		String LDS = driver.findElement(By.xpath("//option[contains(text(),'LDS')]")).getText();
		System.out.println(LDS);
		Assert.assertEquals("LDS", LDS);

		String TV = driver.findElement(By.xpath("//option[contains(text(),'TV')]")).getText();
		System.out.println(TV);
		Assert.assertEquals("TV", TV);

	}

	public void VerifyLeads_Campaigns_ConfigureYourCampaign_Type() throws InterruptedException {

		List<WebElement> TypeList = driver.findElements(By.xpath("//select[@id='campTypeSelect']"));
		System.out.println("Number of elements:" + TypeList.size());

		for (int i = 0; i < TypeList.size(); i++) {
			System.out.println("Available List is ==> : " + TypeList.get(i).getText());
		}

		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='campTypeSelect']")).click();

		String CTC = driver.findElement(By.xpath("//option[contains(text(),'Click to Call')]")).getText();
		System.out.println(CTC);
		Assert.assertEquals("Click to Call", CTC);

		String Email = driver.findElement(By.xpath("//select[@id='campTypeSelect']//option[contains(text(),'Email')]"))
				.getText();
		System.out.println(Email);
		Assert.assertEquals("Email", Email);

		String IVR = driver.findElement(By.xpath("//option[contains(text(),'Interactive Voice Resp')]")).getText();
		System.out.println(IVR);
		Assert.assertEquals("Interactive Voice Resp", IVR);

		String CT = driver.findElement(By.xpath("//option[contains(text(),'Call Tracking')]")).getText();
		System.out.println(CT);
		Assert.assertEquals("Call Tracking", CT);

		String TM = driver.findElement(By.xpath("//option[contains(text(),'Text Message')]")).getText();
		System.out.println(TM);
		Assert.assertEquals("Text Message", TM);

		String CTBC = driver.findElement(By.xpath("//option[contains(text(),'Click to Be Contacted')]")).getText();
		System.out.println(CTBC);
		Assert.assertEquals("Click to Be Contacted", CTBC);

		String Statistics = driver.findElement(By.xpath("//option[contains(text(),'Statistics')]")).getText();
		System.out.println(Statistics);
		Assert.assertEquals("Statistics", Statistics);

		String PPA = driver.findElement(By.xpath("//option[contains(text(),'PPA')]")).getText();
		System.out.println(PPA);
		Assert.assertEquals("PPA", PPA);

		String PPC = driver.findElement(By.xpath("//option[contains(text(),'PPC')]")).getText();
		System.out.println(PPC);
		Assert.assertEquals("PPC", PPC);

		String NativeReview = driver.findElement(By.xpath("//option[contains(text(),'Native Review')]")).getText();
		System.out.println(NativeReview);
		Assert.assertEquals("Native Review", NativeReview);
	}

	public void VerifyLeads_Campaigns_SelectCampaigns_Options() throws InterruptedException {

		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='changeCampSelect']")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//option[contains(text(),'Analytics Email')]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='changeCampSelect']")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//option[contains(text(),'Dealer Email')]")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//select[@id='changeCampSelect']")).click();
		Thread.sleep(1500);
		driver.findElement(By.xpath("//option[contains(text(),'Negative Review Alert')]")).click();

		WebElement ViewSubscriber = driver.findElement(By.xpath("//a[@id='subscribersLink']"));
		ViewSubscriber.isDisplayed();

		WebElement SaveChanges = driver.findElement(By.xpath("//button[@id='editCampSubmit']"));
		SaveChanges.isDisplayed();

		WebElement EndCampaign = driver.findElement(By.xpath("//a[@id='campSubmit']"));
		EndCampaign.isDisplayed();
	}

	public void VerifyLeads_Campaigns_Campaign_FormFields() throws InterruptedException {

		String FF = driver.findElement(By.xpath("//p[contains(text(),'Form Fields')]")).getText();
		System.out.println(FF);
		Assert.assertTrue(FF.contains("Form Fields"));

		WebDriverWait FFBtn = new WebDriverWait(driver, 6);
		FFBtn.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@id='fieldsMaxMin']")));

		driver.findElement(By.xpath("//span[@id='fieldsMaxMin']")).click();
		Thread.sleep(1500);

		String AddNewField = driver.findElement(By.xpath("//p[@id='anchorCustomField']")).getText();
		System.out.println(AddNewField);
		Assert.assertTrue(AddNewField.contains("Select or Add New Field"));

		String SelectaField = driver.findElement(By.xpath("//td[contains(text(),'Select a Field:')]")).getText();
		System.out.println(SelectaField);
		Assert.assertTrue(SelectaField.contains("Select a Field:"));

		List<WebElement> NewField = driver.findElements(By.xpath("//select[@id='fieldEditorHeaderSelect']"));
		System.out.println("Number of elements:" + NewField.size());

		for (int i = 0; i < NewField.size(); i++) {
			System.out.println("Available List is ==> : " + NewField.get(i).getText());
		}

		String FN = driver.findElement(By.xpath("//td[contains(text(),'Field Name:')]")).getText();
		System.out.println(FN);
		Assert.assertTrue(FN.contains("Field Name:"));

		WebElement AddField = driver.findElement(By.xpath("//a[@id='fieldEditButton']"));
		AddField.isDisplayed();

		WebElement AddCustomerField = driver.findElement(By.xpath("//a[contains(text(),'Add Custom Field')]"));
		AddCustomerField.isDisplayed();

	}

	public void VerifyLeads_Campaigns_Campaign_FormFieldsAvailableFields() throws InterruptedException {

		Thread.sleep(1500);
		String AF = driver.findElement(By.xpath("//p[@class='fieldListHeader StepText']")).getText();
		System.out.println(AF);
		Assert.assertTrue(AF.contains("Available Fields:"));

		String Address1 = driver.findElement(By.xpath("//span[contains(text(),'address1')]")).getText();
		System.out.println(Address1);
		Assert.assertTrue(Address1.contains("address1"));

		String Address2 = driver.findElement(By.xpath("//span[contains(text(),'address2')]")).getText();
		System.out.println(Address2);
		Assert.assertTrue(Address2.contains("address2"));

		String addresstype = driver.findElement(By.xpath("//span[contains(text(),'addresstype')]")).getText();
		System.out.println(addresstype);
		Assert.assertTrue(addresstype.contains("addresstype"));

		String cellphone = driver.findElement(By.xpath("//span[contains(text(),'cellphone')]")).getText();
		System.out.println(cellphone);
		Assert.assertTrue(cellphone.contains("cellphone"));

		String city = driver.findElement(By.xpath("//span[contains(text(),'city')]")).getText();
		System.out.println(city);
		Assert.assertTrue(city.contains("city"));

		String country = driver.findElement(By.xpath("//span[contains(text(),'country')]")).getText();
		System.out.println(country);
		Assert.assertTrue(country.contains("country"));

		String dateadded = driver.findElement(By.xpath("//span[contains(text(),'dateadded')]")).getText();
		System.out.println(dateadded);
		Assert.assertTrue(dateadded.contains("dateadded"));

		String emailaddress = driver.findElement(By.xpath("//span[contains(text(),'emailaddress')]")).getText();
		System.out.println(emailaddress);
		Assert.assertTrue(emailaddress.contains("emailaddress"));

		String firstname = driver.findElement(By.xpath("//span[contains(text(),'firstname')]")).getText();
		System.out.println(firstname);
		Assert.assertTrue(firstname.contains("firstname"));

		String georesult = driver.findElement(By.xpath("//span[contains(text(),'georesult')]")).getText();
		System.out.println(georesult);
		Assert.assertTrue(georesult.contains("georesult"));

		String homephone = driver.findElement(By.xpath("//span[contains(text(),'homephone')]")).getText();
		System.out.println(homephone);
		Assert.assertTrue(homephone.contains("homephone"));

		String lastname = driver.findElement(By.xpath("//span[contains(text(),'lastname')]")).getText();
		System.out.println(lastname);
		Assert.assertTrue(lastname.contains("lastname"));

		String latitude = driver.findElement(By.xpath("//span[contains(text(),'latitude')]")).getText();
		System.out.println(latitude);
		Assert.assertTrue(latitude.contains("latitude"));

		String llpoint = driver.findElement(By.xpath("//span[contains(text(),'llpoint')]")).getText();
		System.out.println(llpoint);
		Assert.assertTrue(llpoint.contains("llpoint"));

		String longitude = driver.findElement(By.xpath("//span[contains(text(),'longitude')]")).getText();
		System.out.println(longitude);
		Assert.assertTrue(longitude.contains("longitude"));

		String optindate = driver.findElement(By.xpath("//span[contains(text(),'optindate')]")).getText();
		System.out.println(optindate);
		Assert.assertTrue(optindate.contains("optindate"));

		String optoutdate = driver.findElement(By.xpath("//span[contains(text(),'optoutdate')]")).getText();
		System.out.println(optoutdate);
		Assert.assertTrue(optoutdate.contains("optoutdate"));

		String postalcode = driver.findElement(By.xpath("//span[contains(text(),'postalcode')]")).getText();
		System.out.println(postalcode);
		Assert.assertTrue(postalcode.contains("postalcode"));

		String province = driver.findElement(By.xpath("//span[contains(text(),'province')]")).getText();
		System.out.println(province);
		Assert.assertTrue(province.contains("province"));

		String remoteip = driver.findElement(By.xpath("//span[contains(text(),'remoteip')]")).getText();
		System.out.println(remoteip);
		Assert.assertTrue(remoteip.contains("remoteip"));

		String source = driver.findElement(By.xpath("//span[contains(text(),'source')]")).getText();
		System.out.println(source);
		Assert.assertTrue(source.contains("source"));

		String state = driver.findElement(By.xpath("//span[contains(text(),'state')]")).getText();
		System.out.println(state);
		Assert.assertTrue(state.contains("state"));

		String subscriptionuid = driver.findElement(By.xpath("//span[contains(text(),'subscriptionuid')]")).getText();
		System.out.println(subscriptionuid);
		Assert.assertTrue(subscriptionuid.contains("subscriptionuid"));

		String uid = driver.findElement(By.xpath("/descendant::span[contains(text(),'uid')][2]")).getText();
		System.out.println(uid);
		Assert.assertTrue(uid.contains("uid"));

		String useragent = driver.findElement(By.xpath("//span[contains(text(),'useragent')]")).getText();
		System.out.println(useragent);
		Assert.assertTrue(useragent.contains("useragent"));

	}

	public void VerifyLeads_Campaigns_Campaign_ActiveRules() throws InterruptedException {

		Thread.sleep(1500);
		String ActiveRules = driver.findElement(By.xpath("//p[contains(text(),'Active Rules')]")).getText();
		System.out.println(ActiveRules);
		Assert.assertTrue(ActiveRules.contains("Active Rules"));

		WebDriverWait ARBtn = new WebDriverWait(driver, 6);
		ARBtn.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@id='rulesMaxMin']")));

		driver.findElement(By.xpath("//span[@id='rulesMaxMin']")).click();
		Thread.sleep(1500);

		String Type = driver.findElement(By.xpath("//div[@id='current_rules']//th[contains(text(),'Type')]")).getText();
		System.out.println(Type);
		Assert.assertTrue(Type.contains("Type"));

		String Freq = driver.findElement(By.xpath("//div[@id='current_rules']//th[contains(text(),'Freq.')]"))
				.getText();
		System.out.println(Freq);
		Assert.assertTrue(Freq.contains("Freq."));

		String Status = driver.findElement(By.xpath("//div[@id='current_rules']//th[contains(text(),'Status')]"))
				.getText();
		System.out.println(Status);
		Assert.assertTrue(Status.contains("Status"));

		String Message = driver.findElement(By.xpath("//div[@id='current_rules']//th[contains(text(),'Message')]"))
				.getText();
		System.out.println(Message);
		Assert.assertTrue(Message.contains("Message"));

		String AddNewRules = driver.findElement(By.xpath("//div[@id='current_rules']//td[@id='rule_cont_div']"))
				.getText();
		System.out.println(AddNewRules);
		Assert.assertTrue(AddNewRules.contains("Add New Rule"));

		Thread.sleep(1000);
		driver.findElement(By.xpath("//div[@id='current_rules']//td[@id='rule_cont_div']")).click();
		Thread.sleep(1000);

		String AR = driver.findElement(By.xpath("//p[@id='rulesHeaderDesc']")).getText();
		System.out.println(AR);
		Assert.assertTrue(AR.contains("Add Rule:"));

		String Frequency = driver.findElement(By.xpath("//td[contains(text(),'Frequency:')]")).getText();
		System.out.println(Frequency);
		Assert.assertTrue(Frequency.contains("Frequency:"));

		String type = driver.findElement(By.xpath("//form[@id='editRulesForm']//td[contains(text(),'Type:')]"))
				.getText();
		System.out.println(type);
		Assert.assertTrue(type.contains("Type:"));

		String status = driver.findElement(By.xpath("//td[contains(text(),'Status:')]")).getText();
		System.out.println(status);
		Assert.assertTrue(status.contains("Status:"));

		String message = driver.findElement(By.xpath("//td[contains(text(),'Message:')]")).getText();
		System.out.println(message);
		Assert.assertTrue(message.contains("Message:"));

		String Filter = driver.findElement(By.xpath("//td[contains(text(),'Filter:')]")).getText();
		System.out.println(Filter);
		Assert.assertTrue(Filter.contains("Filter:"));

		// Days ::>>
		List<WebElement> Days = driver.findElements(By.xpath("//select[@id='frequency_uom_input']"));
		System.out.println("Number of elements:" + Days.size());

		for (int i = 0; i < Days.size(); i++) {
			System.out.println("Available List is ==> : " + Days.get(i).getText());
		}

		// Types ::>>
		List<WebElement> types = driver.findElements(By.xpath("//select[@id='rule_type_input']"));
		System.out.println("Number of elements:" + types.size());

		for (int i = 0; i < types.size(); i++) {
			System.out.println("Available List is ==> : " + types.get(i).getText());
		}

		// Status ::>>>
		List<WebElement> Statuss = driver.findElements(By.xpath("//select[@id='status']"));
		System.out.println("Number of elements:" + Statuss.size());

		for (int i = 0; i < Statuss.size(); i++) {
			System.out.println("Available List is ==> : " + Statuss.get(i).getText());
		}

		WebElement Add = driver.findElement(By.xpath("//a[@id='filter_option']"));
		Add.isDisplayed();

		WebElement AddRules = driver.findElement(By.xpath("//input[@id='add_rule_input_b']"));
		AddRules.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//a[@id='cancel_add']"));
		Cancel.isDisplayed();

	}

	public void ClickOnLeads_BatchSMS() throws InterruptedException {

		Thread.sleep(1500);
		driver.findElement(By.xpath("//a[contains(text(),'Batch SMS')]")).click();

	}

	public void VerifyLeads_BatchSMS() {

		String SR = driver.findElement(By.xpath("//td[@class='smsLabel']")).getText();
		System.out.println(SR);
		Assert.assertTrue(SR.contains("Select Recipients:"));

		String mssg = driver.findElement(By.xpath("//tr[2]//td[1]")).getText();
		System.out.println(mssg);
		Assert.assertTrue(mssg.contains("Message:"));

		String Title = driver.findElement(By.xpath("//td[contains(text(),'Title:')]")).getText();
		System.out.println(Title);
		Assert.assertTrue(Title.contains("Title:"));

		String message = driver.findElement(By.xpath("//tr[@id='messageBox']//td[contains(text(),'Message:')]"))
				.getText();
		System.out.println(message);
		Assert.assertTrue(message.contains("Message:"));

		List<WebElement> Select = driver.findElements(By.xpath("//select[@id='toListSelect']"));
		System.out.println("Number of elements:" + Select.size());

		for (int i = 0; i < Select.size(); i++) {
			System.out.println("Available List is ==> : " + Select.get(i).getText());
		}

		List<WebElement> Message = driver.findElements(By.xpath("//select[@id='curMessageSelect']"));
		System.out.println("Number of elements:" + Message.size());

		for (int i = 0; i < Message.size(); i++) {
			System.out.println("Available List is ==> : " + Message.get(i).getText());
		}

		WebElement Submit = driver.findElement(By.xpath("//input[@id='batchSubmit']"));
		Submit.isDisplayed();

	}

	public void ClickOnLeads_Manager() {
		driver.findElement(By.xpath("//a[contains(text(),'Manager')]")).click();
	}

	public void VerifyLeads_ManagerTab() {

		WebElement AddNewCampaignBTN = driver.findElement(By.xpath("//a[contains(text(),'Add New Campaign')]"));
		AddNewCampaignBTN.isDisplayed();

		WebElement AddNewMessageBTN = driver.findElement(By.xpath("//a[contains(text(),'Add New Message')]"));
		AddNewMessageBTN.isDisplayed();

		WebElement CampaignName = driver
				.findElement(By.xpath("//div[@id='campaigns']//td[contains(text(),'Campaign Name')]"));
		CampaignName.isDisplayed();

		WebElement Type = driver.findElement(By.xpath("//div[@id='campaigns']//td[contains(text(),'Type')]"));
		Type.isDisplayed();

		WebElement CampaignDate = driver
				.findElement(By.xpath("//div[@id='campaigns']//td[contains(text(),'Campaign Date')]"));
		CampaignDate.isDisplayed();

		List<WebElement> TableDataList = driver.findElements(By.xpath("//div[@id='MainWrap']//tbody//tr//td"));
		System.out.println("Number of elements:" + TableDataList.size());

		for (int i = 0; i < TableDataList.size(); i++) {
			System.out.println("Available List is ==> : " + TableDataList.get(i).getText());
		}

	}

	public void GoToAccounts() throws InterruptedException {

		Thread.sleep(2000);
		Accounts.click();

	}

	public void VerifyAccountsTab() {

		WebElement UserSettings = driver.findElement(By.xpath("//a[contains(text(),'User Settings')]"));
		UserSettings.isDisplayed();

		WebElement ClientInformation = driver.findElement(By.xpath("//a[contains(text(),'Client Information')]"));
		ClientInformation.isDisplayed();

		WebElement CreateAccount = driver.findElement(By.xpath("//a[contains(text(),'Create Account')]"));
		CreateAccount.isDisplayed();

		WebElement LocatorInformation = driver.findElement(By.xpath("//a[contains(text(),'Locator Information')]"));
		LocatorInformation.isDisplayed();

	}

	public void VerifyAccount_UserSettings() {

		WebElement User = driver.findElement(By.xpath("//h3[contains(text(),'Users')]"));
		User.isDisplayed();

		List<WebElement> UsersList = driver.findElements(By.xpath("//ul[@id='user_results_list']"));
		System.out.println("Number of elements:" + UsersList.size());

		for (int i = 0; i < UsersList.size(); i++) {
			System.out.println("Available List is ==> : " + UsersList.get(i).getText());
		}

		WebElement Groups = driver.findElement(By.xpath("//h3[contains(text(),'Groups')]"));
		Groups.isDisplayed();

		List<WebElement> GroupList = driver.findElements(By.xpath("//ul[@id='group_results_list']"));
		System.out.println("Number of elements:" + GroupList.size());

		for (int i = 0; i < GroupList.size(); i++) {
			System.out.println("Available List is ==> : " + GroupList.get(i).getText());
		}

	}

	public void VerifyAccount_UserSettings_AddNewUser() throws InterruptedException {

		driver.findElement(By.xpath("//strong[contains(text(),'Add User')]")).click();
		Thread.sleep(2000);

		String NewUser = driver.findElement(By.xpath("//strong[contains(text(),'New User')]")).getText();
		System.out.println(NewUser);
		Assert.assertTrue(NewUser.contains("New User"));

		WebElement Add = driver.findElement(By.xpath("//button[@id='Add_person']"));
		Add.isDisplayed();

		WebElement Clear = driver.findElement(By.xpath("//button[@id='Clear_person']"));
		Clear.isDisplayed();

		String EnterUserName = driver.findElement(By.xpath("//span[contains(text(),'Enter a Username')]")).getText();
		System.out.println(EnterUserName);
		Assert.assertTrue(EnterUserName.contains("Enter a Username"));

		WebElement UNameTextField = driver.findElement(By.xpath("//input[@id='username']"));
		UNameTextField.isDisplayed();

	}

	public void VerifyAccount_UserSettings_AddNewUserGroups() throws InterruptedException {

		Thread.sleep(2000);
		driver.findElement(By.xpath("//strong[contains(text(),'Add Group')]")).click();
		Thread.sleep(2000);

		String GroupDetail = driver.findElement(By.xpath("//strong[contains(text(),'Group Detail')]")).getText();
		System.out.println(GroupDetail);
		Assert.assertTrue(GroupDetail.contains("Group Detail"));

		WebElement Add = driver.findElement(By.xpath("//button[@id='Add_group']"));
		Add.isDisplayed();

		WebElement Clear = driver.findElement(By.xpath("//button[@id='Clear_group']"));
		Clear.isDisplayed();

		String EnterGroupName = driver.findElement(By.xpath("//span[contains(text(),'Name')]")).getText();
		System.out.println(EnterGroupName);
		Assert.assertTrue(EnterGroupName.contains("Name"));

		WebElement GroupNameTextField = driver.findElement(By.xpath("//input[@id='name']"));
		GroupNameTextField.isDisplayed();

	}

	public void GoTOAccount_ClientInformation() {

		Accounts_ClientInfo.click();
	}

	public void VerifyAccount_ClientInformation_Errormessage() throws InterruptedException {

		Thread.sleep(2000);
		boolean Notice = driver.findElement(By.xpath("//span[@id='lightwindow_title_bar_title']")).isDisplayed();
		System.out.println(Notice);

		boolean Close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']")).isDisplayed();
		System.out.println(Close);

		boolean ErrorMessage = driver
				.findElement(By.xpath("//div[contains(text(),'SyntaxError: Unexpected token B in JSON at positio')]"))
				.isDisplayed();
		System.out.println(ErrorMessage);

		Thread.sleep(2000);
		WebElement close = driver.findElement(By.xpath("//a[@id='lightwindow_title_bar_close_link']"));
		close.click();
		Thread.sleep(2000);

	}

	public void VerifyAccount_ClientInformation() {

		WebElement GeostixAutomation = driver.findElement(By.xpath("//h2[@id='geostixautomation_account']"));
		GeostixAutomation.isDisplayed();

		WebElement Account = driver.findElement(By.xpath("//div[@id='page_header']//li[contains(text(),'Accounts')]"));
		Account.isDisplayed();

		WebElement ParentClient = driver
				.findElement(By.xpath("//div[@id='page_header']//li[contains(text(),'Parent Client')]"));
		ParentClient.isDisplayed();

		WebElement ChangeParentClientBtn = driver
				.findElement(By.xpath("//div[@id='page_header']//input[@id='change_parent_client']"));
		ChangeParentClientBtn.isDisplayed();

		WebElement EditClientDetail = driver
				.findElement(By.xpath("//div[@id='page_header']//input[@id='edit_client_details']"));
		EditClientDetail.isDisplayed();

		WebElement ScheduleFollowUp = driver
				.findElement(By.xpath("//div[@id='page_header']//input[@id='schedule_follow_up']"));
		ScheduleFollowUp.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_ClientDetails() {

		WebElement ClientDetailHeader = driver.findElement(By.xpath("//p[@id='allFieldsLabel_clientdetails']"));
		ClientDetailHeader.isDisplayed();

		WebElement DetailInfo = driver.findElement(By.xpath("//p[contains(text(),'Detailed Information')]"));
		DetailInfo.isDisplayed();

		WebElement ParentClient = driver
				.findElement(By.xpath("//div[@id='page_header']//li[contains(text(),'Parent Client')]"));
		ParentClient.isDisplayed();

		// Detailed Information ::>>>>>>>>

		List<WebElement> ClientDetailInfoListLeft = driver.findElements(
				By.xpath("//div[@id='left_col_in_detailedinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + ClientDetailInfoListLeft.size());

		for (int i = 0; i < ClientDetailInfoListLeft.size(); i++) {
			System.out.println("Available List is ==> : " + ClientDetailInfoListLeft.get(i).getText());
		}

		List<WebElement> ClientDetailInfoListRight = driver.findElements(
				By.xpath("//div[@id='right_col_in_detailedinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + ClientDetailInfoListRight.size());

		for (int i = 0; i < ClientDetailInfoListRight.size(); i++) {
			System.out.println("Available List is ==> : " + ClientDetailInfoListRight.get(i).getText());
		}

		// Legal and Marketing Information ::>>>>>>>>

		WebElement LegalandMarketingInformation = driver
				.findElement(By.xpath("//p[contains(text(),'Legal and Marketing Information')]"));
		LegalandMarketingInformation.isDisplayed();

		List<WebElement> LnMInfoListLeft = driver
				.findElements(By.xpath("//div[@id='left_col_in_legalinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + LnMInfoListLeft.size());

		for (int i = 0; i < LnMInfoListLeft.size(); i++) {
			System.out.println("Available List is ==> : " + LnMInfoListLeft.get(i).getText());
		}

		List<WebElement> LnMInfoListRight = driver.findElements(
				By.xpath("//div[@id='right_col_in_legalinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + LnMInfoListRight.size());

		for (int i = 0; i < LnMInfoListRight.size(); i++) {
			System.out.println("Available List is ==> : " + LnMInfoListRight.get(i).getText());
		}

		// Company Information ::>>>>>>>>

		WebElement CompanyInformation = driver.findElement(By.xpath("//p[contains(text(),'Company Information')]"));
		CompanyInformation.isDisplayed();

		List<WebElement> CompanyInfoListLeft = driver.findElements(
				By.xpath("//div[@id='left_col_in_companyinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + CompanyInfoListLeft.size());

		for (int i = 0; i < CompanyInfoListLeft.size(); i++) {
			System.out.println("Available List is ==> : " + CompanyInfoListLeft.get(i).getText());
		}

		List<WebElement> CompanyInfoListRight = driver.findElements(
				By.xpath("//div[@id='right_col_in_companyinformation']//table[@class='accountDetail']//tr"));
		System.out.println("Number of elements:" + CompanyInfoListRight.size());

		for (int i = 0; i < CompanyInfoListRight.size(); i++) {
			System.out.println("Available List is ==> : " + CompanyInfoListRight.get(i).getText());
		}
	}

	public void VerifyAccount_ClientInformation_ProductDetails() {

		WebElement productsinformation = driver.findElement(By.xpath("//p[@id='table_label_productsinformation']"));
		productsinformation.isDisplayed();
		productsinformation.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_productsinformation']"));
		Actions.isDisplayed();

		WebElement ContractName = driver.findElement(By.xpath("//th[@id='contractname_in_productsinformation']"));
		ContractName.isDisplayed();

		WebElement Product = driver.findElement(By.xpath("//th[@id='productname_in_productsinformation']"));
		Product.isDisplayed();

		WebElement GoLiveDate = driver.findElement(By.xpath("//th[@id='golivedate_in_productsinformation']"));
		GoLiveDate.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_Notes() {

		WebElement notesInformationSection = driver.findElement(By.xpath("//div[@id='notesInformationSection']"));
		notesInformationSection.isDisplayed();
		notesInformationSection.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_notesinformation']"));
		Actions.isDisplayed();

		WebElement Notes = driver.findElement(By.xpath("//th[@id='notevalue_in_notesinformation']"));
		Notes.isDisplayed();

		WebElement SubmittedBy = driver.findElement(By.xpath("//th[@id='submittedby_in_notesinformation']"));
		SubmittedBy.isDisplayed();

		WebElement CreationDate = driver.findElement(By.xpath("//th[@id='effectivedate_in_notesinformation']"));
		CreationDate.isDisplayed();

		WebElement NoteType = driver.findElement(By.xpath("//th[@id='notetype_in_notesinformation']"));
		NoteType.isDisplayed();

		WebElement Association = driver.findElement(By.xpath("//th[@id='association_in_notesinformation']"));
		Association.isDisplayed();

		WebElement Account = driver.findElement(By.xpath("//th[@id='account_in_notesinformation']"));
		Account.isDisplayed();

		WebElement AddNewAccount = driver.findElement(By.xpath("//td[@id='action_new_in_notesinformation']"));
		AddNewAccount.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_Notes_AddNewAccountForm() {

		WebElement AddNewAccount = driver.findElement(By.xpath("//td[@id='action_new_in_notesinformation']"));
		AddNewAccount.isDisplayed();
		AddNewAccount.click();

		WebElement Notes = driver.findElement(By.xpath("//p[@id='allFieldsLabel_notesinformation']"));
		Notes.isDisplayed();

		WebElement AssociationType = driver.findElement(By.xpath("//td[@id='objectclass_name']"));
		AssociationType.isDisplayed();

		WebElement WithAccount = driver.findElement(By.xpath("//label[contains(text(),'With Account')]"));
		WithAccount.isDisplayed();

		WebElement WithContactPerson = driver.findElement(By.xpath("//label[contains(text(),'With Contact Person')]"));
		WithContactPerson.isDisplayed();

		WebElement WithContractRecord = driver
				.findElement(By.xpath("//label[contains(text(),'With Contract Record')]"));
		WithContractRecord.isDisplayed();

		WebElement WithInvoiceRecord = driver.findElement(By.xpath("//label[contains(text(),'With Invoice Record')]"));
		WithInvoiceRecord.isDisplayed();

		WebElement Account = driver.findElement(By.xpath("//td[@id='objectuid_name']"));
		Account.isDisplayed();

		WebElement AccountDropDownBox = driver
				.findElement(By.xpath("//select[@id='input_objectuid_in_notesinformation']"));
		AccountDropDownBox.isDisplayed();

		WebElement NoteType = driver.findElement(By.xpath("//td[@id='notetype_name']"));
		NoteType.isDisplayed();

		WebElement NoteTypeDropDownBox = driver.findElement(By.xpath("//span[contains(text(),'-Select an option-')]"));
		NoteTypeDropDownBox.isDisplayed();

		WebElement notes = driver.findElement(By.xpath("//td[@id='note_name']"));
		notes.isDisplayed();

		WebElement notesTextField = driver.findElement(By.xpath("//textarea[@id='input_note_in_notearea']"));
		notesTextField.isDisplayed();

		WebElement SaveBtn = driver.findElement(By.xpath("//li[@id='action_save_new_notesinformation_0']"));
		SaveBtn.isDisplayed();

		WebElement SaveNScheduleBtn = driver
				.findElement(By.xpath("//li[@id='action_saveandschedulefollowup_new_notesinformation_0']"));
		SaveNScheduleBtn.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//li[@id='action_cancel_new_notesinformation_0']"));
		Cancel.isDisplayed();
		Cancel.click();

	}

	public void VerifyAccount_ClientInformation_Attachments() {

		WebElement AttachmentsHeader = driver.findElement(By.xpath("//p[@id='table_label_attachmentinformation']"));
		AttachmentsHeader.isDisplayed();
		AttachmentsHeader.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_attachmentinformation']"));
		Actions.isDisplayed();

		WebElement FileName = driver.findElement(By.xpath("//th[@id='originalFilename_in_attachmentinformation']"));
		FileName.isDisplayed();

		WebElement UploadDate = driver.findElement(By.xpath("//th[@id='createdDate_in_attachmentinformation']"));
		UploadDate.isDisplayed();

		WebElement AddNewAttachment = driver.findElement(By.xpath("//td[@id='action_new_in_attachmentinformation']"));
		AddNewAttachment.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_AccountContactInformation() {

		WebElement AccountContactInfoHeader = driver.findElement(By.xpath("//p[@id='table_label_contactinformation']"));
		AccountContactInfoHeader.isDisplayed();
		AccountContactInfoHeader.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_contactinformation']"));
		Actions.isDisplayed();

		WebElement EmailAddress = driver.findElement(By.xpath("//th[@id='emailaddress_in_contactinformation']"));
		EmailAddress.isDisplayed();

		WebElement Accounts = driver.findElement(By.xpath("//th[@id='accountsvalue_in_contactinformation']"));
		Accounts.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//th[@id='name_in_contactinformation']"));
		Name.isDisplayed();

		WebElement Title = driver.findElement(By.xpath("//th[@id='title_in_contactinformation']"));
		Title.isDisplayed();

		WebElement Phone = driver.findElement(By.xpath("//th[@id='phone_selected_in_contactinformation']"));
		Phone.isDisplayed();

		WebElement AddressType = driver.findElement(By.xpath("//th[@id='addresstype_in_contactinformation']"));
		AddressType.isDisplayed();

		List<WebElement> ContactList = driver
				.findElements(By.xpath("//div[@id='contactInformationSection']//tbody//td"));
		System.out.println("Number of elements:" + ContactList.size());

		for (int i = 0; i < ContactList.size(); i++) {
			System.out.println("Available List is ==> : " + ContactList.get(i).getText());
		}

	}

	public void VerifyAccount_ClientInformation_BillingContactInformation() {

		WebElement BillingContactInfoHeader = driver
				.findElement(By.xpath("//div[@id='clientContactInformationSection']"));
		BillingContactInfoHeader.isDisplayed();
		BillingContactInfoHeader.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_clientcontactinformation']"));
		Actions.isDisplayed();

		WebElement EmailAddress = driver.findElement(By.xpath("//th[@id='emailaddress_in_clientcontactinformation']"));
		EmailAddress.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//th[@id='name_in_clientcontactinformation']"));
		Name.isDisplayed();

		WebElement Title = driver.findElement(By.xpath("//th[@id='title_in_clientcontactinformation']"));
		Title.isDisplayed();

		WebElement Phone = driver.findElement(By.xpath("//th[@id='phone_selected_in_clientcontactinformation']"));
		Phone.isDisplayed();

		WebElement AddressType = driver.findElement(By.xpath("//th[@id='addresstype_in_clientcontactinformation']"));
		AddressType.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_clientcontactinformation']"));
		AddNew.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_PipeLine() {

		WebElement PipeLine = driver.findElement(By.xpath("//div[@id='opportunityInformationSection']"));
		PipeLine.isDisplayed();
		PipeLine.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_opportunityinformation']"));
		Actions.isDisplayed();

		WebElement Product = driver.findElement(By.xpath("//th[@id='productnames_in_opportunityinformation']"));
		Product.isDisplayed();

		WebElement Price = driver.findElement(By.xpath("//th[@id='price_in_opportunityinformation']"));
		Price.isDisplayed();

		WebElement Stage = driver.findElement(By.xpath("//th[@id='stage_in_opportunityinformation']"));
		Stage.isDisplayed();

		WebElement TargetDate = driver.findElement(By.xpath("//th[@id='targetdate_in_opportunityinformation']"));
		TargetDate.isDisplayed();

		WebElement Note = driver.findElement(By.xpath("//th[@id='notevalue_in_opportunityinformation']"));
		Note.isDisplayed();

		WebElement TimeStamp = driver.findElement(By.xpath("//th[@id='effectivedate_in_opportunityinformation']"));
		TimeStamp.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_opportunityinformation']"));
		AddNew.isDisplayed();

	}

	public void VerifyAccount_ClientInformation_ForeCast() {

		WebElement ForeCast = driver.findElement(By.xpath("//div[@id='forecastInformationSection']"));
		ForeCast.isDisplayed();
		ForeCast.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_forecastinformation']"));
		Actions.isDisplayed();

		WebElement Status = driver.findElement(By.xpath("//th[@id='sowstatus_in_forecastinformation']"));
		Status.isDisplayed();

		WebElement ContractName = driver.findElement(By.xpath("//th[@id='name_in_forecastinformation']"));
		ContractName.isDisplayed();

		WebElement ContractDate = driver.findElement(By.xpath("//th[@id='contractdate_in_forecastinformation']"));
		ContractDate.isDisplayed();

		WebElement Products = driver.findElement(By.xpath("//th[@id='productnames_in_forecastinformation']"));
		Products.isDisplayed();

		WebElement AutoRenewal = driver.findElement(By.xpath("//th[@id='autorenew_in_forecastinformation']"));
		AutoRenewal.isDisplayed();

		WebElement TransactionLimit = driver
				.findElement(By.xpath("//th[@id='transactionsvalue_in_forecastinformation']"));
		TransactionLimit.isDisplayed();

		WebElement Templets = driver.findElement(By.xpath("//th[@id='templates_in_forecastinformation']"));
		Templets.isDisplayed();

		WebElement Price = driver.findElement(By.xpath("//th[@id='annualfeevalue_in_forecastinformation']"));
		Price.isDisplayed();

		WebElement Notes = driver.findElement(By.xpath("//th[@id='notesvalue_in_forecastinformation']"));
		Notes.isDisplayed();

		WebElement Confidence = driver.findElement(By.xpath("//th[@id='confidence_in_forecastinformation']"));
		Confidence.isDisplayed();

		WebElement Trac = driver.findElement(By.xpath("//th[@id='tracnumber_in_forecastinformation']"));
		Trac.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//div[@id='forecastInformationSection']//tr[2]"));
		AddNew.isDisplayed();
	}

	public void VerifyAccount_ClientInformation_ContractInfo() {

		WebElement ContractInfo = driver.findElement(By.xpath("//div[@id='contractInformationSection']"));
		ContractInfo.isDisplayed();
		ContractInfo.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_contractinformation']"));
		Actions.isDisplayed();

		WebElement Status = driver.findElement(By.xpath("//th[@id='sowstatus_in_contractinformation']"));
		Status.isDisplayed();

		WebElement ContractName = driver.findElement(By.xpath("//th[@id='name_in_contractinformation']"));
		ContractName.isDisplayed();

		WebElement ContractDate = driver.findElement(By.xpath("//th[@id='contractdate_in_contractinformation']"));
		ContractDate.isDisplayed();

		WebElement Products = driver.findElement(By.xpath("//th[@id='productnames_in_contractinformation']"));
		Products.isDisplayed();

		WebElement AutoRenewal = driver.findElement(By.xpath("//th[@id='autorenew_in_contractinformation']"));
		AutoRenewal.isDisplayed();

		WebElement TransactionLimit = driver
				.findElement(By.xpath("//th[@id='transactionsvalue_in_contractinformation']"));
		TransactionLimit.isDisplayed();

		WebElement Templets = driver.findElement(By.xpath("//th[@id='templates_in_contractinformation']"));
		Templets.isDisplayed();

		WebElement Price = driver.findElement(By.xpath("//th[@id='annualfeevalue_in_contractinformation']"));
		Price.isDisplayed();

		WebElement Location = driver.findElement(By.xpath("//th[@id='locationscombined_in_contractinformation']"));
		Location.isDisplayed();

		WebElement Notes = driver.findElement(By.xpath("//th[@id='notesvalue_in_contractinformation']"));
		Notes.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_contractinformation']"));
		AddNew.isDisplayed();
	}

	public void VerifyAccount_ClientInformation_InvoiceInfo() {

		WebElement InvoiceInfo = driver.findElement(By.xpath("//div[@id='invoiceInformationSection']"));
		InvoiceInfo.isDisplayed();
		InvoiceInfo.click();

		WebElement Actions = driver.findElement(By.xpath("//th[@id='actions_in_invoiceinformation']"));
		Actions.isDisplayed();

		WebElement Type = driver.findElement(By.xpath("//th[@id='invoicetype_in_invoiceinformation']"));
		Type.isDisplayed();

		WebElement Status = driver.findElement(By.xpath("//th[@id='invoicestatus_in_invoiceinformation']"));
		Status.isDisplayed();

		WebElement InvoiceNumber = driver.findElement(By.xpath("//th[@id='invoicenumber_in_invoiceinformation']"));
		InvoiceNumber.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//th[@id='name_in_invoiceinformation']"));
		Name.isDisplayed();

		WebElement Products = driver.findElement(By.xpath("//th[@id='productnames_in_contractinformation']"));
		Products.isDisplayed();

		WebElement DateCreated = driver.findElement(By.xpath("//th[@id='invoicesentdate_in_invoiceinformation']"));
		DateCreated.isDisplayed();

		WebElement ParentContract = driver.findElement(By.xpath("//th[@id='parentcontract_in_invoiceinformation']"));
		ParentContract.isDisplayed();

		WebElement Price = driver.findElement(By.xpath("//th[@id='annualfeevalue_in_invoiceinformation']"));
		Price.isDisplayed();

		WebElement Notes = driver.findElement(By.xpath("//th[@id='notes_in_invoiceinformation']"));
		Notes.isDisplayed();

		WebElement InvoiceStartDate = driver
				.findElement(By.xpath("//th[@id='invoicestartdate_in_invoiceinformation']"));
		InvoiceStartDate.isDisplayed();

		WebElement InvoiceEndDate = driver.findElement(By.xpath("//th[@id='invoiceenddate_in_invoiceinformation']"));
		InvoiceEndDate.isDisplayed();

		WebElement InvoiceFrequency = driver
				.findElement(By.xpath("//th[@id='invoicefrequencytext_in_invoiceinformation']"));
		InvoiceFrequency.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_invoiceinformation']"));
		AddNew.isDisplayed();
	}

	public void VerifyAccount_ClientInformation_SchedulerInfo() {

		WebElement SchedulerInfo = driver.findElement(By.xpath("//div[@id='schedulerInformationSection']"));
		SchedulerInfo.isDisplayed();
		SchedulerInfo.click();

		WebElement LoadSchedule = driver
				.findElement(By.xpath("//table[@id='table_schedulerinformation']//input[@class='GrayButton']"));
		LoadSchedule.isDisplayed();

		WebElement Title = driver.findElement(By.xpath("//th[@id='title_in_schedulerinformation']"));
		Title.isDisplayed();

		WebElement Where = driver.findElement(By.xpath("//th[@id='where_in_schedulerinformation']"));
		Where.isDisplayed();

		WebElement Discription = driver.findElement(By.xpath("//th[@id='description_in_schedulerinformation']"));
		Discription.isDisplayed();

		WebElement ContactInvited = driver.findElement(By.xpath("//th[@id='invitetovalue_in_schedulerinformation']"));
		ContactInvited.isDisplayed();

		WebElement When = driver.findElement(By.xpath("//th[@id='datetime_in_schedulerinformation']"));
		When.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_schedulerinformation']"));
		AddNew.isDisplayed();
	}

	public void GoToAccount_CreateAccount() {

		Accounts_CreateAccount.click();

	}

	public void VerifyAccount_CreateAccount_ClientInfo() {

		WebElement ClientInfo = driver.findElement(By.xpath("//h3[contains(text(),'Client Information')]"));
		ClientInfo.isDisplayed();

		WebElement ClientName = driver.findElement(By.xpath("//td[contains(text(),'Client Name')]"));
		ClientName.isDisplayed();

		WebElement ClientNameTextField = driver.findElement(By.xpath("//input[@id='client_name']"));
		ClientNameTextField.isDisplayed();

		WebElement or = driver.findElement(By.xpath("//td[contains(text(),'-or-')]"));
		or.isDisplayed();

		List<WebElement> orList = driver.findElements(By.xpath("//div[@id='clients_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + orList.size());

		for (int i = 0; i < orList.size(); i++) {
			System.out.println("Available List is ==> : " + orList.get(i).getText());
		}

		WebElement AccountName = driver.findElement(By.xpath("//td[contains(text(),'Account Name')]"));
		AccountName.isDisplayed();

		WebElement Industry = driver.findElement(By.xpath("//td[contains(text(),'Industry')]"));
		Industry.isDisplayed();

		List<WebElement> IndustryList = driver.findElements(By.xpath("//select[@id='client_industry']//option"));
		System.out.println("Number of elements:" + IndustryList.size());

		for (int i = 0; i < IndustryList.size(); i++) {
			System.out.println("Available List is ==> : " + IndustryList.get(i).getText());
		}

		WebElement AutoRep = driver.findElement(By.xpath("//td[contains(text(),'Account Rep')]"));
		AutoRep.isDisplayed();

		List<WebElement> AutoRepList = driver.findElements(By.xpath("//select[@id='accountmanager']"));
		System.out.println("Number of elements:" + AutoRepList.size());

		for (int i = 0; i < AutoRepList.size(); i++) {
			System.out.println("Available List is ==> : " + AutoRepList.get(i).getText());
		}

		WebElement CsRep = driver.findElement(By.xpath("//td[contains(text(),'CS Rep')]"));
		CsRep.isDisplayed();

		List<WebElement> CsRepList = driver.findElements(By.xpath("//select[@id='csmanager']"));
		System.out.println("Number of elements:" + CsRepList.size());

		for (int i = 0; i < CsRepList.size(); i++) {
			System.out.println("Available List is ==> : " + CsRepList.get(i).getText());
		}

		WebElement Status = driver.findElement(By.xpath("//tr[@class='client_only']//td[contains(text(),'Status')]"));
		Status.isDisplayed();

		List<WebElement> StatusList = driver.findElements(By.xpath("//select[@id='clientstatus']"));
		System.out.println("Number of elements:" + StatusList.size());

		for (int i = 0; i < StatusList.size(); i++) {
			System.out.println("Available List is ==> : " + StatusList.get(i).getText());
		}

		WebElement Agency = driver.findElement(By.xpath("//td[contains(text(),'Agency?')]"));
		Agency.isDisplayed();

		WebElement PaymentTerm = driver.findElement(By.xpath("//td[contains(text(),'Payment Term')]"));
		PaymentTerm.isDisplayed();

		List<WebElement> PaymentTermList = driver.findElements(By.xpath("//select[@id='clientpaymentterm']"));
		System.out.println("Number of elements:" + PaymentTermList.size());

		for (int i = 0; i < PaymentTermList.size(); i++) {
			System.out.println("Available List is ==> : " + PaymentTermList.get(i).getText());
		}

		WebElement OrganizationType = driver.findElement(By.xpath("//td[contains(text(),'Organization Type')]"));
		OrganizationType.isDisplayed();

		List<WebElement> OrganizationTypeList = driver.findElements(By.xpath("//select[@id='clientorgtype']"));
		System.out.println("Number of elements:" + OrganizationTypeList.size());

		for (int i = 0; i < OrganizationTypeList.size(); i++) {
			System.out.println("Available List is ==> : " + OrganizationTypeList.get(i).getText());
		}

		WebElement WebAddress = driver.findElement(By.xpath("//td[contains(text(),'Web Address')]"));
		WebAddress.isDisplayed();

		WebElement Country = driver.findElement(By.xpath("//tr[@class='client_only']//td[contains(text(),'Country')]"));
		Country.isDisplayed();

		List<WebElement> CountryList = driver
				.findElements(By.xpath("//div[@id='client_country_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + CountryList.size());

		for (int i = 0; i < CountryList.size(); i++) {
			System.out.println("Available List is ==> : " + CountryList.get(i).getText());
		}

		WebElement Address = driver.findElement(By.xpath("//tr[13]//td[contains(text(),'Address')]"));
		Address.isDisplayed();

		WebElement Address2 = driver.findElement(By.xpath("//td[contains(text(),'Address Line 2 (Optional)')]"));
		Address2.isDisplayed();

		WebElement City = driver.findElement(By.xpath("//tr[@class='client_only']//td[contains(text(),'City')]"));
		City.isDisplayed();

		WebElement PostalCode = driver.findElement(By.xpath("//td[contains(text(),'Postal Code')]"));
		PostalCode.isDisplayed();

		WebElement State = driver.findElement(
				By.xpath("//tr[@id='company_state_div']//td[@class='valignTop'][contains(text(),'State')]"));
		State.isDisplayed();

		List<WebElement> StateList = driver
				.findElements(By.xpath("//div[@id='client_state_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + StateList.size());

		for (int i = 0; i < StateList.size(); i++) {
			System.out.println("Available List is ==> : " + StateList.get(i).getText());
		}
	}

	public void VerifyAccount_CreateAccount_LegalandMarketingInfo() {

		WebElement LegalandMarketingInfo = driver
				.findElement(By.xpath("//h3[contains(text(),'Legal and Marketing Information')]"));
		LegalandMarketingInfo.isDisplayed();

		WebElement MSAStatus = driver.findElement(By.xpath("//td[contains(text(),'MSA Status')]"));
		MSAStatus.isDisplayed();

		List<WebElement> MSAStatusList = driver.findElements(By.xpath("//select[@id='msastatus']"));
		System.out.println("Number of elements:" + MSAStatusList.size());

		for (int i = 0; i < MSAStatusList.size(); i++) {
			System.out.println("Available List is ==> : " + MSAStatusList.get(i).getText());
		}

		WebElement MSAType = driver.findElement(By.xpath("//td[contains(text(),'MSA Type')]"));
		MSAType.isDisplayed();

		List<WebElement> MSATypeList = driver.findElements(By.xpath("//select[@id='msatype']"));
		System.out.println("Number of elements:" + MSATypeList.size());

		for (int i = 0; i < MSATypeList.size(); i++) {
			System.out.println("Available List is ==> : " + MSATypeList.get(i).getText());
		}

		WebElement MSAAutoReview = driver
				.findElement(By.xpath("/descendant::td[contains(text(),'MSA Auto Renew')][1]"));
		MSAAutoReview.isDisplayed();

		WebElement MSADate = driver.findElement(By.xpath("//td[contains(text(),'MSA Date')]"));
		MSADate.isDisplayed();

		WebElement IndemnificationType = driver.findElement(By.xpath("//td[contains(text(),'Indemnification Type')]"));
		IndemnificationType.isDisplayed();

		List<WebElement> IndemnificationTypeList = driver.findElements(By.xpath("//select[@id='indemnification']"));
		System.out.println("Number of elements:" + IndemnificationTypeList.size());

		for (int i = 0; i < IndemnificationTypeList.size(); i++) {
			System.out.println("Available List is ==> : " + IndemnificationTypeList.get(i).getText());
		}

		WebElement DefenceType = driver.findElement(By.xpath("//td[contains(text(),'Defense Type')]"));
		DefenceType.isDisplayed();

		List<WebElement> DefenceTypeList = driver.findElements(By.xpath("//select[@id='defense']"));
		System.out.println("Number of elements:" + DefenceTypeList.size());

		for (int i = 0; i < DefenceTypeList.size(); i++) {
			System.out.println("Available List is ==> : " + DefenceTypeList.get(i).getText());
		}

		WebElement SLA = driver.findElement(By.xpath("//td[contains(text(),'SLA')]"));
		SLA.isDisplayed();

		WebElement VideoPermission = driver.findElement(By.xpath("//td[contains(text(),'Video Permission')]"));
		VideoPermission.isDisplayed();

		WebElement ClientLog = driver.findElement(By.xpath("//td[contains(text(),'Client Logo Permission')]"));
		ClientLog.isDisplayed();

		WebElement CaseStudy = driver.findElement(By.xpath("//td[contains(text(),'Case Study Permission')]"));
		CaseStudy.isDisplayed();

		WebElement Marketingcontent = driver.findElement(By.xpath("//td[contains(text(),'Marketing Content Use')]"));
		Marketingcontent.isDisplayed();

	}

	public void VerifyAccount_CreateAccount_ContactInfo() {

		WebElement ContactInfo = driver.findElement(By.xpath("//h3[contains(text(),'Contact Information')]"));
		ContactInfo.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//div[@id='contact_slide']//td[contains(text(),'Name')]"));
		Name.isDisplayed();

		WebElement FirstName = driver.findElement(By.xpath("//input[@id='contact_fname']"));
		FirstName.isDisplayed();

		WebElement LastName = driver.findElement(By.xpath("//input[@id='contact_lname']"));
		LastName.isDisplayed();

		WebElement Phone = driver.findElement(By.xpath("//td[contains(text(),'Phone Number(s)')]"));
		Phone.isDisplayed();

		WebElement AddBtn = driver.findElement(By.xpath("//a[@id='add_phone']"));
		AddBtn.isDisplayed();

		WebElement PhoneTextBox = driver.findElement(By.xpath("//input[@id='contact_phone']"));
		PhoneTextBox.isDisplayed();

		List<WebElement> PhoneDropDown = driver.findElements(By.xpath("//select[@id='contact_phone_type']"));
		System.out.println("Number of elements:" + PhoneDropDown.size());

		for (int i = 0; i < PhoneDropDown.size(); i++) {
			System.out.println("Available List is ==> : " + PhoneDropDown.get(i).getText());
		}

		WebElement Email = driver.findElement(By.xpath("//td[contains(text(),'Email Address')]"));
		Email.isDisplayed();

		WebElement Country = driver.findElement(By.xpath("//td[@class='valignTop'][contains(text(),'Country')]"));
		Country.isDisplayed();

		List<WebElement> CountryList = driver
				.findElements(By.xpath("//div[@id='contact_country_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + CountryList.size());

		for (int i = 0; i < CountryList.size(); i++) {
			System.out.println("Available List is ==> : " + CountryList.get(i).getText());
		}

		WebElement Address = driver.findElement(By.xpath("//tr[5]//td[contains(text(),'Address')]"));
		Address.isDisplayed();

		WebElement Address2 = driver
				.findElement(By.xpath("//div[@id='contact_slide']//td[contains(text(),'Address Line 2')]"));
		Address2.isDisplayed();

		WebElement City = driver.findElement(By.xpath("//div[@id='contact_slide']//td[contains(text(),'City')]"));
		City.isDisplayed();

		WebElement PostalCode = driver.findElement(By.xpath("//td[contains(text(),'Postal code')]"));
		PostalCode.isDisplayed();

		WebElement State = driver.findElement(
				By.xpath("//tr[@id='contact_state_div']//td[@class='valignTop'][contains(text(),'State')]"));
		State.isDisplayed();

		List<WebElement> StateList = driver
				.findElements(By.xpath("//div[@id='contact_state_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + StateList.size());

		for (int i = 0; i < StateList.size(); i++) {
			System.out.println("Available List is ==> : " + StateList.get(i).getText());
		}

	}

	public void VerifyAccount_CreateAccount_AdministrativeAccountSetup() {

		WebElement AdministrativeAccountSetup = driver
				.findElement(By.xpath("//h3[contains(text(),'Administrative Account Setup')]"));
		AdministrativeAccountSetup.isDisplayed();

		WebElement AdminUserName = driver.findElement(By.xpath("//td[contains(text(),'Admin Username')]"));
		AdminUserName.isDisplayed();

		WebElement AdminUserNameTextField = driver.findElement(By.xpath("//input[@id='account_username']"));
		AdminUserNameTextField.isDisplayed();

		WebElement AdminPassword = driver.findElement(By.xpath("//td[contains(text(),'Admin Password')]"));
		AdminPassword.isDisplayed();

		WebElement AdminPasswordTextField = driver.findElement(By.xpath("//input[@id='account_password']"));
		AdminPasswordTextField.isDisplayed();

		WebElement ConfirmPassword = driver.findElement(By.xpath("//td[contains(text(),'Confirm Password')]"));
		ConfirmPassword.isDisplayed();

		WebElement ConfirmPasswordTextField = driver.findElement(By.xpath("//input[@id='account_password_retype']"));
		ConfirmPasswordTextField.isDisplayed();

	}

	public void VerifyAccount_CreateAccount_LocatorConfiguration() {

		WebElement LocatorConfiguration = driver
				.findElement(By.xpath("//h3[contains(text(),'Locator Configuration')]"));
		LocatorConfiguration.isDisplayed();

		WebElement AuthorizedIPAddress = driver.findElement(By.xpath("//td[contains(text(),'Authorized IP Address')]"));
		AuthorizedIPAddress.isDisplayed();

		WebElement AuthorizedIPAddressTextField = driver.findElement(By.xpath("//input[@id='account_ip']"));
		AuthorizedIPAddressTextField.isDisplayed();

		WebElement DefaultSearchRadius = driver.findElement(By.xpath("//td[contains(text(),'Default Search Radius')]"));
		DefaultSearchRadius.isDisplayed();

		WebElement DefaultSearchRadiusTextField = driver.findElement(By.xpath("//input[@id='account_radius']"));
		DefaultSearchRadiusTextField.isDisplayed();

		WebElement BackGroundColor = driver
				.findElement(By.xpath("//td[contains(text(),'Select the background color')]"));
		BackGroundColor.isDisplayed();

		WebElement BackGroundColorTextField = driver.findElement(By.xpath("//input[@id='background_color']"));
		BackGroundColorTextField.isDisplayed();

		WebElement SelectPointOfIntrest = driver.findElement(By.xpath("//td[@id='preview_control']"));
		SelectPointOfIntrest.isDisplayed();

		List<WebElement> SelectPointOfIntrestList = driver.findElements(By.xpath("//select[@id='poi_position']"));
		System.out.println("Number of elements:" + SelectPointOfIntrestList.size());

		for (int i = 0; i < SelectPointOfIntrestList.size(); i++) {
			System.out.println("Available List is ==> : " + SelectPointOfIntrestList.get(i).getText());
		}

		WebElement SearchRadius = driver.findElement(By.xpath("//td[contains(text(),'Search Radius UOM')]"));
		SearchRadius.isDisplayed();

		List<WebElement> SearchRadiusList = driver.findElements(By.xpath("//select[@id='account_uom']//option"));
		System.out.println("Number of elements:" + SearchRadiusList.size());

		for (int i = 0; i < SearchRadiusList.size(); i++) {
			System.out.println("Available List is ==> : " + SearchRadiusList.get(i).getText());
		}

		WebElement CreateAccountBtn = driver.findElement(By.xpath("//input[@id='submit_form']"));
		CreateAccountBtn.isDisplayed();

	}

	public void GoToAccounts_LocatorInformation() {

		Accounts_LocatorAccount.click();
	}

	public void VerifyAccount_LocatorInformation() {

		String DefaultLocationName = driver.findElement(By.xpath("//h2[@id='geostixautomation_account']")).getText();
		System.out.println(DefaultLocationName);
		Assert.assertTrue(DefaultLocationName.contains("Geostix Automation"));

		WebElement LocatorInfo = driver.findElement(By.xpath("//p[@id='table_label_locatorinformation']"));
		LocatorInfo.isDisplayed();

		WebElement Action = driver.findElement(By.xpath("//strong[contains(text(),'Actions')]"));
		Action.isDisplayed();

		WebElement LocatorName = driver.findElement(By.xpath("//strong[contains(text(),'Locator Name')]"));
		LocatorName.isDisplayed();

		WebElement AuthorizedURL = driver.findElement(By.xpath("//strong[contains(text(),'Authorized URL')]"));
		AuthorizedURL.isDisplayed();

		WebElement ExpirationDate = driver.findElement(By.xpath("//strong[contains(text(),'Expiration Date')]"));
		ExpirationDate.isDisplayed();

		WebElement AppKey = driver.findElement(By.xpath("//strong[contains(text(),'Appkey')]"));
		AppKey.isDisplayed();

		WebElement MapVendor = driver.findElement(By.xpath("//strong[contains(text(),'Map Vendor')]"));
		MapVendor.isDisplayed();

		WebElement AddNew = driver.findElement(By.xpath("//td[@id='action_new_in_locatorinformation']"));
		AddNew.isDisplayed();

		List<WebElement> LocatorInfoList = driver.findElements(By.xpath("//div[@id='MainWrap']//tr//td"));
		System.out.println("Number of elements:" + LocatorInfoList.size());

		for (int i = 0; i < LocatorInfoList.size(); i++) {
			System.out.println("Available List is ==> : " + LocatorInfoList.get(i).getText());
		}

		WebElement ChangeMasterSchema = driver
				.findElement(By.xpath("//div[@id='page_header']//li[contains(text(),'Master Schema')]"));
		ChangeMasterSchema.isDisplayed();

	}

	public void GoToMonitorTab() {

		Monitor.click();
	}

	public void VerifyMonitorsTab() {

		WebElement ReviewMonitor = driver.findElement(By.xpath("//a[contains(text(),'Review Monitor')]"));
		ReviewMonitor.isDisplayed();

		WebElement LocalSocialManager = driver.findElement(By.xpath("//a[contains(text(),'Local Social Manager')]"));
		LocalSocialManager.isDisplayed();

		WebElement JobScheduler = driver.findElement(By.xpath("//a[contains(text(),'Job Scheduler')]"));
		JobScheduler.isDisplayed();

		WebElement Configuration = driver.findElement(By.xpath("//a[contains(text(),'Configuration')]"));
		Configuration.isDisplayed();

	}

	public void VerifyMonitor_ReviewMonitorTab() {

		String BackToLaunchPad = driver.findElement(By.xpath("//a[contains(text(),'Back to Launchpad')]")).getText();
		System.out.println(BackToLaunchPad);
		Assert.assertTrue(BackToLaunchPad.contains("Back to Launchpad"));

		WebElement Calander = driver.findElement(By.xpath("//input[@id='date-range']"));
		Calander.isDisplayed();

		WebElement ConfigIcon = driver.findElement(By.xpath("//span[@class='icon-cog']"));
		ConfigIcon.isDisplayed();

		String SelectLocation = driver.findElement(By.xpath("//li[contains(text(),'Select a location:')]")).getText();
		System.out.println(SelectLocation);
		Assert.assertTrue(SelectLocation.contains("Select a location:"));

		List<WebElement> LocationsList = driver
				.findElements(By.xpath("//div[@id='locations_chzn']//a[@class='chzn-single']"));
		System.out.println("Number of elements:" + LocationsList.size());

		for (int i = 0; i < LocationsList.size(); i++) {
			System.out.println("Available List is ==> : " + LocationsList.get(i).getText());
		}

		String SelectASite = driver.findElement(By.xpath("//li[contains(text(),'Select a site:')]")).getText();
		System.out.println(SelectASite);
		Assert.assertTrue(SelectASite.contains("Select a site:"));

		WebElement GooglePlus = driver.findElement(By.xpath("//span[@class='icon-google-plus fontIcon20px Tooltip']"));
		GooglePlus.isDisplayed();

		WebElement Yelp = driver.findElement(By.xpath("//span[@class='icon-yelp fontIcon20px Tooltip']"));
		Yelp.isDisplayed();

		WebElement Yahoo = driver.findElement(By.xpath("//span[@class='icon-yahoo fontIcon20px Tooltip']"));
		Yahoo.isDisplayed();

		WebElement FourSquare = driver.findElement(By.xpath("//span[@class='icon-foursquare fontIcon20px Tooltip']"));
		FourSquare.isDisplayed();

		WebElement Facebook = driver.findElement(By.xpath("//span[@class='icon-facebook fontIcon20px Tooltip']"));
		Facebook.isDisplayed();

		WebElement YellowPages = driver.findElement(By.xpath("//span[@class='icon-yp fontIcon20px Tooltip']"));
		YellowPages.isDisplayed();

		String FilterByRatings = driver.findElement(By.xpath("//li[contains(text(),'Filter by Ratings:')]")).getText();
		System.out.println(FilterByRatings);
		Assert.assertTrue(FilterByRatings.contains("Filter by Ratings:"));

		WebElement OneStar = driver.findElement(By.xpath("//input[@id='rating-1']"));
		OneStar.isDisplayed();

		WebElement TwoStar = driver.findElement(By.xpath("//input[@id='rating-2']"));
		TwoStar.isDisplayed();

		WebElement ThreeStar = driver.findElement(By.xpath("//input[@id='rating-3']"));
		ThreeStar.isDisplayed();

		WebElement FourStar = driver.findElement(By.xpath("//input[@id='rating-4']"));
		FourStar.isDisplayed();

		WebElement FiveStar = driver.findElement(By.xpath("//input[@id='rating-5']"));
		FiveStar.isDisplayed();

		WebElement SearchByKeyWord = driver.findElement(By.xpath("//input[@id='SearchKeyword']"));
		SearchByKeyWord.isDisplayed();

		WebDriverWait SearchBtn = new WebDriverWait(driver, 10);
		SearchBtn.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='SearchKeywordBtn']")));

		WebDriverWait AdvncSearch = new WebDriverWait(driver, 10);
		AdvncSearch
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@class='Button advancedSearchBtn']")));

		WebDriverWait DownloadBtn = new WebDriverWait(driver, 10);
		DownloadBtn.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='DownloadBtn']")));

		String Table_reviewer = driver.findElement(By.xpath("//th[@id='author']")).getText();
		System.out.println(Table_reviewer);
		Assert.assertTrue(Table_reviewer.contains("Reviewer"));

		String Table_LocationName = driver.findElement(By.xpath("//th[@id='locationname']")).getText();
		System.out.println(Table_LocationName);
		Assert.assertTrue(Table_LocationName.contains("Location Name"));

		String Table_CityState = driver.findElement(By.xpath("//th[@id='citystate']")).getText();
		System.out.println(Table_CityState);
		Assert.assertTrue(Table_CityState.contains("City & State"));

		String Table_review = driver.findElement(By.xpath("//div[@id='MainContent']//th[5]")).getText();
		System.out.println(Table_review);
		Assert.assertTrue(Table_review.contains("Review"));

		String Table_Rating = driver.findElement(By.xpath("//th[@id='numericrating']")).getText();
		System.out.println(Table_Rating);
		Assert.assertTrue(Table_Rating.contains("Rating"));

		String Table_reviewDate = driver.findElement(By.xpath("//th[@id='publishdate']")).getText();
		System.out.println(Table_reviewDate);
		Assert.assertTrue(Table_reviewDate.contains("Review Date"));

		WebElement Last25 = driver.findElement(By.xpath("//button[@id='prevSlice']"));
		Last25.isDisplayed();

		WebElement Next25 = driver.findElement(By.xpath("//button[@id='nextSlice']"));
		Next25.isDisplayed();
	}

	public void ClickOnMonitor_JobSchedulerTab() {

		String LocalSocialManager = driver.findElement(By.xpath("//a[contains(text(),'Local Social Manager')]"))
				.getText();
		System.out.println("Click on This Page Redirects to Facebook URl With an Error Message : ");
		Assert.assertTrue(LocalSocialManager.contains("Local Social Manager"));

		WebElement JobScheduler = driver.findElement(By.xpath("//a[contains(text(),'Job Scheduler')]"));
		JobScheduler.click();

	}

	public void VerifyMonitor_JobSchedulerTab_generalSettings() {

		String ScheduledAcquisitionRuns = driver
				.findElement(By.xpath("//p[contains(text(),'Scheduled Acquisition Runs')]")).getText();
		System.out.println(ScheduledAcquisitionRuns);
		Assert.assertTrue(ScheduledAcquisitionRuns.contains("Scheduled Acquisition Runs"));

		String GeneralSettings = driver.findElement(By.xpath("//td[contains(text(),'General Settings')]")).getText();
		System.out.println(GeneralSettings);
		Assert.assertTrue(GeneralSettings.contains("General Settings"));

		String SelectJobType = driver.findElement(By.xpath("//td[contains(text(),'Select a job type')]")).getText();
		System.out.println(SelectJobType);
		Assert.assertTrue(SelectJobType.contains("Select a job type"));

		WebDriverWait SDA = new WebDriverWait(driver, 10);
		SDA.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='queueTypeSDA']")));

		WebDriverWait SDR = new WebDriverWait(driver, 10);
		SDR.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='queueTypeSDR']")));

		WebDriverWait SDPG = new WebDriverWait(driver, 10);
		SDPG.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='queueTypeSDPG']")));

		String SelectSiteorAPI = driver.findElement(By.xpath("//td[contains(text(),'Select a site or an API')]"))
				.getText();
		System.out.println(SelectSiteorAPI);
		Assert.assertTrue(SelectSiteorAPI.contains("Select a site or an API"));

		WebDriverWait Google = new WebDriverWait(driver, 10);
		Google.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='googleApi']")));

		WebDriverWait Facebook = new WebDriverWait(driver, 10);
		Facebook.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='facebookApi']")));

		WebDriverWait Foursquare = new WebDriverWait(driver, 10);
		Foursquare.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='foursquareApi']")));

		WebDriverWait Yelp = new WebDriverWait(driver, 10);
		Yelp.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='yelpApi']")));

		WebDriverWait bing = new WebDriverWait(driver, 10);
		bing.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='bingApi']")));

		WebDriverWait YP = new WebDriverWait(driver, 10);
		YP.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='ypApi']")));

		WebDriverWait Fouroneone = new WebDriverWait(driver, 10);
		Fouroneone.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='411Api']")));

		WebDriverWait MyLocalservice = new WebDriverWait(driver, 10);
		MyLocalservice.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='mylsApi']")));

		WebDriverWait MerchantCircle = new WebDriverWait(driver, 10);
		MerchantCircle.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='mcircleApi']")));

		WebDriverWait ShowMeLocal = new WebDriverWait(driver, 10);
		ShowMeLocal.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='showmelocalApi']")));

		WebDriverWait JudyBook = new WebDriverWait(driver, 10);
		JudyBook.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='judysbookApi']")));

		WebDriverWait Citysquare = new WebDriverWait(driver, 10);
		Citysquare.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='citysquaresApi']")));

		WebDriverWait Yalwa = new WebDriverWait(driver, 10);
		Yalwa.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='yalwaApi']")));

		WebDriverWait OpenStreetMap = new WebDriverWait(driver, 10);
		OpenStreetMap.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='osmApi']")));

		WebDriverWait HotFrog = new WebDriverWait(driver, 10);
		HotFrog.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='hotfrogApi']")));

		WebElement Frequency = driver
				.findElement(By.xpath("//table[@class='FormTable']//td[contains(text(),'Frequency')]"));
		Frequency.isDisplayed();

		WebElement JobName = driver.findElement(By.xpath("//td[@class='marginT-30'][contains(text(),'Job Name')]"));
		JobName.isDisplayed();

		WebElement EmailNotification = driver.findElement(By.xpath("//td[contains(text(),'Email Notification')]"));
		EmailNotification.isDisplayed();

		WebElement JobStatus = driver.findElement(By.xpath("//td[contains(text(),'Job Status')]"));
		JobStatus.isDisplayed();

	}

	public void VerifyMonitor_JobSchedulerTab_AcquisitionSettings() {

		String AcquisitionSettings = driver.findElement(By.xpath("//p[contains(text(),'Acquisition Settings')]"))
				.getText();
		System.out.println(AcquisitionSettings);
		Assert.assertTrue(AcquisitionSettings.contains("Acquisition Settings"));

		List<WebElement> KeywordRuleList = driver.findElements(By.xpath("//select[@id='lds_search_rule']"));
		System.out.println("Number of elements:" + KeywordRuleList.size());

		for (int i = 0; i < KeywordRuleList.size(); i++) {
			System.out.println("Available List is ==> : " + KeywordRuleList.get(i).getText());
		}

		WebDriverWait RunAllLocationDB = new WebDriverWait(driver, 10);
		RunAllLocationDB.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='useDBFilterNo']")));

		WebDriverWait RunSelectedLocationDB = new WebDriverWait(driver, 10);
		RunSelectedLocationDB.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='useDBFilterYes']")));

		WebDriverWait RunForAllLocation = new WebDriverWait(driver, 10);
		RunForAllLocation.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='runSDRAllLoc']")));

		WebDriverWait FetchAgreegateStarRating = new WebDriverWait(driver, 10);
		FetchAgreegateStarRating.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='fetchRating']")));

		List<WebElement> LDSList = driver.findElements(By.xpath("//select[@id='distributor']"));
		System.out.println("Number of elements:" + LDSList.size());

		for (int i = 0; i < LDSList.size(); i++) {
			System.out.println("Available List is ==> : " + LDSList.get(i).getText());
		}

		WebDriverWait UseDefaultSearch = new WebDriverWait(driver, 10);
		UseDefaultSearch.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='useDefaultRadius']")));

		WebDriverWait UseCustomSearch = new WebDriverWait(driver, 10);
		UseCustomSearch.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='useCustomRadius']")));

		List<WebElement> SearchByType = driver.findElements(By.xpath("//select[@id='gSearchType']"));
		System.out.println("Number of elements:" + SearchByType.size());

		for (int i = 0; i < SearchByType.size(); i++) {
			System.out.println("Available List is ==> : " + SearchByType.get(i).getText());
		}
	}

	public void VerifyMonitor_JobSchedulerTab_MatchSettings() {

		String MatchSettings = driver.findElement(By.xpath("//p[contains(text(),'Match Settings')]")).getText();
		System.out.println(MatchSettings);
		Assert.assertTrue(MatchSettings.contains("Match Settings"));

		List<WebElement> PositiveKeywordRuleList = driver.findElements(By.xpath("//select[@id='lds_match_rule']"));
		System.out.println("Number of elements:" + PositiveKeywordRuleList.size());

		for (int i = 0; i < PositiveKeywordRuleList.size(); i++) {
			System.out.println("Available List is ==> : " + PositiveKeywordRuleList.get(i).getText());
		}

		WebElement PositiveKeywordRuleTextBox = driver.findElement(By.xpath("//textarea[@id='matchRule']"));
		PositiveKeywordRuleTextBox.isDisplayed();

		List<WebElement> NegativeKeywordRuleList = driver.findElements(By.xpath("//select[@id='lds_neg_match_rule']"));
		System.out.println("Number of elements:" + NegativeKeywordRuleList.size());

		for (int i = 0; i < NegativeKeywordRuleList.size(); i++) {
			System.out.println("Available List is ==> : " + NegativeKeywordRuleList.get(i).getText());
		}

		WebElement NegativeKeywordRuleTextBox = driver.findElement(By.xpath("//textarea[@id='negMatchRule']"));
		NegativeKeywordRuleTextBox.isDisplayed();

		WebElement MatchRadius = driver.findElement(By.xpath("//td[contains(text(),'Match Radius')]"));
		MatchRadius.isDisplayed();

		WebElement MatchRadiusTextBox = driver.findElement(By.xpath("//input[@id='matchRadius']"));
		MatchRadiusTextBox.isDisplayed();
	}

	public void VerifyMonitor_JobSchedulerTab_ClaimingSettings() {

		String ClaimingSettings = driver.findElement(By.xpath("//p[contains(text(),'Claiming Settings')]")).getText();
		System.out.println(ClaimingSettings);
		Assert.assertTrue(ClaimingSettings.contains("Claiming Settings"));

		WebDriverWait RunClaimingJob = new WebDriverWait(driver, 10);
		RunClaimingJob.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='runClaiming']")));

		WebDriverWait RunOnlyClaimingJob = new WebDriverWait(driver, 10);
		RunOnlyClaimingJob.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='runOnlyClaiming']")));

		WebDriverWait Add = new WebDriverWait(driver, 10);
		Add.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='add_sched']")));

		WebDriverWait SaveAsNew = new WebDriverWait(driver, 10);
		SaveAsNew.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='save_as_new_sched']")));

		WebDriverWait Clear = new WebDriverWait(driver, 10);
		Clear.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='formclear']")));

		WebDriverWait Delete = new WebDriverWait(driver, 10);
		Delete.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='delete_sched']")));

	}

	public void ClickOnMonitor_ConfigurationTab() {

		WebElement ConfigTab = driver.findElement(By.xpath("//a[contains(text(),'Configuration')]"));
		ConfigTab.click();

	}

	public void VerifyMonitor_ConfigurationTab() {

		String ReviewMonitorConfig = driver
				.findElement(By.xpath("//h2[contains(text(),'Review Monitor Configuration')]")).getText();
		System.out.println(ReviewMonitorConfig);
		Assert.assertTrue(ReviewMonitorConfig.contains("Review Monitor Configuration"));

		String BackToReviewMonitor = driver.findElement(By.xpath("//a[contains(text(),'Back to Review Monitor')]"))
				.getText();
		System.out.println(BackToReviewMonitor);
		Assert.assertTrue(BackToReviewMonitor.contains("Back to Review Monitor"));

		String EmailAllert = driver.findElement(By.xpath("//div[contains(text(),'Email Alert')]")).getText();
		System.out.println(EmailAllert);
		Assert.assertTrue(EmailAllert.contains("Email Alert"));

		String ViewSubscribers = driver.findElement(By.xpath("//a[contains(text(),'View Subscribers')]")).getText();
		System.out.println(ViewSubscribers);
		Assert.assertTrue(ViewSubscribers.contains("View Subscribers"));

		String NegativeReviewThreshold = driver
				.findElement(By.xpath("//div[contains(text(),'Negative Review Threshold')]")).getText();
		System.out.println(NegativeReviewThreshold);
		Assert.assertTrue(NegativeReviewThreshold.contains("Negative Review Threshold"));

		List<WebElement> NegativeThresholdList = driver.findElements(By.xpath("//table//td"));
		System.out.println("Number of elements:" + NegativeThresholdList.size());

		for (int i = 0; i < NegativeThresholdList.size(); i++) {
			System.out.println("Available List is ==> : " + NegativeThresholdList.get(i).getText());
		}

		WebDriverWait SaveChangesBtn = new WebDriverWait(driver, 10);
		SaveChangesBtn.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//input[@class='Button big-save-button marginT-10']")));

	}

	public void ClickOnEtailer() {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement etail = driver.findElement(By.xpath("//a[text()='Etailer']"));
		js.executeScript("arguments[0].click();", etail);
		// Etailer.click();

	}

	public void VerifyEtailersTab() {

		WebElement Configuration = driver.findElement(By.xpath("//a[contains(text(),'Configuration')]"));
		Configuration.isDisplayed();

		WebElement ProviderRank = driver.findElement(By.xpath("//a[contains(text(),'Provider Rank')]"));
		ProviderRank.isDisplayed();

		WebElement StoreRank = driver.findElement(By.xpath("//a[contains(text(),'Store Rank')]"));
		StoreRank.isDisplayed();

		WebElement BrowseProduct = driver.findElement(By.xpath("//a[contains(text(),'Browse Products')]"));
		BrowseProduct.isDisplayed();

		WebElement providers = driver.findElement(By.xpath("//a[contains(text(),'Providers')]"));
		providers.isDisplayed();

		WebElement OnlineStore = driver.findElement(By.xpath("//a[contains(text(),'Online Store')]"));
		OnlineStore.isDisplayed();

		WebElement DirectFeeds = driver.findElement(By.xpath("//a[contains(text(),'Direct Feeds')]"));
		DirectFeeds.isDisplayed();

	}

	public void GoToEtailers_ConfigurationTab() {

		WebElement Configuration = driver.findElement(By.xpath("//a[contains(text(),'Configuration')]"));
		Configuration.click();
	}

	public void VerifyEtailers_ConfigurationTab() {

		String Configuration = driver.findElement(By.xpath("//h2[contains(text(),'Configuration')]")).getText();
		System.out.println(Configuration);
		Assert.assertTrue(Configuration.contains("Configuration"));

		String EtailerManufacturer = driver.findElement(By.xpath("//strong[contains(text(),'Etailers manufacturers')]"))
				.getText();
		System.out.println(EtailerManufacturer);
		Assert.assertTrue(EtailerManufacturer.contains("Etailers manufacturers"));

		String id = driver.findElement(By.xpath("//td[contains(text(),'id')]")).getText();
		Assert.assertTrue(id.contains("id"));

		String name = driver.findElement(By.xpath("//body//thead//td[2]")).getText();
		Assert.assertTrue(name.contains("name"));

		String microsite = driver.findElement(By.xpath("//td[contains(text(),'microsite')]")).getText();
		Assert.assertTrue(microsite.contains("microsite"));

		String accountlive = driver.findElement(By.xpath("//td[contains(text(),'accountlive')]")).getText();
		Assert.assertTrue(accountlive.contains("accountlive"));

		String affilatefeed = driver.findElement(By.xpath("//td[contains(text(),'affiliatefeed')]")).getText();
		Assert.assertTrue(affilatefeed.contains("affiliatefeed"));

		String directfeed = driver.findElement(By.xpath("//td[contains(text(),'directfeed')]")).getText();
		Assert.assertTrue(directfeed.contains("directfeed"));

		String matchaka = driver.findElement(By.xpath("//td[contains(text(),'matchaka')]")).getText();
		Assert.assertTrue(matchaka.contains("matchaka"));

		String matchProductName = driver.findElement(By.xpath("//td[contains(text(),'matchproductname')]")).getText();
		Assert.assertTrue(matchProductName.contains("matchproductname"));

		String Scgemaname = driver.findElement(By.xpath("//td[contains(text(),'schemaname')]")).getText();
		Assert.assertTrue(Scgemaname.contains("schemaname"));

		List<WebElement> ManufacturerList = driver
				.findElements(By.xpath("//table[@class='ContentTable']//tbody//tr//td"));
		System.out.println("Number of elements:" + ManufacturerList.size());

		for (int i = 0; i < ManufacturerList.size(); i++) {
			System.out.println("Available List is ==> : " + ManufacturerList.get(i).getText());
		}

		String Brands = driver.findElement(By.xpath("//strong[contains(text(),'Brands')]")).getText();
		Assert.assertTrue(Brands.contains("Brands"));

		List<WebElement> BrandList = driver.findElements(By.xpath("//div[@id='brand-wrap']//p"));
		System.out.println("Number of elements:" + BrandList.size());

		for (int i = 0; i < BrandList.size(); i++) {
			System.out.println("Available List is ==> : " + BrandList.get(i).getText());
		}

		String DataProviders = driver.findElement(By.xpath("//strong[contains(text(),'Data providers - Account')]"))
				.getText();
		Assert.assertTrue(DataProviders.contains("Data providers - Account"));

		List<WebElement> DataProvidersList = driver.findElements(By.xpath("//div[@id='provider-wrap']//p"));
		System.out.println("Number of elements:" + DataProvidersList.size());

		for (int i = 0; i < DataProvidersList.size(); i++) {
			System.out.println("Available List is ==> : " + DataProvidersList.get(i).getText());
		}

		List<WebElement> AssosiateDataProvidersList = driver.findElements(By.xpath("//div[@id='MainBox']//label"));
		System.out.println("Number of elements:" + AssosiateDataProvidersList.size());

		for (int i = 0; i < AssosiateDataProvidersList.size(); i++) {
			System.out.println("Available List is ==> : " + AssosiateDataProvidersList.get(i).getText());
		}

		WebElement SaveChanges = driver.findElement(By.xpath("//input[@class='Button btn-save']"));
		SaveChanges.isDisplayed();

		WebElement Previous = driver.findElement(By.xpath("/descendant::button[contains(text(),'Previous')][1]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("/descendant::button[contains(text(),'Next')][1]"));
		Next.isDisplayed();

	}

	public void GoToEtailers_ProviderRankTab() {

		WebElement ProviderRank = driver.findElement(By.xpath("//a[contains(text(),'Provider Rank')]"));
		ProviderRank.click();

	}

	public void VerifyEtailers_ProviderRankTab() {

		String ProviderRank = driver.findElement(By.xpath("//h2[contains(text(),'Provider Rank')]")).getText();
		System.out.println(ProviderRank);
		Assert.assertTrue(ProviderRank.contains("Provider Rank"));

		String DataProviderAccount = driver
				.findElement(By
						.xpath("//div[@id='provider-rank-wrap']//strong[contains(text(),'Data providers - Account')]"))
				.getText();
		System.out.println(DataProviderAccount);
		Assert.assertTrue(DataProviderAccount.contains("Data providers - Account"));

		List<WebElement> ProviderRankList = driver.findElements(By.xpath("//div[@id='provider-rank-wrap']"));
		System.out.println("Number of elements:" + ProviderRankList.size());

		for (int i = 0; i < ProviderRankList.size(); i++) {
			System.out.println("Available List is ==> : " + ProviderRankList.get(i).getText());
		}

		WebElement Previous = driver.findElement(By.xpath("/descendant::button[contains(text(),'Previous')][2]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("/descendant::button[contains(text(),'Next')][2]"));
		Next.isDisplayed();

	}

	public void GoToEtailers_StoreRankTab() {

		WebElement StoreRank = driver.findElement(By.xpath("//a[contains(text(),'Store Rank')]"));
		StoreRank.click();
	}

	public void VerifyEtailers_StoreRankTab() {

		String StoreRank = driver.findElement(By.xpath("//h2[contains(text(),'Store Rank')]")).getText();
		System.out.println(StoreRank);
		Assert.assertTrue(StoreRank.contains("Store Rank"));

		String Onlinestore = driver.findElement(By.xpath("//strong[contains(text(),'Online store')]")).getText();
		System.out.println(Onlinestore);
		Assert.assertTrue(Onlinestore.contains("Online store"));

		List<WebElement> OnlineStoresList = driver.findElements(By.xpath("//div[@id='store-rank']"));
		System.out.println("Number of elements:" + OnlineStoresList.size());

		for (int i = 0; i < OnlineStoresList.size(); i++) {
			System.out.println("Available List is ==> : " + OnlineStoresList.get(i).getText());
		}

		WebElement Previous = driver.findElement(By.xpath("/descendant::button[contains(text(),'Previous')][2]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("/descendant::button[contains(text(),'Next')][2]"));
		Next.isDisplayed();

	}

	public void VerifyEtailers_StoreRank_AddNewEntryTab() throws InterruptedException {

		driver.findElement(By.xpath("//div[@id='store-rank']//span[contains(text(),'+ Add New Entry')]")).click();

		Thread.sleep(1500);

		WebElement UID = driver.findElement(By.xpath("/descendant::label[contains(text(),'uid ')][1]"));
		UID.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//label[contains(text(),'name ')]"));
		Name.isDisplayed();

		WebElement Logo = driver.findElement(By.xpath("//label[contains(text(),'logo ')]"));
		Logo.isDisplayed();

		WebElement URL = driver.findElement(By.xpath("/descendant::label[contains(text(),'url')][1]"));
		URL.isDisplayed();

		WebElement AffiliateURL = driver.findElement(By.xpath("//label[contains(text(),'affiliateurl ')]"));
		AffiliateURL.isDisplayed();

		WebElement Active = driver.findElement(By.xpath("//label[contains(text(),'active ')]"));
		Active.isDisplayed();

		WebElement Country = driver.findElement(By.xpath("//label[contains(text(),'country ')]"));
		Country.isDisplayed();

		WebElement RankValue = driver.findElement(By.xpath("//label[contains(text(),'rankvalue ')]"));
		RankValue.isDisplayed();

		WebElement ActiveFlag = driver.findElement(By.xpath("//label[contains(text(),'activeflag ')]"));
		ActiveFlag.isDisplayed();

		WebElement LinkType = driver.findElement(By.xpath("//label[contains(text(),'linktype ')]"));
		LinkType.isDisplayed();

		WebElement StoreUID = driver.findElement(By.xpath("//label[contains(text(),'storeuid ')]"));
		StoreUID.isDisplayed();

		WebElement mfgID = driver.findElement(By.xpath("//label[contains(text(),'mfgid ')]"));
		mfgID.isDisplayed();

		WebElement StoreCountry = driver.findElement(By.xpath("//label[contains(text(),'storecountry')]"));
		StoreCountry.isDisplayed();

		WebElement Add = driver.findElement(By.xpath("//input[@class='Button btn-confirm']"));
		Add.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@class='Button btn-cancel']"));
		Cancel.isDisplayed();
		Thread.sleep(1000);
		Cancel.click();
	}

	public void GoToEtailers_BrowseProductTab() {

		WebElement BrowseProduct = driver.findElement(By.xpath("//a[contains(text(),'Browse Products')]"));
		BrowseProduct.click();

	}

	public void VerifyEtailers_BrowseProductTab() {

		String BrowseProducts = driver.findElement(By.xpath("//h2[contains(text(),'Browse Products')]")).getText();
		System.out.println(BrowseProducts);
		Assert.assertTrue(BrowseProducts.contains("Browse Products"));

		String Products = driver.findElement(By.xpath("//strong[contains(text(),'Products')]")).getText();
		System.out.println(Products);
		Assert.assertTrue(Products.contains("Products"));

		List<WebElement> ProductsList = driver.findElements(By.xpath("//div[@id='browse-products']"));
		System.out.println("Number of elements:" + ProductsList.size());

		for (int i = 0; i < ProductsList.size(); i++) {
			System.out.println("Available List is ==> : " + ProductsList.get(i).getText());
		}

		WebElement Previous = driver.findElement(By.xpath("/descendant::button[contains(text(),'Previous')][2]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("/descendant::button[contains(text(),'Next')][2]"));
		Next.isDisplayed();

	}

	public void VerifyEtailers_BrowseProduct_AddNewEntryTab() throws InterruptedException {

		driver.findElement(By.xpath("//div[@id='browse-products']//span[contains(text(),'+ Add New Entry')]")).click();

		Thread.sleep(1500);

		WebElement UID = driver.findElement(By.xpath("//label[contains(text(),'uid ')]"));
		UID.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//label[contains(text(),'name ')]"));
		Name.isDisplayed();

		WebElement Description = driver.findElement(By.xpath("//label[contains(text(),'description ')]"));
		Description.isDisplayed();

		WebElement SKU = driver.findElement(By.xpath("//label[contains(text(),'sku ')]"));
		SKU.isDisplayed();

		WebElement UPC = driver.findElement(By.xpath("//label[contains(text(),'upc ')]"));
		UPC.isDisplayed();

		WebElement msrp = driver.findElement(By.xpath("//label[contains(text(),'msrp ')]"));
		msrp.isDisplayed();

		WebElement Map = driver.findElement(By.xpath("//label[contains(text(),'map ')]"));
		Map.isDisplayed();

		WebElement Currency = driver.findElement(By.xpath("//label[contains(text(),'currency ')]"));
		Currency.isDisplayed();

		WebElement Cat1 = driver.findElement(By.xpath("//label[contains(text(),'category1 ')]"));
		Cat1.isDisplayed();

		WebElement Cat2 = driver.findElement(By.xpath("//label[contains(text(),'category2 ')]"));
		Cat2.isDisplayed();

		WebElement Cat3 = driver.findElement(By.xpath("//label[contains(text(),'category3 ')]"));
		Cat3.isDisplayed();

		WebElement Image = driver.findElement(By.xpath("//label[contains(text(),'image ')]"));
		Image.isDisplayed();

		WebElement activeflag = driver.findElement(By.xpath("//label[contains(text(),'activeflag ')]"));
		activeflag.isDisplayed();

		WebElement deleted = driver.findElement(By.xpath("//label[contains(text(),'deleted ')]"));
		deleted.isDisplayed();

		WebElement asin = driver.findElement(By.xpath("//label[contains(text(),'asin ')]"));
		asin.isDisplayed();

		WebElement exclude = driver.findElement(By.xpath("//label[contains(text(),'exclude ')]"));
		exclude.isDisplayed();

		WebElement aka = driver.findElement(By.xpath("//label[contains(text(),'aka ')]"));
		aka.isDisplayed();

		WebElement siteactive = driver.findElement(By.xpath("//label[contains(text(),'siteactive ')]"));
		siteactive.isDisplayed();

		WebElement metakeyword = driver.findElement(By.xpath("//label[contains(text(),'metakeywords ')]"));
		metakeyword.isDisplayed();

		WebElement mfgID = driver.findElement(By.xpath("//label[contains(text(),'mfgid ')]"));
		mfgID.isDisplayed();

		WebElement MetaDescription = driver.findElement(By.xpath("//label[contains(text(),'metadescription ')]"));
		MetaDescription.isDisplayed();

		WebElement Add = driver.findElement(By.xpath("//input[@class='Button btn-confirm']"));
		Add.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@class='Button btn-cancel']"));
		Cancel.isDisplayed();
		Thread.sleep(1000);
		Cancel.click();
	}

	public void GoToEtailers_providersTab() {
		WebElement providers = driver.findElement(By.xpath("//a[contains(text(),'Providers')]"));
		providers.click();

	}

	public void VerifyEtailers_ProvidersTab() {

		String Provider = driver.findElement(By.xpath("//h2[contains(text(),'Providers')]")).getText();
		System.out.println(Provider);
		Assert.assertTrue(Provider.contains("Providers"));

		List<WebElement> DataProvidersList = driver.findElements(By.xpath("//table[@class='ContentTable']//td"));
		System.out.println("Number of elements:" + DataProvidersList.size());

		for (int i = 0; i < DataProvidersList.size(); i++) {
			System.out.println("Available List is ==> : " + DataProvidersList.get(i).getText());
		}

		WebElement name = driver.findElement(By.xpath("//td[contains(text(),'name')]"));
		name.isDisplayed();

		WebElement active = driver.findElement(By.xpath("//td[contains(text(),'active')]"));
		active.isDisplayed();

		WebElement defaulttrunk = driver.findElement(By.xpath("//td[contains(text(),'defaultrank')]"));
		defaulttrunk.isDisplayed();

		WebElement rankvalue = driver.findElement(By.xpath("//td[contains(text(),'rankvalue')]"));
		rankvalue.isDisplayed();

		WebElement login = driver.findElement(By.xpath("//td[contains(text(),'login')]"));
		login.isDisplayed();

		WebElement password = driver.findElement(By.xpath("//td[contains(text(),'password')]"));
		password.isDisplayed();

		WebElement url = driver.findElement(By.xpath("//td[contains(text(),'url')]"));
		url.isDisplayed();

		WebElement searchicon = driver.findElement(By.xpath("//span[@class='icon-search']"));
		searchicon.isDisplayed();

		WebElement Previous = driver.findElement(By.xpath("/descendant::button[contains(text(),'Previous')][2]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("/descendant::button[contains(text(),'Next')][2]"));
		Next.isDisplayed();

	}

	public void GoToEtailers_OnlineStoreTab() {
		WebElement OnlineStore = driver.findElement(By.xpath("//a[contains(text(),'Online Store')]"));
		OnlineStore.click();

	}

	public void VerifyEtailers_OnlineStoreTab() {

		String OnlineStore = driver.findElement(By.xpath("//h2[contains(text(),'Online Store')]")).getText();
		System.out.println(OnlineStore);
		Assert.assertTrue(OnlineStore.contains("Online Store"));

		List<WebElement> OnlineStoreList = driver.findElements(By.xpath("//body//tbody//tr//td"));
		System.out.println("Number of elements:" + OnlineStoreList.size());

		for (int i = 0; i < OnlineStoreList.size(); i++) {
			System.out.println("Available List is ==> : " + OnlineStoreList.get(i).getText());
		}

		WebElement logo = driver.findElement(By.xpath("//td[contains(text(),'logo')]"));
		logo.isDisplayed();

		WebElement name = driver.findElement(By.xpath("//td[contains(text(),'name')]"));
		name.isDisplayed();

		WebElement active = driver.findElement(By.xpath("//td[contains(text(),'active')]"));
		active.isDisplayed();

		WebElement country = driver.findElement(By.xpath("//td[contains(text(),'country')]"));
		country.isDisplayed();

		WebElement uid = driver.findElement(By.xpath("//td[contains(text(),'uid')]"));
		uid.isDisplayed();

		WebElement url = driver.findElement(By.xpath("//td[contains(text(),'url')]"));
		url.isDisplayed();

		WebElement searchicon = driver.findElement(By.xpath("//span[@class='icon-search']"));
		searchicon.isDisplayed();

		WebElement Previous = driver.findElement(By.xpath("//button[contains(text(),'Previous')]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("//button[contains(text(),'Next')]"));
		Next.isDisplayed();

	}

	public void VerifyEtailers_OnlineStore_AddNewEntryTab() throws InterruptedException {

		driver.findElement(By.xpath("//div[@id='online-store']//span[contains(text(),'+ Add New Entry')]")).click();

		Thread.sleep(1500);

		WebElement UID = driver.findElement(By.xpath("//label[contains(text(),'uid ')]"));
		UID.isDisplayed();

		WebElement Name = driver.findElement(By.xpath("//label[contains(text(),'name ')]"));
		Name.isDisplayed();

		WebElement logo = driver.findElement(By.xpath("//label[contains(text(),'logo ')]"));
		logo.isDisplayed();

		WebElement url = driver.findElement(By.xpath("//label[contains(text(),'url ')]"));
		url.isDisplayed();

		WebElement affiliateurl = driver.findElement(By.xpath("//label[contains(text(),'affiliateurl ')]"));
		affiliateurl.isDisplayed();

		WebElement active = driver.findElement(By.xpath("//label[contains(text(),'active ')]"));
		active.isDisplayed();

		WebElement country = driver.findElement(By.xpath("//label[contains(text(),'country ')]"));
		country.isDisplayed();

		WebElement Add = driver.findElement(By.xpath("//input[@class='Button btn-confirm']"));
		Add.isDisplayed();

		WebElement Cancel = driver.findElement(By.xpath("//input[@class='Button btn-cancel']"));
		Cancel.isDisplayed();
		Thread.sleep(1000);
		Cancel.click();
	}

	public void GoToEtailers_DirectFeedsTab() {
		WebElement DirectFeeds = driver.findElement(By.xpath("//a[contains(text(),'Direct Feeds')]"));
		DirectFeeds.click();

	}

	public void VerifyEtailers_DirectFeedsTab() {

		String DirectFeeds = driver.findElement(By.xpath("//h2[contains(text(),'Direct Feeds')]")).getText();
		System.out.println(DirectFeeds);
		Assert.assertTrue(DirectFeeds.contains("Direct Feeds"));

		WebElement Previous = driver.findElement(By.xpath("//button[contains(text(),'Previous')]"));
		Previous.isDisplayed();

		WebElement Next = driver.findElement(By.xpath("//button[contains(text(),'Next')]"));
		Next.isDisplayed();

	}

	public void ClickOnAdminTools() {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement admintool = driver.findElement(By.xpath("//a[text()='Admin Tools']"));
		js.executeScript("arguments[0].click();", admintool);
		// AdminTools.click();

	}

	public void VerifyAdminToolsTab() {

		WebElement ProspectManager = driver.findElement(By.xpath("//a[contains(text(),'Prospect Manager')]"));
		ProspectManager.isDisplayed();

		WebElement CompititiveAnalysisBuilder = driver
				.findElement(By.xpath("//a[contains(text(),'Competitive Analysis Builder')]"));
		CompititiveAnalysisBuilder.isDisplayed();

		WebElement ContractBuilder = driver.findElement(By.xpath("//a[contains(text(),'Contract Builder')]"));
		ContractBuilder.isDisplayed();

		WebElement AccountManagement = driver.findElement(By.xpath("//a[contains(text(),'Account Management')]"));
		AccountManagement.isDisplayed();

		WebElement CustomInvoiceBuilder = driver
				.findElement(By.xpath("//a[contains(text(),'Custom Invoice Builder')]"));
		CustomInvoiceBuilder.isDisplayed();

		WebElement FacebookLogin = driver.findElement(By.xpath("//a[contains(text(),'Facebook Login')]"));
		FacebookLogin.isDisplayed();

	}

	public void GoToAdminTools_ProspectManagerTab() {

		WebElement ProspectManager = driver.findElement(By.xpath("//a[contains(text(),'Prospect Manager')]"));
		ProspectManager.click();
	}

	public void VerifyAdminTools_ProspectManagerTab() {

		WebElement SearchCompanyName = driver.findElement(By.xpath("//input[@id='search_name']"));
		SearchCompanyName.isDisplayed();

		WebElement SearchBtn = driver.findElement(By.xpath("//input[@id='search_button_getlist']"));
		SearchBtn.isDisplayed();

		WebElement NewProspects = driver.findElement(By.xpath("//a[@id='add_location_box']"));
		NewProspects.isDisplayed();

		List<WebElement> sortby = driver.findElements(By.xpath("//li[@class='sortorder']//select"));
		System.out.println("Number of elements:" + sortby.size());

		for (int i = 0; i < sortby.size(); i++) {
			System.out.println("Available List is ==> : " + sortby.get(i).getText());
		}

		WebElement SearchCompanyAddress = driver
				.findElement(By.xpath("//input[@placeholder='Search by address, city and state, and/or postal code']"));
		SearchCompanyAddress.isDisplayed();

		List<WebElement> Country = driver.findElements(By.xpath("//select[@id='search_country']"));
		System.out.println("Number of elements:" + Country.size());

		for (int i = 0; i < Country.size(); i++) {
			System.out.println("Available List is ==> : " + Country.get(i).getText());
		}

		List<WebElement> radius = driver.findElements(By.xpath("//select[@id='search_radius']"));
		System.out.println("Number of elements:" + radius.size());

		for (int i = 0; i < radius.size(); i++) {
			System.out.println("Available List is ==> : " + radius.get(i).getText());
		}

		List<WebElement> radiustype = driver.findElements(By.xpath("//select[@id='radius_type']"));
		System.out.println("Number of elements:" + radiustype.size());

		for (int i = 0; i < radiustype.size(); i++) {
			System.out.println("Available List is ==> : " + radiustype.get(i).getText());
		}

		WebElement search = driver.findElement(By.xpath("//input[@id='search_button']"));
		search.isDisplayed();

		WebElement advancesearch = driver.findElement(By.xpath("//a[@id='advanced_search_button']"));
		advancesearch.isDisplayed();

		WebElement MapField = driver.findElement(By.xpath("//div[@id='map']"));
		MapField.isDisplayed();

	}

	public void GoToAdminTools_CompititiveAnalysisBuilderTab() {
		WebElement CompititiveAnalysisBuilder = driver
				.findElement(By.xpath("//a[contains(text(),'Competitive Analysis Builder')]"));
		CompititiveAnalysisBuilder.click();
	}

	public void VerifyAdminTools_CompititiveAnalysisBuilderTab() {

		WebElement AddColumn = driver.findElement(By.xpath("//input[@id='add_column_button']"));
		AddColumn.isDisplayed();

		WebDriverWait Where2getit = new WebDriverWait(driver, 10);
		Where2getit.until(ExpectedConditions.elementToBeClickable(By.xpath("//img[@class='w2gi_logo']")));

		List<WebElement> AccountList = driver.findElements(By.xpath("//div[@id='accounts_dropdown_1_chzn']"));
		System.out.println("Number of elements:" + AccountList.size());

		for (int i = 0; i < AccountList.size(); i++) {
			System.out.println("Available List is ==> : " + AccountList.get(i).getText());
		}

		List<WebElement> accountlist = driver.findElements(By.xpath("//div[@id='MainWrap']//tr"));
		System.out.println("Number of elements:" + accountlist.size());

		for (int i = 0; i < accountlist.size(); i++) {
			System.out.println("Available List is ==> : " + accountlist.get(i).getText());
		}

		WebDriverWait ClickableAccount = new WebDriverWait(driver, 10);
		ClickableAccount.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='MainWrap']//tr")));

		WebElement GenerateReport = driver.findElement(By.xpath("//input[@id='generate_report_button']"));
		GenerateReport.isDisplayed();

	}

	public void GoToAdminTools_ContractBuilderTab() {
		WebElement ContractBuilder = driver.findElement(By.xpath("//a[contains(text(),'Contract Builder')]"));
		ContractBuilder.click();

	}

	public void VerifyAdminTools_ContractBuilderTab() {

		String ContractInfo = driver.findElement(By.xpath("//p[@class='SeparatorText']")).getText();
		System.out.println(ContractInfo);
		Assert.assertTrue(ContractInfo.contains("Please enter contract information"));

		String EnterName = driver.findElement(By.xpath("//td[contains(text(),'Enter a name')]")).getText();
		System.out.println(EnterName);
		Assert.assertTrue(EnterName.contains("Enter a name"));

		String ExistingSavedContact = driver
				.findElement(By.xpath("//p[contains(text(),'Or select an existing saved contract')]")).getText();
		System.out.println(ExistingSavedContact);
		Assert.assertTrue(ExistingSavedContact.contains("Or select an existing saved contract"));

		List<WebElement> ContactList = driver.findElements(By.xpath("//select[@id='savedSOWs']"));
		System.out.println("Number of elements:" + ContactList.size());

		for (int i = 0; i < ContactList.size(); i++) {
			System.out.println("Available List is ==> : " + ContactList.get(i).getText());
		}

		String Description = driver.findElement(By.xpath("//td[contains(text(),'Description')]")).getText();
		System.out.println(Description);
		Assert.assertTrue(Description.contains("Description"));

		String ContractTerm = driver.findElement(By.xpath("//td[contains(text(),'Contract Term')]")).getText();
		System.out.println(ContractTerm);
		Assert.assertTrue(ContractTerm.contains("Contract Term"));

		String TotalTemplets = driver.findElement(By.xpath("//label[contains(text(),'Total Number of Templates')]"))
				.getText();
		System.out.println(TotalTemplets);
		Assert.assertTrue(TotalTemplets.contains("Total Number of Templates"));

		String TransactionLimit = driver.findElement(By.xpath("//label[contains(text(),'Transaction Limit')]"))
				.getText();
		System.out.println(TransactionLimit);
		Assert.assertTrue(TransactionLimit.contains("Transaction Limit"));

		String NumberOfLocation = driver.findElement(By.xpath("//label[contains(text(),'Number of Locations')]"))
				.getText();
		System.out.println(NumberOfLocation);
		Assert.assertTrue(NumberOfLocation.contains("Number of Locations"));

		String MSAARequired = driver.findElement(By.xpath("//label[contains(text(),'MSAA Required')]")).getText();
		System.out.println(MSAARequired);
		Assert.assertTrue(MSAARequired.contains("MSAA Required"));

		String Notes = driver.findElement(By.xpath("//td[@class='valignTop alignR']")).getText();
		System.out.println(Notes);
		Assert.assertTrue(Notes.contains("Notes"));

		String EnterATrac = driver.findElement(By.xpath("//td[contains(text(),'Enter Trac #')]")).getText();
		System.out.println(EnterATrac);
		Assert.assertTrue(EnterATrac.contains("Enter Trac #"));

		String ContractNumber = driver.findElement(By.xpath("//td[contains(text(),'Contract Number:')]")).getText();
		System.out.println(ContractNumber);
		Assert.assertTrue(ContractNumber.contains("Contract Number:"));

		String OneTimeFee = driver.findElement(By.xpath("//td[contains(text(),'One-Time Fee:')]")).getText();
		System.out.println(OneTimeFee);
		Assert.assertTrue(OneTimeFee.contains("One-Time Fee:"));

		// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>...//
		String SelectOneOrMoreProduct = driver.findElement(By.xpath("//p[@id='products_pricing']")).getText();
		System.out.println(SelectOneOrMoreProduct);
		Assert.assertTrue(SelectOneOrMoreProduct.contains(
				"Please select one or more product(s) from the list below to display under the pricing table"));

		WebDriverWait Custom = new WebDriverWait(driver, 10);
		Custom.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//label[@class='ie8dummyclass customProduct']")));

		WebDriverWait PresenceRBL = new WebDriverWait(driver, 10);
		PresenceRBL.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[1]")));

		WebDriverWait PresenceLBC = new WebDriverWait(driver, 10);
		PresenceLBC.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[2]")));

		WebDriverWait PresenceLDS = new WebDriverWait(driver, 10);
		PresenceLDS.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[3]")));

		WebDriverWait PresenceLocalPages = new WebDriverWait(driver, 10);
		PresenceLocalPages.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[4]")));

		WebDriverWait AdvertisingLocal = new WebDriverWait(driver, 10);
		AdvertisingLocal.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[5]")));

		WebDriverWait SocialModeration = new WebDriverWait(driver, 10);
		SocialModeration.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[6]")));

		WebDriverWait SocialReviewManagement = new WebDriverWait(driver, 10);
		SocialReviewManagement.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[7]")));

		WebDriverWait MobileApp = new WebDriverWait(driver, 10);
		MobileApp.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[8]")));

		WebDriverWait InsightsEnhanced = new WebDriverWait(driver, 10);
		InsightsEnhanced.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[9]")));

		WebDriverWait BrandifyLabs = new WebDriverWait(driver, 10);
		BrandifyLabs.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[10]")));

		WebDriverWait AnualFee = new WebDriverWait(driver, 10);
		AnualFee.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[11]")));

		WebDriverWait OnetimeFee = new WebDriverWait(driver, 10);
		OnetimeFee.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//body/div/div/div/div/ul[@id='availableProductList']/li[12]")));

	}

	public void VerifyAdminTools_ContractBuilder_ImageAndFeatureListTab() {

		WebDriverWait PresenceRBL = new WebDriverWait(driver, 10);
		PresenceRBL.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[1]//label[1]")));

		WebDriverWait PresenceLBC = new WebDriverWait(driver, 10);
		PresenceLBC.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[2]//label[1]")));

		WebDriverWait PresenceLDS = new WebDriverWait(driver, 10);
		PresenceLDS.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[3]//label[1]")));

		WebDriverWait PresenceLocalPages = new WebDriverWait(driver, 10);
		PresenceLocalPages.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[4]//label[1]")));

		WebDriverWait AdvertisingLocal = new WebDriverWait(driver, 10);
		AdvertisingLocal.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[5]//label[1]")));

		WebDriverWait SocialModeration = new WebDriverWait(driver, 10);
		SocialModeration.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[6]//label[1]")));

		WebDriverWait SocialReviewManagement = new WebDriverWait(driver, 10);
		SocialReviewManagement.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[7]//label[1]")));

		WebDriverWait MobileApp = new WebDriverWait(driver, 10);
		MobileApp.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[8]//label[1]")));

		WebDriverWait InsightsEnhanced = new WebDriverWait(driver, 10);
		InsightsEnhanced.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[9]//label[1]")));

		WebDriverWait BrandifyLabs = new WebDriverWait(driver, 10);
		BrandifyLabs.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[10]//label[1]")));

		WebDriverWait AnualFee = new WebDriverWait(driver, 10);
		AnualFee.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[11]//label[1]")));

		WebDriverWait OnetimeFee = new WebDriverWait(driver, 10);
		OnetimeFee.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//ul[@id='availableProductListDescription']//li[12]//label[1]")));

	}

	public void VerifyAdminTools_ContractBuilder_SelectOneorMoreFeatureForEachProducTab() {

		String FeatureEachProduct = driver
				.findElement(By.xpath("//p[contains(text(),'Please select one or more feature(s) for each prod')]"))
				.getText();
		System.out.println(FeatureEachProduct);
		Assert.assertTrue(FeatureEachProduct.contains("Please select one or more feature(s) for each prod"));

		WebElement ProductContainerBody = driver.findElement(By.xpath("//div[@class='productContainer col2']"));
		ProductContainerBody.isDisplayed();

	}

	public void VerifyAdminTools_ContractBuilder_PleaseConfigureThePricingTab() {

		String ConfigurePrice = driver.findElement(By.xpath("//p[contains(text(),'Please configure the pricing')]"))
				.getText();
		System.out.println(ConfigurePrice);
		Assert.assertTrue(ConfigurePrice.contains("Please configure the pricing"));

		WebElement ConfigurePriceContainerBody = driver
				.findElement(By.xpath("//p[@class='noProduct alignC roundedCorners col2']"));
		ConfigurePriceContainerBody.isDisplayed();

		WebElement CreateContract = driver.findElement(By.xpath("//button[contains(text(),'Create contract')]"));
		CreateContract.isDisplayed();

		WebElement SaveProgress = driver.findElement(By.xpath("//button[contains(text(),'Save Progress')]"));
		SaveProgress.isDisplayed();

		WebElement SelectedProduct = driver.findElement(By.xpath("//p[@class='navigatorTitle fixedContainer']"));
		SelectedProduct.isDisplayed();

	}

	public void GoToAdminTools_AccountManagementTab() {
		WebElement AccountManagement = driver.findElement(By.xpath("//a[contains(text(),'Account Management')]"));
		AccountManagement.click();

	}

	public void VerifyAdminTools_AccountManagementTab() throws InterruptedException {

		Keyboard keyboard = ((HasInputDevices) driver).getKeyboard();
		keyboard.pressKey(Keys.ENTER);

		Thread.sleep(2500);
		String MyClientManager = driver.findElement(By.xpath("//h2[contains(text(),'My Clients Manager')]")).getText();
		System.out.println(MyClientManager);
		Assert.assertTrue(MyClientManager.contains("My Clients Manager"));

		WebElement Name = driver.findElement(By.xpath("//li[@id='filter-name']"));
		Name.isDisplayed();

		WebElement AccountManagerName = driver.findElement(By.xpath("//li[@id='filter-accountmanager']"));
		AccountManagerName.isDisplayed();

		List<WebElement> ManagersList = driver.findElements(By.xpath("//select[@id='filter-select-accountmanager']"));
		System.out.println("Number of elements:" + ManagersList.size());

		for (int i = 0; i < ManagersList.size(); i++) {
			System.out.println("Available List is ==> : " + ManagersList.get(i).getText());
		}

		String name = driver.findElement(By.xpath("//th[@id='name'][contains(text(),'Name')]")).getText();
		Assert.assertTrue(name.contains("Name"));

		String LastCall = driver.findElement(By.xpath("//th[contains(text(),'Last Call')]")).getText();
		Assert.assertTrue(LastCall.contains("Last Call"));

		String notedate = driver.findElement(By.xpath("//th[contains(text(),'Note Date')]")).getText();
		Assert.assertTrue(notedate.contains("Note Date"));

		String scheduledfollowups = driver.findElement(By.xpath("//th[contains(text(),'Scheduled Follow Ups')]"))
				.getText();
		Assert.assertTrue(scheduledfollowups.contains("Scheduled Follow Ups"));

		String lastonsitemeetings = driver.findElement(By.xpath("//th[contains(text(),'Last On Site Meeting')]"))
				.getText();
		Assert.assertTrue(lastonsitemeetings.contains("Last On Site Meeting"));

		String City = driver.findElement(By.xpath("//th[contains(text(),'City/State')]")).getText();
		Assert.assertTrue(City.contains("City/State"));

		String contractEndDate = driver.findElement(By.xpath("//th[contains(text(),'Contract End Dates')]")).getText();
		Assert.assertTrue(contractEndDate.contains("Contract End Dates"));

		String accountManagerName = driver.findElement(By.xpath("//th[contains(text(),'Account Manager Name')]"))
				.getText();
		Assert.assertTrue(accountManagerName.contains("Account Manager Name"));

		String OpenBalance = driver.findElement(By.xpath("//th[contains(text(),'Open Balance')]")).getText();
		Assert.assertTrue(OpenBalance.contains("Open Balance"));

		String TotalClients = driver.findElement(By.xpath("//th[contains(text(),'Total Client $')]")).getText();
		Assert.assertTrue(TotalClients.contains("Total Client $"));

		String Pipelines = driver.findElement(By.xpath("//th[contains(text(),'Pipeline $')]")).getText();
		Assert.assertTrue(Pipelines.contains("Pipeline $"));

		String Forecast = driver.findElement(By.xpath("//th[contains(text(),'Forecast $')]")).getText();
		Assert.assertTrue(Forecast.contains("Forecast $"));

		String ClientStatus = driver.findElement(By.xpath("//th[contains(text(),'Client Status')]")).getText();
		Assert.assertTrue(ClientStatus.contains("Client Status"));

		List<WebElement> TableData = driver.findElements(By.xpath("//tbody[@id='table-page-0']//tr//td"));
		System.out.println("Number of elements:" + TableData.size());

		for (int i = 0; i < TableData.size(); i++) {
			System.out.println("Available List is ==> : " + TableData.get(i).getText());
		}

	}

	public void GoToAdminTools_CustomInvoiceBuilderTab() throws InterruptedException {
		Thread.sleep(2500);
		WebElement CustomInvoiceBuilder = driver
				.findElement(By.xpath("//a[contains(text(),'Custom Invoice Builder')]"));
		CustomInvoiceBuilder.click();

	}

	public void VerifyAdminTools_CustomInvoiceBuilder_InvoiceInformationTab() {

		String InvoiceInfo = driver.findElement(By.xpath("//p[contains(text(),'Invoice Information')]")).getText();
		System.out.println(InvoiceInfo);
		Assert.assertTrue(InvoiceInfo.contains("Invoice Information"));

		WebElement AccountManagerName = driver.findElement(By.xpath("//li[@id='filter-accountmanager']"));
		AccountManagerName.isDisplayed();

		String AttachToContract = driver.findElement(By.xpath("//td[contains(text(),'Attached to Contract :')]"))
				.getText();
		Assert.assertTrue(AttachToContract.contains("Attached to Contract :"));

		String name = driver.findElement(By.xpath("//td[@class='alignR'][contains(text(),'Name')]")).getText();
		Assert.assertTrue(name.contains("Name"));

		WebElement NameTextField = driver.findElement(By.xpath("//input[@id='sowName']"));
		NameTextField.isDisplayed();

		String AccountManager = driver.findElement(By.xpath("//td[contains(text(),'Account Manager :')]")).getText();
		Assert.assertTrue(AccountManager.contains("Account Manager :"));

		String Discription = driver.findElement(By.xpath("//td[contains(text(),'Description')]")).getText();
		Assert.assertTrue(Discription.contains("Description"));

		WebElement DiscriptionTextField = driver.findElement(By.xpath("//input[@id='description']"));
		DiscriptionTextField.isDisplayed();

		String ContractTerm = driver.findElement(By.xpath("//td[contains(text(),'Contract Term')]")).getText();
		Assert.assertTrue(ContractTerm.contains("Contract Term"));

		WebElement ContractTermField = driver.findElement(By.xpath("//input[@id='contractStart']"));
		ContractTermField.isDisplayed();

		String InvoiceTerm = driver.findElement(By.xpath("//td[contains(text(),'Invoice Term')]")).getText();
		Assert.assertTrue(InvoiceTerm.contains("Invoice Term"));

		WebElement InvoiceTermField = driver.findElement(By.xpath("//input[@id='invoiceStart']"));
		InvoiceTermField.isDisplayed();

		String InvoiceRenewalFrequency = driver
				.findElement(By.xpath("//td[contains(text(),'Invoice Renewal Frequency')]")).getText();
		Assert.assertTrue(InvoiceRenewalFrequency.contains("Invoice Renewal Frequency"));

		List<WebElement> YearList = driver.findElements(By.xpath("//select[@id='invoiceRenewalFreqUOM']"));
		System.out.println("Number of elements:" + YearList.size());

		for (int i = 0; i < YearList.size(); i++) {
			System.out.println("Available List is ==> : " + YearList.get(i).getText());
		}

		String DueDate = driver.findElement(By.xpath("//td[contains(text(),'Due Date')]")).getText();
		Assert.assertTrue(DueDate.contains("Due Date"));

		WebElement DueDateField = driver.findElement(By.xpath("//input[@id='contractDueDate']"));
		DueDateField.isDisplayed();

		String TotalNumberOfTemplets = driver
				.findElement(By.xpath("//label[contains(text(),'Total Number of Templates')]")).getText();
		Assert.assertTrue(TotalNumberOfTemplets.contains("Total Number of Templates"));

		String InvoiceType = driver.findElement(By.xpath("//label[contains(text(),'Invoice Type')]")).getText();
		Assert.assertTrue(InvoiceType.contains("Invoice Type"));

		String TransactionLimit = driver.findElement(By.xpath("//label[contains(text(),'Transaction Limit')]"))
				.getText();
		Assert.assertTrue(TransactionLimit.contains("Transaction Limit"));

		String MSAA = driver.findElement(By.xpath("//label[contains(text(),'MSAA Required')]")).getText();
		Assert.assertTrue(MSAA.contains("MSAA Required"));

		WebDriverWait MSAACheckBox = new WebDriverWait(driver, 10);
		MSAACheckBox.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='msaa']")));

		String Notes = driver.findElement(By.xpath("//td[contains(text(),'Notes')]")).getText();
		Assert.assertTrue(Notes.contains("Notes"));

		WebElement NotesTextField = driver.findElement(By.xpath("//textarea[@id='contractNotes']"));
		NotesTextField.isDisplayed();

		String InvoiceNumber = driver.findElement(By.xpath("//label[contains(text(),'Invoice Number')]")).getText();
		Assert.assertTrue(InvoiceNumber.contains("Invoice Number"));

		WebElement InvoiceNumberTextField = driver.findElement(By.xpath("//input[@id='invoicenumber']"));
		InvoiceNumberTextField.isDisplayed();

		String PONumber = driver.findElement(By.xpath("//label[contains(text(),'PO Number')]")).getText();
		Assert.assertTrue(PONumber.contains("PO Number"));

		WebElement PONumberTextField = driver.findElement(By.xpath("//input[@id='ponumber']"));
		PONumberTextField.isDisplayed();

		String ContractNumber = driver.findElement(By.xpath("//label[contains(text(),'Contract Number')]")).getText();
		Assert.assertTrue(ContractNumber.contains("Contract Number"));

		WebElement ContractNumberTextField = driver.findElement(By.xpath("//input[@id='contractnumber']"));
		ContractNumberTextField.isDisplayed();

	}

	public void VerifyAdminTools_CustomInvoiceBuilder_SelectOneorMoreProductsFromTheListBelowTab() {

		WebDriverWait Custom = new WebDriverWait(driver, 10);
		Custom.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//label[@class='ie8dummyclass customProduct']")));

		WebDriverWait PresenceRBL = new WebDriverWait(driver, 10);
		PresenceRBL.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[1]/label[1]")));

		WebDriverWait PresenceLBC = new WebDriverWait(driver, 10);
		PresenceLBC.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[2]/label[1]")));

		WebDriverWait PresenceLDS = new WebDriverWait(driver, 10);
		PresenceLDS.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[3]/label[1]")));

		WebDriverWait PresenceLP = new WebDriverWait(driver, 10);
		PresenceLP.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[4]/label[1]")));

		WebDriverWait AdvertisingLocal = new WebDriverWait(driver, 10);
		AdvertisingLocal.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[5]/label[1]")));

		WebDriverWait SocialModeration = new WebDriverWait(driver, 10);
		SocialModeration.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[6]/label[1]")));

		WebDriverWait SocialRM = new WebDriverWait(driver, 10);
		SocialRM.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[7]/label[1]")));

		WebDriverWait MobileApp = new WebDriverWait(driver, 10);
		MobileApp.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[8]/label[1]")));

		WebDriverWait InsightsEnhanced = new WebDriverWait(driver, 10);
		InsightsEnhanced.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[9]/label[1]")));

		WebDriverWait BrandifyLabs = new WebDriverWait(driver, 10);
		BrandifyLabs.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[10]/label[1]")));

		WebDriverWait Annnualfees = new WebDriverWait(driver, 10);
		Annnualfees.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[11]/label[1]")));

		WebDriverWait OneTimefee = new WebDriverWait(driver, 10);
		OneTimefee.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//ul[@id='availableProductList']/li[12]/label[1]")));

	}

	public void VerifyAdminTools_CustomInvoiceBuilder_SelectOneorMoreFeatureForEachProducTab() {

		String FeatureEachProduct = driver
				.findElement(By.xpath("//p[contains(text(),'Please select one or more feature(s) for each prod')]"))
				.getText();
		System.out.println(FeatureEachProduct);
		Assert.assertTrue(FeatureEachProduct.contains("Please select one or more feature(s) for each prod"));

		WebElement ProductContainerBody = driver.findElement(By.xpath("//div[@class='productContainer col2']"));
		ProductContainerBody.isDisplayed();

	}

	public void VerifyAdminTools_CustomInvoiceBuilder_PleaseConfigureThePricingTab() {

		String ConfigurePrice = driver.findElement(By.xpath("//p[contains(text(),'Please configure the pricing')]"))
				.getText();
		System.out.println(ConfigurePrice);
		Assert.assertTrue(ConfigurePrice.contains("Please configure the pricing"));

		WebElement ConfigurePriceContainerBody = driver
				.findElement(By.xpath("//p[@class='noProduct alignC roundedCorners col2']"));
		ConfigurePriceContainerBody.isDisplayed();

		WebElement CreateInvoice = driver.findElement(By.xpath("//button[@id='saveSOWButton']"));
		CreateInvoice.isDisplayed();

		WebElement SelectedProduct = driver.findElement(By.xpath("//p[@class='navigatorTitle fixedContainer']"));
		SelectedProduct.isDisplayed();

	}

	public void GoToAdminTools_FacebookLoginTab() {
		WebElement FacebookLogin = driver.findElement(By.xpath("//a[contains(text(),'Facebook Login')]"));
		// FacebookLogin.click();
		FacebookLogin.isDisplayed();
		System.out.println("Clicking on Facebook Login Tab Shows an Error");
	}

	
}
